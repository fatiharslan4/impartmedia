// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HiveRule is an object representing the database table.
type HiveRule struct {
	RuleID    uint64      `boil:"rule_id" json:"rule_id" toml:"rule_id" yaml:"rule_id"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Status    bool        `boil:"status" json:"status" toml:"status" yaml:"status"`
	MaxLimit  null.Int    `boil:"max_limit" json:"max_limit,omitempty" toml:"max_limit" yaml:"max_limit,omitempty"`
	NoOfUsers int64       `boil:"no_of_users" json:"no_of_users" toml:"no_of_users" yaml:"no_of_users"`
	HiveID    null.Uint64 `boil:"hive_id" json:"hive_id,omitempty" toml:"hive_id" yaml:"hive_id,omitempty"`

	R *hiveRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hiveRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HiveRuleColumns = struct {
	RuleID    string
	Name      string
	Status    string
	MaxLimit  string
	NoOfUsers string
	HiveID    string
}{
	RuleID:    "rule_id",
	Name:      "name",
	Status:    "status",
	MaxLimit:  "max_limit",
	NoOfUsers: "no_of_users",
	HiveID:    "hive_id",
}

var HiveRuleTableColumns = struct {
	RuleID    string
	Name      string
	Status    string
	MaxLimit  string
	NoOfUsers string
	HiveID    string
}{
	RuleID:    "hive_rules.rule_id",
	Name:      "hive_rules.name",
	Status:    "hive_rules.status",
	MaxLimit:  "hive_rules.max_limit",
	NoOfUsers: "hive_rules.no_of_users",
	HiveID:    "hive_rules.hive_id",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var HiveRuleWhere = struct {
	RuleID    whereHelperuint64
	Name      whereHelperstring
	Status    whereHelperbool
	MaxLimit  whereHelpernull_Int
	NoOfUsers whereHelperint64
	HiveID    whereHelpernull_Uint64
}{
	RuleID:    whereHelperuint64{field: "`hive_rules`.`rule_id`"},
	Name:      whereHelperstring{field: "`hive_rules`.`name`"},
	Status:    whereHelperbool{field: "`hive_rules`.`status`"},
	MaxLimit:  whereHelpernull_Int{field: "`hive_rules`.`max_limit`"},
	NoOfUsers: whereHelperint64{field: "`hive_rules`.`no_of_users`"},
	HiveID:    whereHelpernull_Uint64{field: "`hive_rules`.`hive_id`"},
}

// HiveRuleRels is where relationship names are stored.
var HiveRuleRels = struct {
	Hive                  string
	Hives                 string
	RuleHiveRulesCriteria string
}{
	Hive:                  "Hive",
	Hives:                 "Hives",
	RuleHiveRulesCriteria: "RuleHiveRulesCriteria",
}

// hiveRuleR is where relationships are stored.
type hiveRuleR struct {
	Hive                  *Hive                   `boil:"Hive" json:"Hive" toml:"Hive" yaml:"Hive"`
	Hives                 HiveSlice               `boil:"Hives" json:"Hives" toml:"Hives" yaml:"Hives"`
	RuleHiveRulesCriteria HiveRulesCriteriumSlice `boil:"RuleHiveRulesCriteria" json:"RuleHiveRulesCriteria" toml:"RuleHiveRulesCriteria" yaml:"RuleHiveRulesCriteria"`
}

// NewStruct creates a new relationship struct
func (*hiveRuleR) NewStruct() *hiveRuleR {
	return &hiveRuleR{}
}

// hiveRuleL is where Load methods for each relationship are stored.
type hiveRuleL struct{}

var (
	hiveRuleAllColumns            = []string{"rule_id", "name", "status", "max_limit", "no_of_users", "hive_id"}
	hiveRuleColumnsWithoutDefault = []string{"name", "status", "max_limit", "no_of_users", "hive_id"}
	hiveRuleColumnsWithDefault    = []string{"rule_id"}
	hiveRulePrimaryKeyColumns     = []string{"rule_id"}
)

type (
	// HiveRuleSlice is an alias for a slice of pointers to HiveRule.
	// This should almost always be used instead of []HiveRule.
	HiveRuleSlice []*HiveRule
	// HiveRuleHook is the signature for custom HiveRule hook methods
	HiveRuleHook func(context.Context, boil.ContextExecutor, *HiveRule) error

	hiveRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hiveRuleType                 = reflect.TypeOf(&HiveRule{})
	hiveRuleMapping              = queries.MakeStructMapping(hiveRuleType)
	hiveRulePrimaryKeyMapping, _ = queries.BindMapping(hiveRuleType, hiveRuleMapping, hiveRulePrimaryKeyColumns)
	hiveRuleInsertCacheMut       sync.RWMutex
	hiveRuleInsertCache          = make(map[string]insertCache)
	hiveRuleUpdateCacheMut       sync.RWMutex
	hiveRuleUpdateCache          = make(map[string]updateCache)
	hiveRuleUpsertCacheMut       sync.RWMutex
	hiveRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hiveRuleBeforeInsertHooks []HiveRuleHook
var hiveRuleBeforeUpdateHooks []HiveRuleHook
var hiveRuleBeforeDeleteHooks []HiveRuleHook
var hiveRuleBeforeUpsertHooks []HiveRuleHook

var hiveRuleAfterInsertHooks []HiveRuleHook
var hiveRuleAfterSelectHooks []HiveRuleHook
var hiveRuleAfterUpdateHooks []HiveRuleHook
var hiveRuleAfterDeleteHooks []HiveRuleHook
var hiveRuleAfterUpsertHooks []HiveRuleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HiveRule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRuleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HiveRule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRuleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HiveRule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRuleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HiveRule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRuleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HiveRule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRuleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HiveRule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRuleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HiveRule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRuleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HiveRule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRuleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HiveRule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRuleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHiveRuleHook registers your hook function for all future operations.
func AddHiveRuleHook(hookPoint boil.HookPoint, hiveRuleHook HiveRuleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		hiveRuleBeforeInsertHooks = append(hiveRuleBeforeInsertHooks, hiveRuleHook)
	case boil.BeforeUpdateHook:
		hiveRuleBeforeUpdateHooks = append(hiveRuleBeforeUpdateHooks, hiveRuleHook)
	case boil.BeforeDeleteHook:
		hiveRuleBeforeDeleteHooks = append(hiveRuleBeforeDeleteHooks, hiveRuleHook)
	case boil.BeforeUpsertHook:
		hiveRuleBeforeUpsertHooks = append(hiveRuleBeforeUpsertHooks, hiveRuleHook)
	case boil.AfterInsertHook:
		hiveRuleAfterInsertHooks = append(hiveRuleAfterInsertHooks, hiveRuleHook)
	case boil.AfterSelectHook:
		hiveRuleAfterSelectHooks = append(hiveRuleAfterSelectHooks, hiveRuleHook)
	case boil.AfterUpdateHook:
		hiveRuleAfterUpdateHooks = append(hiveRuleAfterUpdateHooks, hiveRuleHook)
	case boil.AfterDeleteHook:
		hiveRuleAfterDeleteHooks = append(hiveRuleAfterDeleteHooks, hiveRuleHook)
	case boil.AfterUpsertHook:
		hiveRuleAfterUpsertHooks = append(hiveRuleAfterUpsertHooks, hiveRuleHook)
	}
}

// One returns a single hiveRule record from the query.
func (q hiveRuleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HiveRule, error) {
	o := &HiveRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for hive_rules")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HiveRule records from the query.
func (q hiveRuleQuery) All(ctx context.Context, exec boil.ContextExecutor) (HiveRuleSlice, error) {
	var o []*HiveRule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to HiveRule slice")
	}

	if len(hiveRuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HiveRule records in the query.
func (q hiveRuleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count hive_rules rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hiveRuleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if hive_rules exists")
	}

	return count > 0, nil
}

// Hive pointed to by the foreign key.
func (o *HiveRule) Hive(mods ...qm.QueryMod) hiveQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`hive_id` = ?", o.HiveID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Hives(queryMods...)
	queries.SetFrom(query.Query, "`hive`")

	return query
}

// Hives retrieves all the hive's Hives with an executor.
func (o *HiveRule) Hives(mods ...qm.QueryMod) hiveQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`hive_rule_map` on `hive`.`hive_id` = `hive_rule_map`.`hive_id`"),
		qm.Where("`hive_rule_map`.`rule_id`=?", o.RuleID),
	)

	query := Hives(queryMods...)
	queries.SetFrom(query.Query, "`hive`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`hive`.*"})
	}

	return query
}

// RuleHiveRulesCriteria retrieves all the hive_rules_criterium's HiveRulesCriteria with an executor via rule_id column.
func (o *HiveRule) RuleHiveRulesCriteria(mods ...qm.QueryMod) hiveRulesCriteriumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`hive_rules_criteria`.`rule_id`=?", o.RuleID),
	)

	query := HiveRulesCriteria(queryMods...)
	queries.SetFrom(query.Query, "`hive_rules_criteria`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`hive_rules_criteria`.*"})
	}

	return query
}

// LoadHive allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hiveRuleL) LoadHive(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHiveRule interface{}, mods queries.Applicator) error {
	var slice []*HiveRule
	var object *HiveRule

	if singular {
		object = maybeHiveRule.(*HiveRule)
	} else {
		slice = *maybeHiveRule.(*[]*HiveRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveRuleR{}
		}
		if !queries.IsNil(object.HiveID) {
			args = append(args, object.HiveID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveRuleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HiveID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HiveID) {
				args = append(args, obj.HiveID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hive`),
		qm.WhereIn(`hive.hive_id in ?`, args...),
		qmhelper.WhereIsNull(`hive.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Hive")
	}

	var resultSlice []*Hive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Hive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hive")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hive")
	}

	if len(hiveRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Hive = foreign
		if foreign.R == nil {
			foreign.R = &hiveR{}
		}
		foreign.R.HiveRules = append(foreign.R.HiveRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HiveID, foreign.HiveID) {
				local.R.Hive = foreign
				if foreign.R == nil {
					foreign.R = &hiveR{}
				}
				foreign.R.HiveRules = append(foreign.R.HiveRules, local)
				break
			}
		}
	}

	return nil
}

// LoadHives allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hiveRuleL) LoadHives(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHiveRule interface{}, mods queries.Applicator) error {
	var slice []*HiveRule
	var object *HiveRule

	if singular {
		object = maybeHiveRule.(*HiveRule)
	} else {
		slice = *maybeHiveRule.(*[]*HiveRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveRuleR{}
		}
		args = append(args, object.RuleID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveRuleR{}
			}

			for _, a := range args {
				if a == obj.RuleID {
					continue Outer
				}
			}

			args = append(args, obj.RuleID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`hive`.hive_id, `hive`.name, `hive`.description, `hive`.pinned_post_id, `hive`.tag_comparisons, `hive`.notification_topic_arn, `hive`.hive_distributions, `hive`.created_at, `hive`.deleted_at, `a`.`rule_id`"),
		qm.From("`hive`"),
		qm.InnerJoin("`hive_rule_map` as `a` on `hive`.`hive_id` = `a`.`hive_id`"),
		qm.WhereIn("`a`.`rule_id` in ?", args...),
		qmhelper.WhereIsNull("`hive`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hive")
	}

	var resultSlice []*Hive

	var localJoinCols []uint64
	for results.Next() {
		one := new(Hive)
		var localJoinCol uint64

		err = results.Scan(&one.HiveID, &one.Name, &one.Description, &one.PinnedPostID, &one.TagComparisons, &one.NotificationTopicArn, &one.HiveDistributions, &one.CreatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for hive")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice hive")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hive")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hive")
	}

	if len(hiveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Hives = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hiveR{}
			}
			foreign.R.RuleHiveRules = append(foreign.R.RuleHiveRules, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.RuleID == localJoinCol {
				local.R.Hives = append(local.R.Hives, foreign)
				if foreign.R == nil {
					foreign.R = &hiveR{}
				}
				foreign.R.RuleHiveRules = append(foreign.R.RuleHiveRules, local)
				break
			}
		}
	}

	return nil
}

// LoadRuleHiveRulesCriteria allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hiveRuleL) LoadRuleHiveRulesCriteria(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHiveRule interface{}, mods queries.Applicator) error {
	var slice []*HiveRule
	var object *HiveRule

	if singular {
		object = maybeHiveRule.(*HiveRule)
	} else {
		slice = *maybeHiveRule.(*[]*HiveRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveRuleR{}
		}
		args = append(args, object.RuleID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveRuleR{}
			}

			for _, a := range args {
				if a == obj.RuleID {
					continue Outer
				}
			}

			args = append(args, obj.RuleID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hive_rules_criteria`),
		qm.WhereIn(`hive_rules_criteria.rule_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hive_rules_criteria")
	}

	var resultSlice []*HiveRulesCriterium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hive_rules_criteria")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hive_rules_criteria")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hive_rules_criteria")
	}

	if len(hiveRulesCriteriumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RuleHiveRulesCriteria = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hiveRulesCriteriumR{}
			}
			foreign.R.Rule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RuleID == foreign.RuleID {
				local.R.RuleHiveRulesCriteria = append(local.R.RuleHiveRulesCriteria, foreign)
				if foreign.R == nil {
					foreign.R = &hiveRulesCriteriumR{}
				}
				foreign.R.Rule = local
				break
			}
		}
	}

	return nil
}

// SetHive of the hiveRule to the related item.
// Sets o.R.Hive to related.
// Adds o to related.R.HiveRules.
func (o *HiveRule) SetHive(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Hive) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `hive_rules` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"hive_id"}),
		strmangle.WhereClause("`", "`", 0, hiveRulePrimaryKeyColumns),
	)
	values := []interface{}{related.HiveID, o.RuleID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HiveID, related.HiveID)
	if o.R == nil {
		o.R = &hiveRuleR{
			Hive: related,
		}
	} else {
		o.R.Hive = related
	}

	if related.R == nil {
		related.R = &hiveR{
			HiveRules: HiveRuleSlice{o},
		}
	} else {
		related.R.HiveRules = append(related.R.HiveRules, o)
	}

	return nil
}

// RemoveHive relationship.
// Sets o.R.Hive to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *HiveRule) RemoveHive(ctx context.Context, exec boil.ContextExecutor, related *Hive) error {
	var err error

	queries.SetScanner(&o.HiveID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("hive_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Hive = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.HiveRules {
		if queries.Equal(o.HiveID, ri.HiveID) {
			continue
		}

		ln := len(related.R.HiveRules)
		if ln > 1 && i < ln-1 {
			related.R.HiveRules[i] = related.R.HiveRules[ln-1]
		}
		related.R.HiveRules = related.R.HiveRules[:ln-1]
		break
	}
	return nil
}

// AddHives adds the given related objects to the existing relationships
// of the hive_rule, optionally inserting them as new records.
// Appends related to o.R.Hives.
// Sets related.R.RuleHiveRules appropriately.
func (o *HiveRule) AddHives(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Hive) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `hive_rule_map` (`rule_id`, `hive_id`) values (?, ?)"
		values := []interface{}{o.RuleID, rel.HiveID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &hiveRuleR{
			Hives: related,
		}
	} else {
		o.R.Hives = append(o.R.Hives, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hiveR{
				RuleHiveRules: HiveRuleSlice{o},
			}
		} else {
			rel.R.RuleHiveRules = append(rel.R.RuleHiveRules, o)
		}
	}
	return nil
}

// SetHives removes all previously related items of the
// hive_rule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RuleHiveRules's Hives accordingly.
// Replaces o.R.Hives with related.
// Sets related.R.RuleHiveRules's Hives accordingly.
func (o *HiveRule) SetHives(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Hive) error {
	query := "delete from `hive_rule_map` where `rule_id` = ?"
	values := []interface{}{o.RuleID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeHivesFromRuleHiveRulesSlice(o, related)
	if o.R != nil {
		o.R.Hives = nil
	}
	return o.AddHives(ctx, exec, insert, related...)
}

// RemoveHives relationships from objects passed in.
// Removes related items from R.Hives (uses pointer comparison, removal does not keep order)
// Sets related.R.RuleHiveRules.
func (o *HiveRule) RemoveHives(ctx context.Context, exec boil.ContextExecutor, related ...*Hive) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `hive_rule_map` where `rule_id` = ? and `hive_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.RuleID}
	for _, rel := range related {
		values = append(values, rel.HiveID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeHivesFromRuleHiveRulesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Hives {
			if rel != ri {
				continue
			}

			ln := len(o.R.Hives)
			if ln > 1 && i < ln-1 {
				o.R.Hives[i] = o.R.Hives[ln-1]
			}
			o.R.Hives = o.R.Hives[:ln-1]
			break
		}
	}

	return nil
}

func removeHivesFromRuleHiveRulesSlice(o *HiveRule, related []*Hive) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.RuleHiveRules {
			if o.RuleID != ri.RuleID {
				continue
			}

			ln := len(rel.R.RuleHiveRules)
			if ln > 1 && i < ln-1 {
				rel.R.RuleHiveRules[i] = rel.R.RuleHiveRules[ln-1]
			}
			rel.R.RuleHiveRules = rel.R.RuleHiveRules[:ln-1]
			break
		}
	}
}

// AddRuleHiveRulesCriteria adds the given related objects to the existing relationships
// of the hive_rule, optionally inserting them as new records.
// Appends related to o.R.RuleHiveRulesCriteria.
// Sets related.R.Rule appropriately.
func (o *HiveRule) AddRuleHiveRulesCriteria(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HiveRulesCriterium) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RuleID = o.RuleID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `hive_rules_criteria` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"rule_id"}),
				strmangle.WhereClause("`", "`", 0, hiveRulesCriteriumPrimaryKeyColumns),
			)
			values := []interface{}{o.RuleID, rel.RuleID, rel.QuestionID, rel.AnswerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RuleID = o.RuleID
		}
	}

	if o.R == nil {
		o.R = &hiveRuleR{
			RuleHiveRulesCriteria: related,
		}
	} else {
		o.R.RuleHiveRulesCriteria = append(o.R.RuleHiveRulesCriteria, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hiveRulesCriteriumR{
				Rule: o,
			}
		} else {
			rel.R.Rule = o
		}
	}
	return nil
}

// HiveRules retrieves all the records using an executor.
func HiveRules(mods ...qm.QueryMod) hiveRuleQuery {
	mods = append(mods, qm.From("`hive_rules`"))
	return hiveRuleQuery{NewQuery(mods...)}
}

// FindHiveRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHiveRule(ctx context.Context, exec boil.ContextExecutor, ruleID uint64, selectCols ...string) (*HiveRule, error) {
	hiveRuleObj := &HiveRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `hive_rules` where `rule_id`=?", sel,
	)

	q := queries.Raw(query, ruleID)

	err := q.Bind(ctx, exec, hiveRuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from hive_rules")
	}

	if err = hiveRuleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hiveRuleObj, err
	}

	return hiveRuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HiveRule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no hive_rules provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hiveRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hiveRuleInsertCacheMut.RLock()
	cache, cached := hiveRuleInsertCache[key]
	hiveRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hiveRuleAllColumns,
			hiveRuleColumnsWithDefault,
			hiveRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hiveRuleType, hiveRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hiveRuleType, hiveRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `hive_rules` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `hive_rules` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `hive_rules` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, hiveRulePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into hive_rules")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RuleID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == hiveRuleMapping["rule_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RuleID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for hive_rules")
	}

CacheNoHooks:
	if !cached {
		hiveRuleInsertCacheMut.Lock()
		hiveRuleInsertCache[key] = cache
		hiveRuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HiveRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HiveRule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hiveRuleUpdateCacheMut.RLock()
	cache, cached := hiveRuleUpdateCache[key]
	hiveRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hiveRuleAllColumns,
			hiveRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update hive_rules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `hive_rules` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, hiveRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hiveRuleType, hiveRuleMapping, append(wl, hiveRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update hive_rules row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for hive_rules")
	}

	if !cached {
		hiveRuleUpdateCacheMut.Lock()
		hiveRuleUpdateCache[key] = cache
		hiveRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hiveRuleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for hive_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for hive_rules")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HiveRuleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hiveRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `hive_rules` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hiveRulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in hiveRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all hiveRule")
	}
	return rowsAff, nil
}

var mySQLHiveRuleUniqueColumns = []string{
	"rule_id",
	"name",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HiveRule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no hive_rules provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hiveRuleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLHiveRuleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hiveRuleUpsertCacheMut.RLock()
	cache, cached := hiveRuleUpsertCache[key]
	hiveRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			hiveRuleAllColumns,
			hiveRuleColumnsWithDefault,
			hiveRuleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			hiveRuleAllColumns,
			hiveRulePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert hive_rules, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`hive_rules`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `hive_rules` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(hiveRuleType, hiveRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hiveRuleType, hiveRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for hive_rules")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RuleID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == hiveRuleMapping["rule_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(hiveRuleType, hiveRuleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for hive_rules")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for hive_rules")
	}

CacheNoHooks:
	if !cached {
		hiveRuleUpsertCacheMut.Lock()
		hiveRuleUpsertCache[key] = cache
		hiveRuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HiveRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HiveRule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no HiveRule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hiveRulePrimaryKeyMapping)
	sql := "DELETE FROM `hive_rules` WHERE `rule_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from hive_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for hive_rules")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hiveRuleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no hiveRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from hive_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for hive_rules")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HiveRuleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hiveRuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hiveRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `hive_rules` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hiveRulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from hiveRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for hive_rules")
	}

	if len(hiveRuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HiveRule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHiveRule(ctx, exec, o.RuleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HiveRuleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HiveRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hiveRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `hive_rules`.* FROM `hive_rules` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hiveRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in HiveRuleSlice")
	}

	*o = slice

	return nil
}

// HiveRuleExists checks if the HiveRule row exists.
func HiveRuleExists(ctx context.Context, exec boil.ContextExecutor, ruleID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `hive_rules` where `rule_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ruleID)
	}
	row := exec.QueryRowContext(ctx, sql, ruleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if hive_rules exists")
	}

	return exists, nil
}
