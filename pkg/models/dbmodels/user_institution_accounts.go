// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// UserInstitutionAccount is an object representing the database table.
type UserInstitutionAccount struct {
	AccountID              uint64            `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	UserInstitutionsID     uint64            `boil:"user_institutions_id" json:"user_institutions_id" toml:"user_institutions_id" yaml:"user_institutions_id"`
	PlaidAccountID         string            `boil:"plaid_account_id" json:"plaid_account_id" toml:"plaid_account_id" yaml:"plaid_account_id"`
	Available              types.Decimal     `boil:"available" json:"available" toml:"available" yaml:"available"`
	Current                types.Decimal     `boil:"current" json:"current" toml:"current" yaml:"current"`
	IsoCurrencyCode        null.String       `boil:"iso_currency_code" json:"iso_currency_code,omitempty" toml:"iso_currency_code" yaml:"iso_currency_code,omitempty"`
	CreditLimit            types.NullDecimal `boil:"credit_limit" json:"credit_limit,omitempty" toml:"credit_limit" yaml:"credit_limit,omitempty"`
	UnofficialCurrencyCode null.String       `boil:"unofficial_currency_code" json:"unofficial_currency_code,omitempty" toml:"unofficial_currency_code" yaml:"unofficial_currency_code,omitempty"`
	Mask                   null.String       `boil:"mask" json:"mask,omitempty" toml:"mask" yaml:"mask,omitempty"`
	Name                   string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	OfficialName           null.String       `boil:"official_name" json:"official_name,omitempty" toml:"official_name" yaml:"official_name,omitempty"`
	Subtype                null.String       `boil:"subtype" json:"subtype,omitempty" toml:"subtype" yaml:"subtype,omitempty"`
	Type                   null.String       `boil:"Type" json:"Type,omitempty" toml:"Type" yaml:"Type,omitempty"`

	R *userInstitutionAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userInstitutionAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserInstitutionAccountColumns = struct {
	AccountID              string
	UserInstitutionsID     string
	PlaidAccountID         string
	Available              string
	Current                string
	IsoCurrencyCode        string
	CreditLimit            string
	UnofficialCurrencyCode string
	Mask                   string
	Name                   string
	OfficialName           string
	Subtype                string
	Type                   string
}{
	AccountID:              "account_id",
	UserInstitutionsID:     "user_institutions_id",
	PlaidAccountID:         "plaid_account_id",
	Available:              "available",
	Current:                "current",
	IsoCurrencyCode:        "iso_currency_code",
	CreditLimit:            "credit_limit",
	UnofficialCurrencyCode: "unofficial_currency_code",
	Mask:                   "mask",
	Name:                   "name",
	OfficialName:           "official_name",
	Subtype:                "subtype",
	Type:                   "Type",
}

var UserInstitutionAccountTableColumns = struct {
	AccountID              string
	UserInstitutionsID     string
	PlaidAccountID         string
	Available              string
	Current                string
	IsoCurrencyCode        string
	CreditLimit            string
	UnofficialCurrencyCode string
	Mask                   string
	Name                   string
	OfficialName           string
	Subtype                string
	Type                   string
}{
	AccountID:              "user_institution_accounts.account_id",
	UserInstitutionsID:     "user_institution_accounts.user_institutions_id",
	PlaidAccountID:         "user_institution_accounts.plaid_account_id",
	Available:              "user_institution_accounts.available",
	Current:                "user_institution_accounts.current",
	IsoCurrencyCode:        "user_institution_accounts.iso_currency_code",
	CreditLimit:            "user_institution_accounts.credit_limit",
	UnofficialCurrencyCode: "user_institution_accounts.unofficial_currency_code",
	Mask:                   "user_institution_accounts.mask",
	Name:                   "user_institution_accounts.name",
	OfficialName:           "user_institution_accounts.official_name",
	Subtype:                "user_institution_accounts.subtype",
	Type:                   "user_institution_accounts.Type",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var UserInstitutionAccountWhere = struct {
	AccountID              whereHelperuint64
	UserInstitutionsID     whereHelperuint64
	PlaidAccountID         whereHelperstring
	Available              whereHelpertypes_Decimal
	Current                whereHelpertypes_Decimal
	IsoCurrencyCode        whereHelpernull_String
	CreditLimit            whereHelpertypes_NullDecimal
	UnofficialCurrencyCode whereHelpernull_String
	Mask                   whereHelpernull_String
	Name                   whereHelperstring
	OfficialName           whereHelpernull_String
	Subtype                whereHelpernull_String
	Type                   whereHelpernull_String
}{
	AccountID:              whereHelperuint64{field: "`user_institution_accounts`.`account_id`"},
	UserInstitutionsID:     whereHelperuint64{field: "`user_institution_accounts`.`user_institutions_id`"},
	PlaidAccountID:         whereHelperstring{field: "`user_institution_accounts`.`plaid_account_id`"},
	Available:              whereHelpertypes_Decimal{field: "`user_institution_accounts`.`available`"},
	Current:                whereHelpertypes_Decimal{field: "`user_institution_accounts`.`current`"},
	IsoCurrencyCode:        whereHelpernull_String{field: "`user_institution_accounts`.`iso_currency_code`"},
	CreditLimit:            whereHelpertypes_NullDecimal{field: "`user_institution_accounts`.`credit_limit`"},
	UnofficialCurrencyCode: whereHelpernull_String{field: "`user_institution_accounts`.`unofficial_currency_code`"},
	Mask:                   whereHelpernull_String{field: "`user_institution_accounts`.`mask`"},
	Name:                   whereHelperstring{field: "`user_institution_accounts`.`name`"},
	OfficialName:           whereHelpernull_String{field: "`user_institution_accounts`.`official_name`"},
	Subtype:                whereHelpernull_String{field: "`user_institution_accounts`.`subtype`"},
	Type:                   whereHelpernull_String{field: "`user_institution_accounts`.`Type`"},
}

// UserInstitutionAccountRels is where relationship names are stored.
var UserInstitutionAccountRels = struct {
	UserInstitution string
}{
	UserInstitution: "UserInstitution",
}

// userInstitutionAccountR is where relationships are stored.
type userInstitutionAccountR struct {
	UserInstitution *UserInstitution `boil:"UserInstitution" json:"UserInstitution" toml:"UserInstitution" yaml:"UserInstitution"`
}

// NewStruct creates a new relationship struct
func (*userInstitutionAccountR) NewStruct() *userInstitutionAccountR {
	return &userInstitutionAccountR{}
}

// userInstitutionAccountL is where Load methods for each relationship are stored.
type userInstitutionAccountL struct{}

var (
	userInstitutionAccountAllColumns            = []string{"account_id", "user_institutions_id", "plaid_account_id", "available", "current", "iso_currency_code", "credit_limit", "unofficial_currency_code", "mask", "name", "official_name", "subtype", "Type"}
	userInstitutionAccountColumnsWithoutDefault = []string{"user_institutions_id", "plaid_account_id", "iso_currency_code", "credit_limit", "unofficial_currency_code", "mask", "name", "official_name", "subtype", "Type"}
	userInstitutionAccountColumnsWithDefault    = []string{"account_id", "available", "current"}
	userInstitutionAccountPrimaryKeyColumns     = []string{"account_id"}
)

type (
	// UserInstitutionAccountSlice is an alias for a slice of pointers to UserInstitutionAccount.
	// This should almost always be used instead of []UserInstitutionAccount.
	UserInstitutionAccountSlice []*UserInstitutionAccount
	// UserInstitutionAccountHook is the signature for custom UserInstitutionAccount hook methods
	UserInstitutionAccountHook func(context.Context, boil.ContextExecutor, *UserInstitutionAccount) error

	userInstitutionAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userInstitutionAccountType                 = reflect.TypeOf(&UserInstitutionAccount{})
	userInstitutionAccountMapping              = queries.MakeStructMapping(userInstitutionAccountType)
	userInstitutionAccountPrimaryKeyMapping, _ = queries.BindMapping(userInstitutionAccountType, userInstitutionAccountMapping, userInstitutionAccountPrimaryKeyColumns)
	userInstitutionAccountInsertCacheMut       sync.RWMutex
	userInstitutionAccountInsertCache          = make(map[string]insertCache)
	userInstitutionAccountUpdateCacheMut       sync.RWMutex
	userInstitutionAccountUpdateCache          = make(map[string]updateCache)
	userInstitutionAccountUpsertCacheMut       sync.RWMutex
	userInstitutionAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userInstitutionAccountBeforeInsertHooks []UserInstitutionAccountHook
var userInstitutionAccountBeforeUpdateHooks []UserInstitutionAccountHook
var userInstitutionAccountBeforeDeleteHooks []UserInstitutionAccountHook
var userInstitutionAccountBeforeUpsertHooks []UserInstitutionAccountHook

var userInstitutionAccountAfterInsertHooks []UserInstitutionAccountHook
var userInstitutionAccountAfterSelectHooks []UserInstitutionAccountHook
var userInstitutionAccountAfterUpdateHooks []UserInstitutionAccountHook
var userInstitutionAccountAfterDeleteHooks []UserInstitutionAccountHook
var userInstitutionAccountAfterUpsertHooks []UserInstitutionAccountHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserInstitutionAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserInstitutionAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserInstitutionAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserInstitutionAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserInstitutionAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserInstitutionAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserInstitutionAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserInstitutionAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserInstitutionAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserInstitutionAccountHook registers your hook function for all future operations.
func AddUserInstitutionAccountHook(hookPoint boil.HookPoint, userInstitutionAccountHook UserInstitutionAccountHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userInstitutionAccountBeforeInsertHooks = append(userInstitutionAccountBeforeInsertHooks, userInstitutionAccountHook)
	case boil.BeforeUpdateHook:
		userInstitutionAccountBeforeUpdateHooks = append(userInstitutionAccountBeforeUpdateHooks, userInstitutionAccountHook)
	case boil.BeforeDeleteHook:
		userInstitutionAccountBeforeDeleteHooks = append(userInstitutionAccountBeforeDeleteHooks, userInstitutionAccountHook)
	case boil.BeforeUpsertHook:
		userInstitutionAccountBeforeUpsertHooks = append(userInstitutionAccountBeforeUpsertHooks, userInstitutionAccountHook)
	case boil.AfterInsertHook:
		userInstitutionAccountAfterInsertHooks = append(userInstitutionAccountAfterInsertHooks, userInstitutionAccountHook)
	case boil.AfterSelectHook:
		userInstitutionAccountAfterSelectHooks = append(userInstitutionAccountAfterSelectHooks, userInstitutionAccountHook)
	case boil.AfterUpdateHook:
		userInstitutionAccountAfterUpdateHooks = append(userInstitutionAccountAfterUpdateHooks, userInstitutionAccountHook)
	case boil.AfterDeleteHook:
		userInstitutionAccountAfterDeleteHooks = append(userInstitutionAccountAfterDeleteHooks, userInstitutionAccountHook)
	case boil.AfterUpsertHook:
		userInstitutionAccountAfterUpsertHooks = append(userInstitutionAccountAfterUpsertHooks, userInstitutionAccountHook)
	}
}

// One returns a single userInstitutionAccount record from the query.
func (q userInstitutionAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserInstitutionAccount, error) {
	o := &UserInstitutionAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for user_institution_accounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserInstitutionAccount records from the query.
func (q userInstitutionAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserInstitutionAccountSlice, error) {
	var o []*UserInstitutionAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to UserInstitutionAccount slice")
	}

	if len(userInstitutionAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserInstitutionAccount records in the query.
func (q userInstitutionAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count user_institution_accounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userInstitutionAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if user_institution_accounts exists")
	}

	return count > 0, nil
}

// UserInstitution pointed to by the foreign key.
func (o *UserInstitutionAccount) UserInstitution(mods ...qm.QueryMod) userInstitutionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_institutions_id` = ?", o.UserInstitutionsID),
	}

	queryMods = append(queryMods, mods...)

	query := UserInstitutions(queryMods...)
	queries.SetFrom(query.Query, "`user_institutions`")

	return query
}

// LoadUserInstitution allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userInstitutionAccountL) LoadUserInstitution(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserInstitutionAccount interface{}, mods queries.Applicator) error {
	var slice []*UserInstitutionAccount
	var object *UserInstitutionAccount

	if singular {
		object = maybeUserInstitutionAccount.(*UserInstitutionAccount)
	} else {
		slice = *maybeUserInstitutionAccount.(*[]*UserInstitutionAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userInstitutionAccountR{}
		}
		args = append(args, object.UserInstitutionsID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userInstitutionAccountR{}
			}

			for _, a := range args {
				if a == obj.UserInstitutionsID {
					continue Outer
				}
			}

			args = append(args, obj.UserInstitutionsID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_institutions`),
		qm.WhereIn(`user_institutions.user_institutions_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserInstitution")
	}

	var resultSlice []*UserInstitution
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserInstitution")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_institutions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_institutions")
	}

	if len(userInstitutionAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserInstitution = foreign
		if foreign.R == nil {
			foreign.R = &userInstitutionR{}
		}
		foreign.R.UserInstitutionAccounts = append(foreign.R.UserInstitutionAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserInstitutionsID == foreign.UserInstitutionsID {
				local.R.UserInstitution = foreign
				if foreign.R == nil {
					foreign.R = &userInstitutionR{}
				}
				foreign.R.UserInstitutionAccounts = append(foreign.R.UserInstitutionAccounts, local)
				break
			}
		}
	}

	return nil
}

// SetUserInstitution of the userInstitutionAccount to the related item.
// Sets o.R.UserInstitution to related.
// Adds o to related.R.UserInstitutionAccounts.
func (o *UserInstitutionAccount) SetUserInstitution(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserInstitution) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_institution_accounts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_institutions_id"}),
		strmangle.WhereClause("`", "`", 0, userInstitutionAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.UserInstitutionsID, o.AccountID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserInstitutionsID = related.UserInstitutionsID
	if o.R == nil {
		o.R = &userInstitutionAccountR{
			UserInstitution: related,
		}
	} else {
		o.R.UserInstitution = related
	}

	if related.R == nil {
		related.R = &userInstitutionR{
			UserInstitutionAccounts: UserInstitutionAccountSlice{o},
		}
	} else {
		related.R.UserInstitutionAccounts = append(related.R.UserInstitutionAccounts, o)
	}

	return nil
}

// UserInstitutionAccounts retrieves all the records using an executor.
func UserInstitutionAccounts(mods ...qm.QueryMod) userInstitutionAccountQuery {
	mods = append(mods, qm.From("`user_institution_accounts`"))
	return userInstitutionAccountQuery{NewQuery(mods...)}
}

// FindUserInstitutionAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserInstitutionAccount(ctx context.Context, exec boil.ContextExecutor, accountID uint64, selectCols ...string) (*UserInstitutionAccount, error) {
	userInstitutionAccountObj := &UserInstitutionAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_institution_accounts` where `account_id`=?", sel,
	)

	q := queries.Raw(query, accountID)

	err := q.Bind(ctx, exec, userInstitutionAccountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from user_institution_accounts")
	}

	if err = userInstitutionAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userInstitutionAccountObj, err
	}

	return userInstitutionAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserInstitutionAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no user_institution_accounts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userInstitutionAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInstitutionAccountInsertCacheMut.RLock()
	cache, cached := userInstitutionAccountInsertCache[key]
	userInstitutionAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userInstitutionAccountAllColumns,
			userInstitutionAccountColumnsWithDefault,
			userInstitutionAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userInstitutionAccountType, userInstitutionAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userInstitutionAccountType, userInstitutionAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_institution_accounts` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_institution_accounts` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_institution_accounts` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userInstitutionAccountPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into user_institution_accounts")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.AccountID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userInstitutionAccountMapping["account_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AccountID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for user_institution_accounts")
	}

CacheNoHooks:
	if !cached {
		userInstitutionAccountInsertCacheMut.Lock()
		userInstitutionAccountInsertCache[key] = cache
		userInstitutionAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserInstitutionAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserInstitutionAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userInstitutionAccountUpdateCacheMut.RLock()
	cache, cached := userInstitutionAccountUpdateCache[key]
	userInstitutionAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userInstitutionAccountAllColumns,
			userInstitutionAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update user_institution_accounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_institution_accounts` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userInstitutionAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userInstitutionAccountType, userInstitutionAccountMapping, append(wl, userInstitutionAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update user_institution_accounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for user_institution_accounts")
	}

	if !cached {
		userInstitutionAccountUpdateCacheMut.Lock()
		userInstitutionAccountUpdateCache[key] = cache
		userInstitutionAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userInstitutionAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for user_institution_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for user_institution_accounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserInstitutionAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userInstitutionAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_institution_accounts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userInstitutionAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in userInstitutionAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all userInstitutionAccount")
	}
	return rowsAff, nil
}

var mySQLUserInstitutionAccountUniqueColumns = []string{
	"account_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserInstitutionAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no user_institution_accounts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userInstitutionAccountColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserInstitutionAccountUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userInstitutionAccountUpsertCacheMut.RLock()
	cache, cached := userInstitutionAccountUpsertCache[key]
	userInstitutionAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userInstitutionAccountAllColumns,
			userInstitutionAccountColumnsWithDefault,
			userInstitutionAccountColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userInstitutionAccountAllColumns,
			userInstitutionAccountPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert user_institution_accounts, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_institution_accounts`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_institution_accounts` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userInstitutionAccountType, userInstitutionAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userInstitutionAccountType, userInstitutionAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for user_institution_accounts")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.AccountID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userInstitutionAccountMapping["account_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userInstitutionAccountType, userInstitutionAccountMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for user_institution_accounts")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for user_institution_accounts")
	}

CacheNoHooks:
	if !cached {
		userInstitutionAccountUpsertCacheMut.Lock()
		userInstitutionAccountUpsertCache[key] = cache
		userInstitutionAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserInstitutionAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserInstitutionAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no UserInstitutionAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userInstitutionAccountPrimaryKeyMapping)
	sql := "DELETE FROM `user_institution_accounts` WHERE `account_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from user_institution_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for user_institution_accounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userInstitutionAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no userInstitutionAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from user_institution_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for user_institution_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserInstitutionAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userInstitutionAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userInstitutionAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_institution_accounts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userInstitutionAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from userInstitutionAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for user_institution_accounts")
	}

	if len(userInstitutionAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserInstitutionAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserInstitutionAccount(ctx, exec, o.AccountID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserInstitutionAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserInstitutionAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userInstitutionAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_institution_accounts`.* FROM `user_institution_accounts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userInstitutionAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in UserInstitutionAccountSlice")
	}

	*o = slice

	return nil
}

// UserInstitutionAccountExists checks if the UserInstitutionAccount row exists.
func UserInstitutionAccountExists(ctx context.Context, exec boil.ContextExecutor, accountID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_institution_accounts` where `account_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, accountID)
	}
	row := exec.QueryRowContext(ctx, sql, accountID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if user_institution_accounts exists")
	}

	return exists, nil
}
