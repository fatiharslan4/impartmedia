// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BankType is an object representing the database table.
type BankType struct {
	BankTypeID uint64 `boil:"bank_type_id" json:"bank_type_id" toml:"bank_type_id" yaml:"bank_type_id"`
	BankType   string `boil:"bank_type" json:"bank_type" toml:"bank_type" yaml:"bank_type"`

	R *bankTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bankTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BankTypeColumns = struct {
	BankTypeID string
	BankType   string
}{
	BankTypeID: "bank_type_id",
	BankType:   "bank_type",
}

var BankTypeTableColumns = struct {
	BankTypeID string
	BankType   string
}{
	BankTypeID: "bank_types.bank_type_id",
	BankType:   "bank_types.bank_type",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var BankTypeWhere = struct {
	BankTypeID whereHelperuint64
	BankType   whereHelperstring
}{
	BankTypeID: whereHelperuint64{field: "`bank_types`.`bank_type_id`"},
	BankType:   whereHelperstring{field: "`bank_types`.`bank_type`"},
}

// BankTypeRels is where relationship names are stored.
var BankTypeRels = struct {
	UserInstitutions string
}{
	UserInstitutions: "UserInstitutions",
}

// bankTypeR is where relationships are stored.
type bankTypeR struct {
	UserInstitutions UserInstitutionSlice `boil:"UserInstitutions" json:"UserInstitutions" toml:"UserInstitutions" yaml:"UserInstitutions"`
}

// NewStruct creates a new relationship struct
func (*bankTypeR) NewStruct() *bankTypeR {
	return &bankTypeR{}
}

// bankTypeL is where Load methods for each relationship are stored.
type bankTypeL struct{}

var (
	bankTypeAllColumns            = []string{"bank_type_id", "bank_type"}
	bankTypeColumnsWithoutDefault = []string{"bank_type"}
	bankTypeColumnsWithDefault    = []string{"bank_type_id"}
	bankTypePrimaryKeyColumns     = []string{"bank_type_id"}
)

type (
	// BankTypeSlice is an alias for a slice of pointers to BankType.
	// This should almost always be used instead of []BankType.
	BankTypeSlice []*BankType
	// BankTypeHook is the signature for custom BankType hook methods
	BankTypeHook func(context.Context, boil.ContextExecutor, *BankType) error

	bankTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bankTypeType                 = reflect.TypeOf(&BankType{})
	bankTypeMapping              = queries.MakeStructMapping(bankTypeType)
	bankTypePrimaryKeyMapping, _ = queries.BindMapping(bankTypeType, bankTypeMapping, bankTypePrimaryKeyColumns)
	bankTypeInsertCacheMut       sync.RWMutex
	bankTypeInsertCache          = make(map[string]insertCache)
	bankTypeUpdateCacheMut       sync.RWMutex
	bankTypeUpdateCache          = make(map[string]updateCache)
	bankTypeUpsertCacheMut       sync.RWMutex
	bankTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bankTypeBeforeInsertHooks []BankTypeHook
var bankTypeBeforeUpdateHooks []BankTypeHook
var bankTypeBeforeDeleteHooks []BankTypeHook
var bankTypeBeforeUpsertHooks []BankTypeHook

var bankTypeAfterInsertHooks []BankTypeHook
var bankTypeAfterSelectHooks []BankTypeHook
var bankTypeAfterUpdateHooks []BankTypeHook
var bankTypeAfterDeleteHooks []BankTypeHook
var bankTypeAfterUpsertHooks []BankTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BankType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BankType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BankType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BankType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BankType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BankType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BankType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BankType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BankType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBankTypeHook registers your hook function for all future operations.
func AddBankTypeHook(hookPoint boil.HookPoint, bankTypeHook BankTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bankTypeBeforeInsertHooks = append(bankTypeBeforeInsertHooks, bankTypeHook)
	case boil.BeforeUpdateHook:
		bankTypeBeforeUpdateHooks = append(bankTypeBeforeUpdateHooks, bankTypeHook)
	case boil.BeforeDeleteHook:
		bankTypeBeforeDeleteHooks = append(bankTypeBeforeDeleteHooks, bankTypeHook)
	case boil.BeforeUpsertHook:
		bankTypeBeforeUpsertHooks = append(bankTypeBeforeUpsertHooks, bankTypeHook)
	case boil.AfterInsertHook:
		bankTypeAfterInsertHooks = append(bankTypeAfterInsertHooks, bankTypeHook)
	case boil.AfterSelectHook:
		bankTypeAfterSelectHooks = append(bankTypeAfterSelectHooks, bankTypeHook)
	case boil.AfterUpdateHook:
		bankTypeAfterUpdateHooks = append(bankTypeAfterUpdateHooks, bankTypeHook)
	case boil.AfterDeleteHook:
		bankTypeAfterDeleteHooks = append(bankTypeAfterDeleteHooks, bankTypeHook)
	case boil.AfterUpsertHook:
		bankTypeAfterUpsertHooks = append(bankTypeAfterUpsertHooks, bankTypeHook)
	}
}

// One returns a single bankType record from the query.
func (q bankTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BankType, error) {
	o := &BankType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for bank_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BankType records from the query.
func (q bankTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (BankTypeSlice, error) {
	var o []*BankType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to BankType slice")
	}

	if len(bankTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BankType records in the query.
func (q bankTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count bank_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bankTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if bank_types exists")
	}

	return count > 0, nil
}

// UserInstitutions retrieves all the user_institution's UserInstitutions with an executor.
func (o *BankType) UserInstitutions(mods ...qm.QueryMod) userInstitutionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_institutions`.`bank_type`=?", o.BankTypeID),
		qmhelper.WhereIsNull("`user_institutions`.`deleted_at`"),
	)

	query := UserInstitutions(queryMods...)
	queries.SetFrom(query.Query, "`user_institutions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`user_institutions`.*"})
	}

	return query
}

// LoadUserInstitutions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bankTypeL) LoadUserInstitutions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBankType interface{}, mods queries.Applicator) error {
	var slice []*BankType
	var object *BankType

	if singular {
		object = maybeBankType.(*BankType)
	} else {
		slice = *maybeBankType.(*[]*BankType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bankTypeR{}
		}
		args = append(args, object.BankTypeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bankTypeR{}
			}

			for _, a := range args {
				if a == obj.BankTypeID {
					continue Outer
				}
			}

			args = append(args, obj.BankTypeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_institutions`),
		qm.WhereIn(`user_institutions.bank_type in ?`, args...),
		qmhelper.WhereIsNull(`user_institutions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_institutions")
	}

	var resultSlice []*UserInstitution
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_institutions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_institutions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_institutions")
	}

	if len(userInstitutionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserInstitutions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userInstitutionR{}
			}
			foreign.R.UserInstitutionBankType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BankTypeID == foreign.BankType {
				local.R.UserInstitutions = append(local.R.UserInstitutions, foreign)
				if foreign.R == nil {
					foreign.R = &userInstitutionR{}
				}
				foreign.R.UserInstitutionBankType = local
				break
			}
		}
	}

	return nil
}

// AddUserInstitutions adds the given related objects to the existing relationships
// of the bank_type, optionally inserting them as new records.
// Appends related to o.R.UserInstitutions.
// Sets related.R.UserInstitutionBankType appropriately.
func (o *BankType) AddUserInstitutions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserInstitution) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BankType = o.BankTypeID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_institutions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"bank_type"}),
				strmangle.WhereClause("`", "`", 0, userInstitutionPrimaryKeyColumns),
			)
			values := []interface{}{o.BankTypeID, rel.UserInstitutionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BankType = o.BankTypeID
		}
	}

	if o.R == nil {
		o.R = &bankTypeR{
			UserInstitutions: related,
		}
	} else {
		o.R.UserInstitutions = append(o.R.UserInstitutions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userInstitutionR{
				UserInstitutionBankType: o,
			}
		} else {
			rel.R.UserInstitutionBankType = o
		}
	}
	return nil
}

// BankTypes retrieves all the records using an executor.
func BankTypes(mods ...qm.QueryMod) bankTypeQuery {
	mods = append(mods, qm.From("`bank_types`"))
	return bankTypeQuery{NewQuery(mods...)}
}

// FindBankType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBankType(ctx context.Context, exec boil.ContextExecutor, bankTypeID uint64, selectCols ...string) (*BankType, error) {
	bankTypeObj := &BankType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bank_types` where `bank_type_id`=?", sel,
	)

	q := queries.Raw(query, bankTypeID)

	err := q.Bind(ctx, exec, bankTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from bank_types")
	}

	if err = bankTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bankTypeObj, err
	}

	return bankTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BankType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no bank_types provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bankTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bankTypeInsertCacheMut.RLock()
	cache, cached := bankTypeInsertCache[key]
	bankTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bankTypeAllColumns,
			bankTypeColumnsWithDefault,
			bankTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bankTypeType, bankTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bankTypeType, bankTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `bank_types` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `bank_types` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bank_types` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bankTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into bank_types")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.BankTypeID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bankTypeMapping["bank_type_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BankTypeID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for bank_types")
	}

CacheNoHooks:
	if !cached {
		bankTypeInsertCacheMut.Lock()
		bankTypeInsertCache[key] = cache
		bankTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BankType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BankType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bankTypeUpdateCacheMut.RLock()
	cache, cached := bankTypeUpdateCache[key]
	bankTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bankTypeAllColumns,
			bankTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update bank_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bank_types` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bankTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bankTypeType, bankTypeMapping, append(wl, bankTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update bank_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for bank_types")
	}

	if !cached {
		bankTypeUpdateCacheMut.Lock()
		bankTypeUpdateCache[key] = cache
		bankTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bankTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for bank_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for bank_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BankTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `bank_types` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in bankType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all bankType")
	}
	return rowsAff, nil
}

var mySQLBankTypeUniqueColumns = []string{
	"bank_type_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BankType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no bank_types provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bankTypeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBankTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bankTypeUpsertCacheMut.RLock()
	cache, cached := bankTypeUpsertCache[key]
	bankTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bankTypeAllColumns,
			bankTypeColumnsWithDefault,
			bankTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bankTypeAllColumns,
			bankTypePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert bank_types, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`bank_types`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bank_types` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bankTypeType, bankTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bankTypeType, bankTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for bank_types")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.BankTypeID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bankTypeMapping["bank_type_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bankTypeType, bankTypeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for bank_types")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for bank_types")
	}

CacheNoHooks:
	if !cached {
		bankTypeUpsertCacheMut.Lock()
		bankTypeUpsertCache[key] = cache
		bankTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BankType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BankType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no BankType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bankTypePrimaryKeyMapping)
	sql := "DELETE FROM `bank_types` WHERE `bank_type_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from bank_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for bank_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bankTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no bankTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from bank_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for bank_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BankTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bankTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `bank_types` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from bankType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for bank_types")
	}

	if len(bankTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BankType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBankType(ctx, exec, o.BankTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BankTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BankTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `bank_types`.* FROM `bank_types` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in BankTypeSlice")
	}

	*o = slice

	return nil
}

// BankTypeExists checks if the BankType row exists.
func BankTypeExists(ctx context.Context, exec boil.ContextExecutor, bankTypeID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `bank_types` where `bank_type_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, bankTypeID)
	}
	row := exec.QueryRowContext(ctx, sql, bankTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if bank_types exists")
	}

	return exists, nil
}
