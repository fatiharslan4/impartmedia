// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HiveRulesCriterium is an object representing the database table.
type HiveRulesCriterium struct {
	RuleID     uint64 `boil:"rule_id" json:"rule_id" toml:"rule_id" yaml:"rule_id"`
	QuestionID uint   `boil:"question_id" json:"question_id" toml:"question_id" yaml:"question_id"`
	AnswerID   uint   `boil:"answer_id" json:"answer_id" toml:"answer_id" yaml:"answer_id"`

	R *hiveRulesCriteriumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hiveRulesCriteriumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HiveRulesCriteriumColumns = struct {
	RuleID     string
	QuestionID string
	AnswerID   string
}{
	RuleID:     "rule_id",
	QuestionID: "question_id",
	AnswerID:   "answer_id",
}

var HiveRulesCriteriumTableColumns = struct {
	RuleID     string
	QuestionID string
	AnswerID   string
}{
	RuleID:     "hive_rules_criteria.rule_id",
	QuestionID: "hive_rules_criteria.question_id",
	AnswerID:   "hive_rules_criteria.answer_id",
}

// Generated where

var HiveRulesCriteriumWhere = struct {
	RuleID     whereHelperuint64
	QuestionID whereHelperuint
	AnswerID   whereHelperuint
}{
	RuleID:     whereHelperuint64{field: "`hive_rules_criteria`.`rule_id`"},
	QuestionID: whereHelperuint{field: "`hive_rules_criteria`.`question_id`"},
	AnswerID:   whereHelperuint{field: "`hive_rules_criteria`.`answer_id`"},
}

// HiveRulesCriteriumRels is where relationship names are stored.
var HiveRulesCriteriumRels = struct {
	Rule     string
	Question string
	Answer   string
}{
	Rule:     "Rule",
	Question: "Question",
	Answer:   "Answer",
}

// hiveRulesCriteriumR is where relationships are stored.
type hiveRulesCriteriumR struct {
	Rule     *HiveRule `boil:"Rule" json:"Rule" toml:"Rule" yaml:"Rule"`
	Question *Question `boil:"Question" json:"Question" toml:"Question" yaml:"Question"`
	Answer   *Answer   `boil:"Answer" json:"Answer" toml:"Answer" yaml:"Answer"`
}

// NewStruct creates a new relationship struct
func (*hiveRulesCriteriumR) NewStruct() *hiveRulesCriteriumR {
	return &hiveRulesCriteriumR{}
}

// hiveRulesCriteriumL is where Load methods for each relationship are stored.
type hiveRulesCriteriumL struct{}

var (
	hiveRulesCriteriumAllColumns            = []string{"rule_id", "question_id", "answer_id"}
	hiveRulesCriteriumColumnsWithoutDefault = []string{"rule_id", "question_id", "answer_id"}
	hiveRulesCriteriumColumnsWithDefault    = []string{}
	hiveRulesCriteriumPrimaryKeyColumns     = []string{"rule_id", "question_id", "answer_id"}
)

type (
	// HiveRulesCriteriumSlice is an alias for a slice of pointers to HiveRulesCriterium.
	// This should almost always be used instead of []HiveRulesCriterium.
	HiveRulesCriteriumSlice []*HiveRulesCriterium
	// HiveRulesCriteriumHook is the signature for custom HiveRulesCriterium hook methods
	HiveRulesCriteriumHook func(context.Context, boil.ContextExecutor, *HiveRulesCriterium) error

	hiveRulesCriteriumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hiveRulesCriteriumType                 = reflect.TypeOf(&HiveRulesCriterium{})
	hiveRulesCriteriumMapping              = queries.MakeStructMapping(hiveRulesCriteriumType)
	hiveRulesCriteriumPrimaryKeyMapping, _ = queries.BindMapping(hiveRulesCriteriumType, hiveRulesCriteriumMapping, hiveRulesCriteriumPrimaryKeyColumns)
	hiveRulesCriteriumInsertCacheMut       sync.RWMutex
	hiveRulesCriteriumInsertCache          = make(map[string]insertCache)
	hiveRulesCriteriumUpdateCacheMut       sync.RWMutex
	hiveRulesCriteriumUpdateCache          = make(map[string]updateCache)
	hiveRulesCriteriumUpsertCacheMut       sync.RWMutex
	hiveRulesCriteriumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hiveRulesCriteriumBeforeInsertHooks []HiveRulesCriteriumHook
var hiveRulesCriteriumBeforeUpdateHooks []HiveRulesCriteriumHook
var hiveRulesCriteriumBeforeDeleteHooks []HiveRulesCriteriumHook
var hiveRulesCriteriumBeforeUpsertHooks []HiveRulesCriteriumHook

var hiveRulesCriteriumAfterInsertHooks []HiveRulesCriteriumHook
var hiveRulesCriteriumAfterSelectHooks []HiveRulesCriteriumHook
var hiveRulesCriteriumAfterUpdateHooks []HiveRulesCriteriumHook
var hiveRulesCriteriumAfterDeleteHooks []HiveRulesCriteriumHook
var hiveRulesCriteriumAfterUpsertHooks []HiveRulesCriteriumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HiveRulesCriterium) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRulesCriteriumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HiveRulesCriterium) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRulesCriteriumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HiveRulesCriterium) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRulesCriteriumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HiveRulesCriterium) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRulesCriteriumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HiveRulesCriterium) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRulesCriteriumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HiveRulesCriterium) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRulesCriteriumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HiveRulesCriterium) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRulesCriteriumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HiveRulesCriterium) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRulesCriteriumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HiveRulesCriterium) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveRulesCriteriumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHiveRulesCriteriumHook registers your hook function for all future operations.
func AddHiveRulesCriteriumHook(hookPoint boil.HookPoint, hiveRulesCriteriumHook HiveRulesCriteriumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		hiveRulesCriteriumBeforeInsertHooks = append(hiveRulesCriteriumBeforeInsertHooks, hiveRulesCriteriumHook)
	case boil.BeforeUpdateHook:
		hiveRulesCriteriumBeforeUpdateHooks = append(hiveRulesCriteriumBeforeUpdateHooks, hiveRulesCriteriumHook)
	case boil.BeforeDeleteHook:
		hiveRulesCriteriumBeforeDeleteHooks = append(hiveRulesCriteriumBeforeDeleteHooks, hiveRulesCriteriumHook)
	case boil.BeforeUpsertHook:
		hiveRulesCriteriumBeforeUpsertHooks = append(hiveRulesCriteriumBeforeUpsertHooks, hiveRulesCriteriumHook)
	case boil.AfterInsertHook:
		hiveRulesCriteriumAfterInsertHooks = append(hiveRulesCriteriumAfterInsertHooks, hiveRulesCriteriumHook)
	case boil.AfterSelectHook:
		hiveRulesCriteriumAfterSelectHooks = append(hiveRulesCriteriumAfterSelectHooks, hiveRulesCriteriumHook)
	case boil.AfterUpdateHook:
		hiveRulesCriteriumAfterUpdateHooks = append(hiveRulesCriteriumAfterUpdateHooks, hiveRulesCriteriumHook)
	case boil.AfterDeleteHook:
		hiveRulesCriteriumAfterDeleteHooks = append(hiveRulesCriteriumAfterDeleteHooks, hiveRulesCriteriumHook)
	case boil.AfterUpsertHook:
		hiveRulesCriteriumAfterUpsertHooks = append(hiveRulesCriteriumAfterUpsertHooks, hiveRulesCriteriumHook)
	}
}

// One returns a single hiveRulesCriterium record from the query.
func (q hiveRulesCriteriumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HiveRulesCriterium, error) {
	o := &HiveRulesCriterium{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for hive_rules_criteria")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HiveRulesCriterium records from the query.
func (q hiveRulesCriteriumQuery) All(ctx context.Context, exec boil.ContextExecutor) (HiveRulesCriteriumSlice, error) {
	var o []*HiveRulesCriterium

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to HiveRulesCriterium slice")
	}

	if len(hiveRulesCriteriumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HiveRulesCriterium records in the query.
func (q hiveRulesCriteriumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count hive_rules_criteria rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hiveRulesCriteriumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if hive_rules_criteria exists")
	}

	return count > 0, nil
}

// Rule pointed to by the foreign key.
func (o *HiveRulesCriterium) Rule(mods ...qm.QueryMod) hiveRuleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`rule_id` = ?", o.RuleID),
	}

	queryMods = append(queryMods, mods...)

	query := HiveRules(queryMods...)
	queries.SetFrom(query.Query, "`hive_rules`")

	return query
}

// Question pointed to by the foreign key.
func (o *HiveRulesCriterium) Question(mods ...qm.QueryMod) questionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`question_id` = ?", o.QuestionID),
	}

	queryMods = append(queryMods, mods...)

	query := Questions(queryMods...)
	queries.SetFrom(query.Query, "`question`")

	return query
}

// Answer pointed to by the foreign key.
func (o *HiveRulesCriterium) Answer(mods ...qm.QueryMod) answerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`answer_id` = ?", o.AnswerID),
	}

	queryMods = append(queryMods, mods...)

	query := Answers(queryMods...)
	queries.SetFrom(query.Query, "`answer`")

	return query
}

// LoadRule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hiveRulesCriteriumL) LoadRule(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHiveRulesCriterium interface{}, mods queries.Applicator) error {
	var slice []*HiveRulesCriterium
	var object *HiveRulesCriterium

	if singular {
		object = maybeHiveRulesCriterium.(*HiveRulesCriterium)
	} else {
		slice = *maybeHiveRulesCriterium.(*[]*HiveRulesCriterium)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveRulesCriteriumR{}
		}
		args = append(args, object.RuleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveRulesCriteriumR{}
			}

			for _, a := range args {
				if a == obj.RuleID {
					continue Outer
				}
			}

			args = append(args, obj.RuleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hive_rules`),
		qm.WhereIn(`hive_rules.rule_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HiveRule")
	}

	var resultSlice []*HiveRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HiveRule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hive_rules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hive_rules")
	}

	if len(hiveRulesCriteriumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Rule = foreign
		if foreign.R == nil {
			foreign.R = &hiveRuleR{}
		}
		foreign.R.RuleHiveRulesCriteria = append(foreign.R.RuleHiveRulesCriteria, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RuleID == foreign.RuleID {
				local.R.Rule = foreign
				if foreign.R == nil {
					foreign.R = &hiveRuleR{}
				}
				foreign.R.RuleHiveRulesCriteria = append(foreign.R.RuleHiveRulesCriteria, local)
				break
			}
		}
	}

	return nil
}

// LoadQuestion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hiveRulesCriteriumL) LoadQuestion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHiveRulesCriterium interface{}, mods queries.Applicator) error {
	var slice []*HiveRulesCriterium
	var object *HiveRulesCriterium

	if singular {
		object = maybeHiveRulesCriterium.(*HiveRulesCriterium)
	} else {
		slice = *maybeHiveRulesCriterium.(*[]*HiveRulesCriterium)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveRulesCriteriumR{}
		}
		args = append(args, object.QuestionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveRulesCriteriumR{}
			}

			for _, a := range args {
				if a == obj.QuestionID {
					continue Outer
				}
			}

			args = append(args, obj.QuestionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`question`),
		qm.WhereIn(`question.question_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Question")
	}

	var resultSlice []*Question
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Question")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for question")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for question")
	}

	if len(hiveRulesCriteriumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Question = foreign
		if foreign.R == nil {
			foreign.R = &questionR{}
		}
		foreign.R.HiveRulesCriteria = append(foreign.R.HiveRulesCriteria, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QuestionID == foreign.QuestionID {
				local.R.Question = foreign
				if foreign.R == nil {
					foreign.R = &questionR{}
				}
				foreign.R.HiveRulesCriteria = append(foreign.R.HiveRulesCriteria, local)
				break
			}
		}
	}

	return nil
}

// LoadAnswer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hiveRulesCriteriumL) LoadAnswer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHiveRulesCriterium interface{}, mods queries.Applicator) error {
	var slice []*HiveRulesCriterium
	var object *HiveRulesCriterium

	if singular {
		object = maybeHiveRulesCriterium.(*HiveRulesCriterium)
	} else {
		slice = *maybeHiveRulesCriterium.(*[]*HiveRulesCriterium)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveRulesCriteriumR{}
		}
		args = append(args, object.AnswerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveRulesCriteriumR{}
			}

			for _, a := range args {
				if a == obj.AnswerID {
					continue Outer
				}
			}

			args = append(args, obj.AnswerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`answer`),
		qm.WhereIn(`answer.answer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Answer")
	}

	var resultSlice []*Answer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Answer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for answer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for answer")
	}

	if len(hiveRulesCriteriumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Answer = foreign
		if foreign.R == nil {
			foreign.R = &answerR{}
		}
		foreign.R.HiveRulesCriteria = append(foreign.R.HiveRulesCriteria, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AnswerID == foreign.AnswerID {
				local.R.Answer = foreign
				if foreign.R == nil {
					foreign.R = &answerR{}
				}
				foreign.R.HiveRulesCriteria = append(foreign.R.HiveRulesCriteria, local)
				break
			}
		}
	}

	return nil
}

// SetRule of the hiveRulesCriterium to the related item.
// Sets o.R.Rule to related.
// Adds o to related.R.RuleHiveRulesCriteria.
func (o *HiveRulesCriterium) SetRule(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HiveRule) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `hive_rules_criteria` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"rule_id"}),
		strmangle.WhereClause("`", "`", 0, hiveRulesCriteriumPrimaryKeyColumns),
	)
	values := []interface{}{related.RuleID, o.RuleID, o.QuestionID, o.AnswerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RuleID = related.RuleID
	if o.R == nil {
		o.R = &hiveRulesCriteriumR{
			Rule: related,
		}
	} else {
		o.R.Rule = related
	}

	if related.R == nil {
		related.R = &hiveRuleR{
			RuleHiveRulesCriteria: HiveRulesCriteriumSlice{o},
		}
	} else {
		related.R.RuleHiveRulesCriteria = append(related.R.RuleHiveRulesCriteria, o)
	}

	return nil
}

// SetQuestion of the hiveRulesCriterium to the related item.
// Sets o.R.Question to related.
// Adds o to related.R.HiveRulesCriteria.
func (o *HiveRulesCriterium) SetQuestion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Question) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `hive_rules_criteria` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"question_id"}),
		strmangle.WhereClause("`", "`", 0, hiveRulesCriteriumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuestionID, o.RuleID, o.QuestionID, o.AnswerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QuestionID = related.QuestionID
	if o.R == nil {
		o.R = &hiveRulesCriteriumR{
			Question: related,
		}
	} else {
		o.R.Question = related
	}

	if related.R == nil {
		related.R = &questionR{
			HiveRulesCriteria: HiveRulesCriteriumSlice{o},
		}
	} else {
		related.R.HiveRulesCriteria = append(related.R.HiveRulesCriteria, o)
	}

	return nil
}

// SetAnswer of the hiveRulesCriterium to the related item.
// Sets o.R.Answer to related.
// Adds o to related.R.HiveRulesCriteria.
func (o *HiveRulesCriterium) SetAnswer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Answer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `hive_rules_criteria` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"answer_id"}),
		strmangle.WhereClause("`", "`", 0, hiveRulesCriteriumPrimaryKeyColumns),
	)
	values := []interface{}{related.AnswerID, o.RuleID, o.QuestionID, o.AnswerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AnswerID = related.AnswerID
	if o.R == nil {
		o.R = &hiveRulesCriteriumR{
			Answer: related,
		}
	} else {
		o.R.Answer = related
	}

	if related.R == nil {
		related.R = &answerR{
			HiveRulesCriteria: HiveRulesCriteriumSlice{o},
		}
	} else {
		related.R.HiveRulesCriteria = append(related.R.HiveRulesCriteria, o)
	}

	return nil
}

// HiveRulesCriteria retrieves all the records using an executor.
func HiveRulesCriteria(mods ...qm.QueryMod) hiveRulesCriteriumQuery {
	mods = append(mods, qm.From("`hive_rules_criteria`"))
	return hiveRulesCriteriumQuery{NewQuery(mods...)}
}

// FindHiveRulesCriterium retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHiveRulesCriterium(ctx context.Context, exec boil.ContextExecutor, ruleID uint64, questionID uint, answerID uint, selectCols ...string) (*HiveRulesCriterium, error) {
	hiveRulesCriteriumObj := &HiveRulesCriterium{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `hive_rules_criteria` where `rule_id`=? AND `question_id`=? AND `answer_id`=?", sel,
	)

	q := queries.Raw(query, ruleID, questionID, answerID)

	err := q.Bind(ctx, exec, hiveRulesCriteriumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from hive_rules_criteria")
	}

	if err = hiveRulesCriteriumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hiveRulesCriteriumObj, err
	}

	return hiveRulesCriteriumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HiveRulesCriterium) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no hive_rules_criteria provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hiveRulesCriteriumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hiveRulesCriteriumInsertCacheMut.RLock()
	cache, cached := hiveRulesCriteriumInsertCache[key]
	hiveRulesCriteriumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hiveRulesCriteriumAllColumns,
			hiveRulesCriteriumColumnsWithDefault,
			hiveRulesCriteriumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hiveRulesCriteriumType, hiveRulesCriteriumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hiveRulesCriteriumType, hiveRulesCriteriumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `hive_rules_criteria` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `hive_rules_criteria` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `hive_rules_criteria` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, hiveRulesCriteriumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into hive_rules_criteria")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RuleID,
		o.QuestionID,
		o.AnswerID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for hive_rules_criteria")
	}

CacheNoHooks:
	if !cached {
		hiveRulesCriteriumInsertCacheMut.Lock()
		hiveRulesCriteriumInsertCache[key] = cache
		hiveRulesCriteriumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HiveRulesCriterium.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HiveRulesCriterium) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hiveRulesCriteriumUpdateCacheMut.RLock()
	cache, cached := hiveRulesCriteriumUpdateCache[key]
	hiveRulesCriteriumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hiveRulesCriteriumAllColumns,
			hiveRulesCriteriumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update hive_rules_criteria, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `hive_rules_criteria` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, hiveRulesCriteriumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hiveRulesCriteriumType, hiveRulesCriteriumMapping, append(wl, hiveRulesCriteriumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update hive_rules_criteria row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for hive_rules_criteria")
	}

	if !cached {
		hiveRulesCriteriumUpdateCacheMut.Lock()
		hiveRulesCriteriumUpdateCache[key] = cache
		hiveRulesCriteriumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hiveRulesCriteriumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for hive_rules_criteria")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for hive_rules_criteria")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HiveRulesCriteriumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hiveRulesCriteriumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `hive_rules_criteria` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hiveRulesCriteriumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in hiveRulesCriterium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all hiveRulesCriterium")
	}
	return rowsAff, nil
}

var mySQLHiveRulesCriteriumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HiveRulesCriterium) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no hive_rules_criteria provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hiveRulesCriteriumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLHiveRulesCriteriumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hiveRulesCriteriumUpsertCacheMut.RLock()
	cache, cached := hiveRulesCriteriumUpsertCache[key]
	hiveRulesCriteriumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			hiveRulesCriteriumAllColumns,
			hiveRulesCriteriumColumnsWithDefault,
			hiveRulesCriteriumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			hiveRulesCriteriumAllColumns,
			hiveRulesCriteriumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert hive_rules_criteria, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`hive_rules_criteria`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `hive_rules_criteria` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(hiveRulesCriteriumType, hiveRulesCriteriumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hiveRulesCriteriumType, hiveRulesCriteriumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for hive_rules_criteria")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(hiveRulesCriteriumType, hiveRulesCriteriumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for hive_rules_criteria")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for hive_rules_criteria")
	}

CacheNoHooks:
	if !cached {
		hiveRulesCriteriumUpsertCacheMut.Lock()
		hiveRulesCriteriumUpsertCache[key] = cache
		hiveRulesCriteriumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HiveRulesCriterium record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HiveRulesCriterium) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no HiveRulesCriterium provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hiveRulesCriteriumPrimaryKeyMapping)
	sql := "DELETE FROM `hive_rules_criteria` WHERE `rule_id`=? AND `question_id`=? AND `answer_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from hive_rules_criteria")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for hive_rules_criteria")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hiveRulesCriteriumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no hiveRulesCriteriumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from hive_rules_criteria")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for hive_rules_criteria")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HiveRulesCriteriumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hiveRulesCriteriumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hiveRulesCriteriumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `hive_rules_criteria` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hiveRulesCriteriumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from hiveRulesCriterium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for hive_rules_criteria")
	}

	if len(hiveRulesCriteriumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HiveRulesCriterium) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHiveRulesCriterium(ctx, exec, o.RuleID, o.QuestionID, o.AnswerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HiveRulesCriteriumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HiveRulesCriteriumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hiveRulesCriteriumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `hive_rules_criteria`.* FROM `hive_rules_criteria` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hiveRulesCriteriumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in HiveRulesCriteriumSlice")
	}

	*o = slice

	return nil
}

// HiveRulesCriteriumExists checks if the HiveRulesCriterium row exists.
func HiveRulesCriteriumExists(ctx context.Context, exec boil.ContextExecutor, ruleID uint64, questionID uint, answerID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `hive_rules_criteria` where `rule_id`=? AND `question_id`=? AND `answer_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ruleID, questionID, answerID)
	}
	row := exec.QueryRowContext(ctx, sql, ruleID, questionID, answerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if hive_rules_criteria exists")
	}

	return exists, nil
}
