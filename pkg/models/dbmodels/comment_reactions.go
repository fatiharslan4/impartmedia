// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CommentReaction is an object representing the database table.
type CommentReaction struct {
	CommentID      uint64      `boil:"comment_id" json:"comment_id" toml:"comment_id" yaml:"comment_id"`
	PostID         uint64      `boil:"post_id" json:"post_id" toml:"post_id" yaml:"post_id"`
	ImpartWealthID string      `boil:"impart_wealth_id" json:"impart_wealth_id" toml:"impart_wealth_id" yaml:"impart_wealth_id"`
	Upvoted        bool        `boil:"upvoted" json:"upvoted" toml:"upvoted" yaml:"upvoted"`
	Downvoted      bool        `boil:"downvoted" json:"downvoted" toml:"downvoted" yaml:"downvoted"`
	Reported       bool        `boil:"reported" json:"reported" toml:"reported" yaml:"reported"`
	ReportedReason null.String `boil:"reported_reason" json:"reported_reason,omitempty" toml:"reported_reason" yaml:"reported_reason,omitempty"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *commentReactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commentReactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommentReactionColumns = struct {
	CommentID      string
	PostID         string
	ImpartWealthID string
	Upvoted        string
	Downvoted      string
	Reported       string
	ReportedReason string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	CommentID:      "comment_id",
	PostID:         "post_id",
	ImpartWealthID: "impart_wealth_id",
	Upvoted:        "upvoted",
	Downvoted:      "downvoted",
	Reported:       "reported",
	ReportedReason: "reported_reason",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var CommentReactionTableColumns = struct {
	CommentID      string
	PostID         string
	ImpartWealthID string
	Upvoted        string
	Downvoted      string
	Reported       string
	ReportedReason string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	CommentID:      "comment_reactions.comment_id",
	PostID:         "comment_reactions.post_id",
	ImpartWealthID: "comment_reactions.impart_wealth_id",
	Upvoted:        "comment_reactions.upvoted",
	Downvoted:      "comment_reactions.downvoted",
	Reported:       "comment_reactions.reported",
	ReportedReason: "comment_reactions.reported_reason",
	CreatedAt:      "comment_reactions.created_at",
	UpdatedAt:      "comment_reactions.updated_at",
	DeletedAt:      "comment_reactions.deleted_at",
}

// Generated where

var CommentReactionWhere = struct {
	CommentID      whereHelperuint64
	PostID         whereHelperuint64
	ImpartWealthID whereHelperstring
	Upvoted        whereHelperbool
	Downvoted      whereHelperbool
	Reported       whereHelperbool
	ReportedReason whereHelpernull_String
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	CommentID:      whereHelperuint64{field: "`comment_reactions`.`comment_id`"},
	PostID:         whereHelperuint64{field: "`comment_reactions`.`post_id`"},
	ImpartWealthID: whereHelperstring{field: "`comment_reactions`.`impart_wealth_id`"},
	Upvoted:        whereHelperbool{field: "`comment_reactions`.`upvoted`"},
	Downvoted:      whereHelperbool{field: "`comment_reactions`.`downvoted`"},
	Reported:       whereHelperbool{field: "`comment_reactions`.`reported`"},
	ReportedReason: whereHelpernull_String{field: "`comment_reactions`.`reported_reason`"},
	CreatedAt:      whereHelpertime_Time{field: "`comment_reactions`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`comment_reactions`.`updated_at`"},
	DeletedAt:      whereHelpernull_Time{field: "`comment_reactions`.`deleted_at`"},
}

// CommentReactionRels is where relationship names are stored.
var CommentReactionRels = struct {
	ImpartWealth string
	Comment      string
}{
	ImpartWealth: "ImpartWealth",
	Comment:      "Comment",
}

// commentReactionR is where relationships are stored.
type commentReactionR struct {
	ImpartWealth *User    `boil:"ImpartWealth" json:"ImpartWealth" toml:"ImpartWealth" yaml:"ImpartWealth"`
	Comment      *Comment `boil:"Comment" json:"Comment" toml:"Comment" yaml:"Comment"`
}

// NewStruct creates a new relationship struct
func (*commentReactionR) NewStruct() *commentReactionR {
	return &commentReactionR{}
}

// commentReactionL is where Load methods for each relationship are stored.
type commentReactionL struct{}

var (
	commentReactionAllColumns            = []string{"comment_id", "post_id", "impart_wealth_id", "upvoted", "downvoted", "reported", "reported_reason", "created_at", "updated_at", "deleted_at"}
	commentReactionColumnsWithoutDefault = []string{"comment_id", "post_id", "impart_wealth_id", "reported_reason", "created_at", "updated_at", "deleted_at"}
	commentReactionColumnsWithDefault    = []string{"upvoted", "downvoted", "reported"}
	commentReactionPrimaryKeyColumns     = []string{"comment_id", "impart_wealth_id"}
)

type (
	// CommentReactionSlice is an alias for a slice of pointers to CommentReaction.
	// This should almost always be used instead of []CommentReaction.
	CommentReactionSlice []*CommentReaction
	// CommentReactionHook is the signature for custom CommentReaction hook methods
	CommentReactionHook func(context.Context, boil.ContextExecutor, *CommentReaction) error

	commentReactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commentReactionType                 = reflect.TypeOf(&CommentReaction{})
	commentReactionMapping              = queries.MakeStructMapping(commentReactionType)
	commentReactionPrimaryKeyMapping, _ = queries.BindMapping(commentReactionType, commentReactionMapping, commentReactionPrimaryKeyColumns)
	commentReactionInsertCacheMut       sync.RWMutex
	commentReactionInsertCache          = make(map[string]insertCache)
	commentReactionUpdateCacheMut       sync.RWMutex
	commentReactionUpdateCache          = make(map[string]updateCache)
	commentReactionUpsertCacheMut       sync.RWMutex
	commentReactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var commentReactionBeforeInsertHooks []CommentReactionHook
var commentReactionBeforeUpdateHooks []CommentReactionHook
var commentReactionBeforeDeleteHooks []CommentReactionHook
var commentReactionBeforeUpsertHooks []CommentReactionHook

var commentReactionAfterInsertHooks []CommentReactionHook
var commentReactionAfterSelectHooks []CommentReactionHook
var commentReactionAfterUpdateHooks []CommentReactionHook
var commentReactionAfterDeleteHooks []CommentReactionHook
var commentReactionAfterUpsertHooks []CommentReactionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CommentReaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentReactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CommentReaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentReactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CommentReaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentReactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CommentReaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentReactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CommentReaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentReactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CommentReaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentReactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CommentReaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentReactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CommentReaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentReactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CommentReaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentReactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCommentReactionHook registers your hook function for all future operations.
func AddCommentReactionHook(hookPoint boil.HookPoint, commentReactionHook CommentReactionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		commentReactionBeforeInsertHooks = append(commentReactionBeforeInsertHooks, commentReactionHook)
	case boil.BeforeUpdateHook:
		commentReactionBeforeUpdateHooks = append(commentReactionBeforeUpdateHooks, commentReactionHook)
	case boil.BeforeDeleteHook:
		commentReactionBeforeDeleteHooks = append(commentReactionBeforeDeleteHooks, commentReactionHook)
	case boil.BeforeUpsertHook:
		commentReactionBeforeUpsertHooks = append(commentReactionBeforeUpsertHooks, commentReactionHook)
	case boil.AfterInsertHook:
		commentReactionAfterInsertHooks = append(commentReactionAfterInsertHooks, commentReactionHook)
	case boil.AfterSelectHook:
		commentReactionAfterSelectHooks = append(commentReactionAfterSelectHooks, commentReactionHook)
	case boil.AfterUpdateHook:
		commentReactionAfterUpdateHooks = append(commentReactionAfterUpdateHooks, commentReactionHook)
	case boil.AfterDeleteHook:
		commentReactionAfterDeleteHooks = append(commentReactionAfterDeleteHooks, commentReactionHook)
	case boil.AfterUpsertHook:
		commentReactionAfterUpsertHooks = append(commentReactionAfterUpsertHooks, commentReactionHook)
	}
}

// One returns a single commentReaction record from the query.
func (q commentReactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CommentReaction, error) {
	o := &CommentReaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for comment_reactions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CommentReaction records from the query.
func (q commentReactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommentReactionSlice, error) {
	var o []*CommentReaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to CommentReaction slice")
	}

	if len(commentReactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CommentReaction records in the query.
func (q commentReactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count comment_reactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q commentReactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if comment_reactions exists")
	}

	return count > 0, nil
}

// ImpartWealth pointed to by the foreign key.
func (o *CommentReaction) ImpartWealth(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`impart_wealth_id` = ?", o.ImpartWealthID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// Comment pointed to by the foreign key.
func (o *CommentReaction) Comment(mods ...qm.QueryMod) commentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`comment_id` = ?", o.CommentID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Comments(queryMods...)
	queries.SetFrom(query.Query, "`comment`")

	return query
}

// LoadImpartWealth allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commentReactionL) LoadImpartWealth(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommentReaction interface{}, mods queries.Applicator) error {
	var slice []*CommentReaction
	var object *CommentReaction

	if singular {
		object = maybeCommentReaction.(*CommentReaction)
	} else {
		slice = *maybeCommentReaction.(*[]*CommentReaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commentReactionR{}
		}
		args = append(args, object.ImpartWealthID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commentReactionR{}
			}

			for _, a := range args {
				if a == obj.ImpartWealthID {
					continue Outer
				}
			}

			args = append(args, obj.ImpartWealthID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.impart_wealth_id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(commentReactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ImpartWealth = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ImpartWealthCommentReactions = append(foreign.R.ImpartWealthCommentReactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImpartWealthID == foreign.ImpartWealthID {
				local.R.ImpartWealth = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ImpartWealthCommentReactions = append(foreign.R.ImpartWealthCommentReactions, local)
				break
			}
		}
	}

	return nil
}

// LoadComment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commentReactionL) LoadComment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommentReaction interface{}, mods queries.Applicator) error {
	var slice []*CommentReaction
	var object *CommentReaction

	if singular {
		object = maybeCommentReaction.(*CommentReaction)
	} else {
		slice = *maybeCommentReaction.(*[]*CommentReaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commentReactionR{}
		}
		args = append(args, object.CommentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commentReactionR{}
			}

			for _, a := range args {
				if a == obj.CommentID {
					continue Outer
				}
			}

			args = append(args, obj.CommentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`comment`),
		qm.WhereIn(`comment.comment_id in ?`, args...),
		qmhelper.WhereIsNull(`comment.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Comment")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Comment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for comment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comment")
	}

	if len(commentReactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Comment = foreign
		if foreign.R == nil {
			foreign.R = &commentR{}
		}
		foreign.R.CommentReactions = append(foreign.R.CommentReactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommentID == foreign.CommentID {
				local.R.Comment = foreign
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.CommentReactions = append(foreign.R.CommentReactions, local)
				break
			}
		}
	}

	return nil
}

// SetImpartWealth of the commentReaction to the related item.
// Sets o.R.ImpartWealth to related.
// Adds o to related.R.ImpartWealthCommentReactions.
func (o *CommentReaction) SetImpartWealth(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `comment_reactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"impart_wealth_id"}),
		strmangle.WhereClause("`", "`", 0, commentReactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ImpartWealthID, o.CommentID, o.ImpartWealthID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImpartWealthID = related.ImpartWealthID
	if o.R == nil {
		o.R = &commentReactionR{
			ImpartWealth: related,
		}
	} else {
		o.R.ImpartWealth = related
	}

	if related.R == nil {
		related.R = &userR{
			ImpartWealthCommentReactions: CommentReactionSlice{o},
		}
	} else {
		related.R.ImpartWealthCommentReactions = append(related.R.ImpartWealthCommentReactions, o)
	}

	return nil
}

// SetComment of the commentReaction to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentReactions.
func (o *CommentReaction) SetComment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Comment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `comment_reactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"comment_id"}),
		strmangle.WhereClause("`", "`", 0, commentReactionPrimaryKeyColumns),
	)
	values := []interface{}{related.CommentID, o.CommentID, o.ImpartWealthID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommentID = related.CommentID
	if o.R == nil {
		o.R = &commentReactionR{
			Comment: related,
		}
	} else {
		o.R.Comment = related
	}

	if related.R == nil {
		related.R = &commentR{
			CommentReactions: CommentReactionSlice{o},
		}
	} else {
		related.R.CommentReactions = append(related.R.CommentReactions, o)
	}

	return nil
}

// CommentReactions retrieves all the records using an executor.
func CommentReactions(mods ...qm.QueryMod) commentReactionQuery {
	mods = append(mods, qm.From("`comment_reactions`"), qmhelper.WhereIsNull("`comment_reactions`.`deleted_at`"))
	return commentReactionQuery{NewQuery(mods...)}
}

// FindCommentReaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommentReaction(ctx context.Context, exec boil.ContextExecutor, commentID uint64, impartWealthID string, selectCols ...string) (*CommentReaction, error) {
	commentReactionObj := &CommentReaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `comment_reactions` where `comment_id`=? AND `impart_wealth_id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, commentID, impartWealthID)

	err := q.Bind(ctx, exec, commentReactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from comment_reactions")
	}

	if err = commentReactionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return commentReactionObj, err
	}

	return commentReactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommentReaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no comment_reactions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentReactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commentReactionInsertCacheMut.RLock()
	cache, cached := commentReactionInsertCache[key]
	commentReactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commentReactionAllColumns,
			commentReactionColumnsWithDefault,
			commentReactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commentReactionType, commentReactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commentReactionType, commentReactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `comment_reactions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `comment_reactions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `comment_reactions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, commentReactionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into comment_reactions")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CommentID,
		o.ImpartWealthID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for comment_reactions")
	}

CacheNoHooks:
	if !cached {
		commentReactionInsertCacheMut.Lock()
		commentReactionInsertCache[key] = cache
		commentReactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CommentReaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommentReaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	commentReactionUpdateCacheMut.RLock()
	cache, cached := commentReactionUpdateCache[key]
	commentReactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commentReactionAllColumns,
			commentReactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update comment_reactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `comment_reactions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, commentReactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commentReactionType, commentReactionMapping, append(wl, commentReactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update comment_reactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for comment_reactions")
	}

	if !cached {
		commentReactionUpdateCacheMut.Lock()
		commentReactionUpdateCache[key] = cache
		commentReactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q commentReactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for comment_reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for comment_reactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommentReactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentReactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `comment_reactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentReactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in commentReaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all commentReaction")
	}
	return rowsAff, nil
}

var mySQLCommentReactionUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommentReaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no comment_reactions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentReactionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCommentReactionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commentReactionUpsertCacheMut.RLock()
	cache, cached := commentReactionUpsertCache[key]
	commentReactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			commentReactionAllColumns,
			commentReactionColumnsWithDefault,
			commentReactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			commentReactionAllColumns,
			commentReactionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert comment_reactions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`comment_reactions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `comment_reactions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(commentReactionType, commentReactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commentReactionType, commentReactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for comment_reactions")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(commentReactionType, commentReactionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for comment_reactions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for comment_reactions")
	}

CacheNoHooks:
	if !cached {
		commentReactionUpsertCacheMut.Lock()
		commentReactionUpsertCache[key] = cache
		commentReactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CommentReaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommentReaction) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no CommentReaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commentReactionPrimaryKeyMapping)
		sql = "DELETE FROM `comment_reactions` WHERE `comment_id`=? AND `impart_wealth_id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `comment_reactions` SET %s WHERE `comment_id`=? AND `impart_wealth_id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(commentReactionType, commentReactionMapping, append(wl, commentReactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from comment_reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for comment_reactions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q commentReactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no commentReactionQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from comment_reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for comment_reactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommentReactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(commentReactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentReactionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `comment_reactions` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentReactionPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentReactionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `comment_reactions` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentReactionPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from commentReaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for comment_reactions")
	}

	if len(commentReactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommentReaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommentReaction(ctx, exec, o.CommentID, o.ImpartWealthID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentReactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommentReactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentReactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `comment_reactions`.* FROM `comment_reactions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentReactionPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in CommentReactionSlice")
	}

	*o = slice

	return nil
}

// CommentReactionExists checks if the CommentReaction row exists.
func CommentReactionExists(ctx context.Context, exec boil.ContextExecutor, commentID uint64, impartWealthID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `comment_reactions` where `comment_id`=? AND `impart_wealth_id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, commentID, impartWealthID)
	}
	row := exec.QueryRowContext(ctx, sql, commentID, impartWealthID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if comment_reactions exists")
	}

	return exists, nil
}
