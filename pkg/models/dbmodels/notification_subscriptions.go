// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NotificationSubscription is an object representing the database table.
type NotificationSubscription struct {
	NSID                uint64 `boil:"ns_id" json:"ns_id" toml:"ns_id" yaml:"ns_id"`
	ImpartWealthID      string `boil:"impart_wealth_id" json:"impart_wealth_id" toml:"impart_wealth_id" yaml:"impart_wealth_id"`
	TopicArn            string `boil:"topic_arn" json:"topic_arn" toml:"topic_arn" yaml:"topic_arn"`
	SubscriptionArn     string `boil:"subscription_arn" json:"subscription_arn" toml:"subscription_arn" yaml:"subscription_arn"`
	PlatformEndpointArn string `boil:"platform_endpoint_arn" json:"platform_endpoint_arn" toml:"platform_endpoint_arn" yaml:"platform_endpoint_arn"`

	R *notificationSubscriptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L notificationSubscriptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotificationSubscriptionColumns = struct {
	NSID                string
	ImpartWealthID      string
	TopicArn            string
	SubscriptionArn     string
	PlatformEndpointArn string
}{
	NSID:                "ns_id",
	ImpartWealthID:      "impart_wealth_id",
	TopicArn:            "topic_arn",
	SubscriptionArn:     "subscription_arn",
	PlatformEndpointArn: "platform_endpoint_arn",
}

var NotificationSubscriptionTableColumns = struct {
	NSID                string
	ImpartWealthID      string
	TopicArn            string
	SubscriptionArn     string
	PlatformEndpointArn string
}{
	NSID:                "notification_subscriptions.ns_id",
	ImpartWealthID:      "notification_subscriptions.impart_wealth_id",
	TopicArn:            "notification_subscriptions.topic_arn",
	SubscriptionArn:     "notification_subscriptions.subscription_arn",
	PlatformEndpointArn: "notification_subscriptions.platform_endpoint_arn",
}

// Generated where

var NotificationSubscriptionWhere = struct {
	NSID                whereHelperuint64
	ImpartWealthID      whereHelperstring
	TopicArn            whereHelperstring
	SubscriptionArn     whereHelperstring
	PlatformEndpointArn whereHelperstring
}{
	NSID:                whereHelperuint64{field: "`notification_subscriptions`.`ns_id`"},
	ImpartWealthID:      whereHelperstring{field: "`notification_subscriptions`.`impart_wealth_id`"},
	TopicArn:            whereHelperstring{field: "`notification_subscriptions`.`topic_arn`"},
	SubscriptionArn:     whereHelperstring{field: "`notification_subscriptions`.`subscription_arn`"},
	PlatformEndpointArn: whereHelperstring{field: "`notification_subscriptions`.`platform_endpoint_arn`"},
}

// NotificationSubscriptionRels is where relationship names are stored.
var NotificationSubscriptionRels = struct {
}{}

// notificationSubscriptionR is where relationships are stored.
type notificationSubscriptionR struct {
}

// NewStruct creates a new relationship struct
func (*notificationSubscriptionR) NewStruct() *notificationSubscriptionR {
	return &notificationSubscriptionR{}
}

// notificationSubscriptionL is where Load methods for each relationship are stored.
type notificationSubscriptionL struct{}

var (
	notificationSubscriptionAllColumns            = []string{"ns_id", "impart_wealth_id", "topic_arn", "subscription_arn", "platform_endpoint_arn"}
	notificationSubscriptionColumnsWithoutDefault = []string{"impart_wealth_id", "topic_arn", "subscription_arn", "platform_endpoint_arn"}
	notificationSubscriptionColumnsWithDefault    = []string{"ns_id"}
	notificationSubscriptionPrimaryKeyColumns     = []string{"ns_id"}
)

type (
	// NotificationSubscriptionSlice is an alias for a slice of pointers to NotificationSubscription.
	// This should almost always be used instead of []NotificationSubscription.
	NotificationSubscriptionSlice []*NotificationSubscription
	// NotificationSubscriptionHook is the signature for custom NotificationSubscription hook methods
	NotificationSubscriptionHook func(context.Context, boil.ContextExecutor, *NotificationSubscription) error

	notificationSubscriptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationSubscriptionType                 = reflect.TypeOf(&NotificationSubscription{})
	notificationSubscriptionMapping              = queries.MakeStructMapping(notificationSubscriptionType)
	notificationSubscriptionPrimaryKeyMapping, _ = queries.BindMapping(notificationSubscriptionType, notificationSubscriptionMapping, notificationSubscriptionPrimaryKeyColumns)
	notificationSubscriptionInsertCacheMut       sync.RWMutex
	notificationSubscriptionInsertCache          = make(map[string]insertCache)
	notificationSubscriptionUpdateCacheMut       sync.RWMutex
	notificationSubscriptionUpdateCache          = make(map[string]updateCache)
	notificationSubscriptionUpsertCacheMut       sync.RWMutex
	notificationSubscriptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var notificationSubscriptionBeforeInsertHooks []NotificationSubscriptionHook
var notificationSubscriptionBeforeUpdateHooks []NotificationSubscriptionHook
var notificationSubscriptionBeforeDeleteHooks []NotificationSubscriptionHook
var notificationSubscriptionBeforeUpsertHooks []NotificationSubscriptionHook

var notificationSubscriptionAfterInsertHooks []NotificationSubscriptionHook
var notificationSubscriptionAfterSelectHooks []NotificationSubscriptionHook
var notificationSubscriptionAfterUpdateHooks []NotificationSubscriptionHook
var notificationSubscriptionAfterDeleteHooks []NotificationSubscriptionHook
var notificationSubscriptionAfterUpsertHooks []NotificationSubscriptionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NotificationSubscription) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationSubscriptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NotificationSubscription) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationSubscriptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NotificationSubscription) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationSubscriptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NotificationSubscription) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationSubscriptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NotificationSubscription) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationSubscriptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NotificationSubscription) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationSubscriptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NotificationSubscription) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationSubscriptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NotificationSubscription) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationSubscriptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NotificationSubscription) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationSubscriptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationSubscriptionHook registers your hook function for all future operations.
func AddNotificationSubscriptionHook(hookPoint boil.HookPoint, notificationSubscriptionHook NotificationSubscriptionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		notificationSubscriptionBeforeInsertHooks = append(notificationSubscriptionBeforeInsertHooks, notificationSubscriptionHook)
	case boil.BeforeUpdateHook:
		notificationSubscriptionBeforeUpdateHooks = append(notificationSubscriptionBeforeUpdateHooks, notificationSubscriptionHook)
	case boil.BeforeDeleteHook:
		notificationSubscriptionBeforeDeleteHooks = append(notificationSubscriptionBeforeDeleteHooks, notificationSubscriptionHook)
	case boil.BeforeUpsertHook:
		notificationSubscriptionBeforeUpsertHooks = append(notificationSubscriptionBeforeUpsertHooks, notificationSubscriptionHook)
	case boil.AfterInsertHook:
		notificationSubscriptionAfterInsertHooks = append(notificationSubscriptionAfterInsertHooks, notificationSubscriptionHook)
	case boil.AfterSelectHook:
		notificationSubscriptionAfterSelectHooks = append(notificationSubscriptionAfterSelectHooks, notificationSubscriptionHook)
	case boil.AfterUpdateHook:
		notificationSubscriptionAfterUpdateHooks = append(notificationSubscriptionAfterUpdateHooks, notificationSubscriptionHook)
	case boil.AfterDeleteHook:
		notificationSubscriptionAfterDeleteHooks = append(notificationSubscriptionAfterDeleteHooks, notificationSubscriptionHook)
	case boil.AfterUpsertHook:
		notificationSubscriptionAfterUpsertHooks = append(notificationSubscriptionAfterUpsertHooks, notificationSubscriptionHook)
	}
}

// One returns a single notificationSubscription record from the query.
func (q notificationSubscriptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NotificationSubscription, error) {
	o := &NotificationSubscription{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for notification_subscriptions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NotificationSubscription records from the query.
func (q notificationSubscriptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (NotificationSubscriptionSlice, error) {
	var o []*NotificationSubscription

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to NotificationSubscription slice")
	}

	if len(notificationSubscriptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NotificationSubscription records in the query.
func (q notificationSubscriptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count notification_subscriptions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q notificationSubscriptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if notification_subscriptions exists")
	}

	return count > 0, nil
}

// NotificationSubscriptions retrieves all the records using an executor.
func NotificationSubscriptions(mods ...qm.QueryMod) notificationSubscriptionQuery {
	mods = append(mods, qm.From("`notification_subscriptions`"))
	return notificationSubscriptionQuery{NewQuery(mods...)}
}

// FindNotificationSubscription retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotificationSubscription(ctx context.Context, exec boil.ContextExecutor, nSID uint64, selectCols ...string) (*NotificationSubscription, error) {
	notificationSubscriptionObj := &NotificationSubscription{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `notification_subscriptions` where `ns_id`=?", sel,
	)

	q := queries.Raw(query, nSID)

	err := q.Bind(ctx, exec, notificationSubscriptionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from notification_subscriptions")
	}

	if err = notificationSubscriptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return notificationSubscriptionObj, err
	}

	return notificationSubscriptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NotificationSubscription) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no notification_subscriptions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationSubscriptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	notificationSubscriptionInsertCacheMut.RLock()
	cache, cached := notificationSubscriptionInsertCache[key]
	notificationSubscriptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			notificationSubscriptionAllColumns,
			notificationSubscriptionColumnsWithDefault,
			notificationSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(notificationSubscriptionType, notificationSubscriptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationSubscriptionType, notificationSubscriptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `notification_subscriptions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `notification_subscriptions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `notification_subscriptions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, notificationSubscriptionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into notification_subscriptions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.NSID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == notificationSubscriptionMapping["ns_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.NSID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for notification_subscriptions")
	}

CacheNoHooks:
	if !cached {
		notificationSubscriptionInsertCacheMut.Lock()
		notificationSubscriptionInsertCache[key] = cache
		notificationSubscriptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NotificationSubscription.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NotificationSubscription) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	notificationSubscriptionUpdateCacheMut.RLock()
	cache, cached := notificationSubscriptionUpdateCache[key]
	notificationSubscriptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			notificationSubscriptionAllColumns,
			notificationSubscriptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update notification_subscriptions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `notification_subscriptions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, notificationSubscriptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationSubscriptionType, notificationSubscriptionMapping, append(wl, notificationSubscriptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update notification_subscriptions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for notification_subscriptions")
	}

	if !cached {
		notificationSubscriptionUpdateCacheMut.Lock()
		notificationSubscriptionUpdateCache[key] = cache
		notificationSubscriptionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q notificationSubscriptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for notification_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for notification_subscriptions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationSubscriptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `notification_subscriptions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationSubscriptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in notificationSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all notificationSubscription")
	}
	return rowsAff, nil
}

var mySQLNotificationSubscriptionUniqueColumns = []string{
	"ns_id",
	"platform_endpoint_arn",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NotificationSubscription) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no notification_subscriptions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationSubscriptionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLNotificationSubscriptionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationSubscriptionUpsertCacheMut.RLock()
	cache, cached := notificationSubscriptionUpsertCache[key]
	notificationSubscriptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			notificationSubscriptionAllColumns,
			notificationSubscriptionColumnsWithDefault,
			notificationSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			notificationSubscriptionAllColumns,
			notificationSubscriptionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert notification_subscriptions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`notification_subscriptions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `notification_subscriptions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(notificationSubscriptionType, notificationSubscriptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationSubscriptionType, notificationSubscriptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for notification_subscriptions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.NSID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == notificationSubscriptionMapping["ns_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(notificationSubscriptionType, notificationSubscriptionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for notification_subscriptions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for notification_subscriptions")
	}

CacheNoHooks:
	if !cached {
		notificationSubscriptionUpsertCacheMut.Lock()
		notificationSubscriptionUpsertCache[key] = cache
		notificationSubscriptionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NotificationSubscription record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NotificationSubscription) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no NotificationSubscription provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationSubscriptionPrimaryKeyMapping)
	sql := "DELETE FROM `notification_subscriptions` WHERE `ns_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from notification_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for notification_subscriptions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q notificationSubscriptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no notificationSubscriptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from notification_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for notification_subscriptions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationSubscriptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(notificationSubscriptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `notification_subscriptions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationSubscriptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from notificationSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for notification_subscriptions")
	}

	if len(notificationSubscriptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NotificationSubscription) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotificationSubscription(ctx, exec, o.NSID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationSubscriptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NotificationSubscriptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `notification_subscriptions`.* FROM `notification_subscriptions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationSubscriptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in NotificationSubscriptionSlice")
	}

	*o = slice

	return nil
}

// NotificationSubscriptionExists checks if the NotificationSubscription row exists.
func NotificationSubscriptionExists(ctx context.Context, exec boil.ContextExecutor, nSID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `notification_subscriptions` where `ns_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, nSID)
	}
	row := exec.QueryRowContext(ctx, sql, nSID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if notification_subscriptions exists")
	}

	return exists, nil
}
