// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package profile_test

import (
	"sync"

	profiledata "github.com/impartwealthapp/backend/pkg/data/profile"
	"github.com/impartwealthapp/backend/pkg/models"
)

var (
	lockStoreMockCreateProfile                  sync.RWMutex
	lockStoreMockCreateWhitelistEntry           sync.RWMutex
	lockStoreMockDeleteProfile                  sync.RWMutex
	lockStoreMockGetHive                        sync.RWMutex
	lockStoreMockGetImpartIdFromAuthId          sync.RWMutex
	lockStoreMockGetImpartIdFromEmail           sync.RWMutex
	lockStoreMockGetImpartIdFromScreenName      sync.RWMutex
	lockStoreMockGetNotificationProfiles        sync.RWMutex
	lockStoreMockGetProfile                     sync.RWMutex
	lockStoreMockGetProfileFromAuthId           sync.RWMutex
	lockStoreMockGetWhitelistEntry              sync.RWMutex
	lockStoreMockSearchWhitelistEntry           sync.RWMutex
	lockStoreMockUpdateProfile                  sync.RWMutex
	lockStoreMockUpdateProfileProperty          sync.RWMutex
	lockStoreMockUpdateWhitelistEntryScreenName sync.RWMutex
)

// Ensure, that StoreMock does implement Store.
// If this is not the case, regenerate this file with moq.
var _ profiledata.Store = &StoreMock{}

// StoreMock is a mock implementation of Store.
//
//     func TestSomethingThatUsesStore(t *testing.T) {
//
//         // make and configure a mocked Store
//         mockedStore := &StoreMock{
//             CreateProfileFunc: func(p models.Profile) (models.Profile, error) {
// 	               panic("mock out the CreateProfile method")
//             },
//             CreateWhitelistEntryFunc: func(profile models.WhiteListProfile) error {
// 	               panic("mock out the CreateWhitelistEntry method")
//             },
//             DeleteProfileFunc: func(impartWealthID string) error {
// 	               panic("mock out the DeleteProfile method")
//             },
//             GetHiveFunc: func(hiveID string, consistentRead bool) (models.Hive, error) {
// 	               panic("mock out the GetHive method")
//             },
//             GetImpartIdFromAuthIdFunc: func(authenticationId string) (string, error) {
// 	               panic("mock out the GetImpartIdFromAuthId method")
//             },
//             GetImpartIdFromEmailFunc: func(email string) (string, error) {
// 	               panic("mock out the GetImpartIdFromEmail method")
//             },
//             GetImpartIdFromScreenNameFunc: func(screenName string) (string, error) {
// 	               panic("mock out the GetImpartIdFromScreenName method")
//             },
//             GetNotificationProfilesFunc: func(in1 *models.NextProfilePage) ([]models.Profile, *models.NextProfilePage, error) {
// 	               panic("mock out the GetNotificationProfiles method")
//             },
//             GetProfileFunc: func(impartWealthId string, consistentRead bool) (models.Profile, error) {
// 	               panic("mock out the GetProfile method")
//             },
//             GetProfileFromAuthIdFunc: func(authenticationId string, consistentRead bool) (models.Profile, error) {
// 	               panic("mock out the GetProfileFromAuthId method")
//             },
//             GetWhitelistEntryFunc: func(impartWealthID string) (models.WhiteListProfile, error) {
// 	               panic("mock out the GetWhitelistEntry method")
//             },
//             SearchWhitelistEntryFunc: func(t profiledata.SearchType, value string) (models.WhiteListProfile, error) {
// 	               panic("mock out the SearchWhitelistEntry method")
//             },
//             UpdateProfileFunc: func(authId string, p models.Profile) (models.Profile, error) {
// 	               panic("mock out the UpdateProfile method")
//             },
//             UpdateProfilePropertyFunc: func(impartWealthID string, propertyPathName string, propertyPathValue interface{}) error {
// 	               panic("mock out the UpdateProfileProperty method")
//             },
//             UpdateWhitelistEntryScreenNameFunc: func(impartWealthID string, screenName string) error {
// 	               panic("mock out the UpdateWhitelistEntryScreenName method")
//             },
//         }
//
//         // use mockedStore in code that requires Store
//         // and then make assertions.
//
//     }
type StoreMock struct {
	// CreateProfileFunc mocks the CreateProfile method.
	CreateProfileFunc func(p models.Profile) (models.Profile, error)

	// CreateWhitelistEntryFunc mocks the CreateWhitelistEntry method.
	CreateWhitelistEntryFunc func(profile models.WhiteListProfile) error

	// DeleteProfileFunc mocks the DeleteProfile method.
	DeleteProfileFunc func(impartWealthID string) error

	// GetHiveFunc mocks the GetHive method.
	GetHiveFunc func(hiveID string, consistentRead bool) (models.Hive, error)

	// GetImpartIdFromAuthIdFunc mocks the GetImpartIdFromAuthId method.
	GetImpartIdFromAuthIdFunc func(authenticationId string) (string, error)

	// GetImpartIdFromEmailFunc mocks the GetImpartIdFromEmail method.
	GetImpartIdFromEmailFunc func(email string) (string, error)

	// GetImpartIdFromScreenNameFunc mocks the GetImpartIdFromScreenName method.
	GetImpartIdFromScreenNameFunc func(screenName string) (string, error)

	// GetNotificationProfilesFunc mocks the GetNotificationProfiles method.
	GetNotificationProfilesFunc func(in1 *models.NextProfilePage) ([]models.Profile, *models.NextProfilePage, error)

	// GetProfileFunc mocks the GetProfile method.
	GetProfileFunc func(impartWealthId string, consistentRead bool) (models.Profile, error)

	// GetProfileFromAuthIdFunc mocks the GetProfileFromAuthId method.
	GetProfileFromAuthIdFunc func(authenticationId string, consistentRead bool) (models.Profile, error)

	// GetWhitelistEntryFunc mocks the GetWhitelistEntry method.
	GetWhitelistEntryFunc func(impartWealthID string) (models.WhiteListProfile, error)

	// SearchWhitelistEntryFunc mocks the SearchWhitelistEntry method.
	SearchWhitelistEntryFunc func(t profiledata.SearchType, value string) (models.WhiteListProfile, error)

	// UpdateProfileFunc mocks the UpdateProfile method.
	UpdateProfileFunc func(authId string, p models.Profile) (models.Profile, error)

	// UpdateProfilePropertyFunc mocks the UpdateProfileProperty method.
	UpdateProfilePropertyFunc func(impartWealthID string, propertyPathName string, propertyPathValue interface{}) error

	// UpdateWhitelistEntryScreenNameFunc mocks the UpdateWhitelistEntryScreenName method.
	UpdateWhitelistEntryScreenNameFunc func(impartWealthID string, screenName string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateProfile holds details about calls to the CreateProfile method.
		CreateProfile []struct {
			// P is the p argument value.
			P models.Profile
		}
		// CreateWhitelistEntry holds details about calls to the CreateWhitelistEntry method.
		CreateWhitelistEntry []struct {
			// Profile is the profile argument value.
			Profile models.WhiteListProfile
		}
		// DeleteProfile holds details about calls to the DeleteProfile method.
		DeleteProfile []struct {
			// ImpartWealthID is the impartWealthID argument value.
			ImpartWealthID string
		}
		// GetHive holds details about calls to the GetHive method.
		GetHive []struct {
			// HiveID is the hiveID argument value.
			HiveID string
			// ConsistentRead is the consistentRead argument value.
			ConsistentRead bool
		}
		// GetImpartIdFromAuthId holds details about calls to the GetImpartIdFromAuthId method.
		GetImpartIdFromAuthId []struct {
			// AuthenticationId is the authenticationId argument value.
			AuthenticationId string
		}
		// GetImpartIdFromEmail holds details about calls to the GetImpartIdFromEmail method.
		GetImpartIdFromEmail []struct {
			// Email is the email argument value.
			Email string
		}
		// GetImpartIdFromScreenName holds details about calls to the GetImpartIdFromScreenName method.
		GetImpartIdFromScreenName []struct {
			// ScreenName is the screenName argument value.
			ScreenName string
		}
		// GetNotificationProfiles holds details about calls to the GetNotificationProfiles method.
		GetNotificationProfiles []struct {
			// In1 is the in1 argument value.
			In1 *models.NextProfilePage
		}
		// GetProfile holds details about calls to the GetProfile method.
		GetProfile []struct {
			// ImpartWealthId is the impartWealthId argument value.
			ImpartWealthId string
			// ConsistentRead is the consistentRead argument value.
			ConsistentRead bool
		}
		// GetProfileFromAuthId holds details about calls to the GetProfileFromAuthId method.
		GetProfileFromAuthId []struct {
			// AuthenticationId is the authenticationId argument value.
			AuthenticationId string
			// ConsistentRead is the consistentRead argument value.
			ConsistentRead bool
		}
		// GetWhitelistEntry holds details about calls to the GetWhitelistEntry method.
		GetWhitelistEntry []struct {
			// ImpartWealthID is the impartWealthID argument value.
			ImpartWealthID string
		}
		// SearchWhitelistEntry holds details about calls to the SearchWhitelistEntry method.
		SearchWhitelistEntry []struct {
			// T is the t argument value.
			T profiledata.SearchType
			// Value is the value argument value.
			Value string
		}
		// UpdateProfile holds details about calls to the UpdateProfile method.
		UpdateProfile []struct {
			// AuthId is the authId argument value.
			AuthId string
			// P is the p argument value.
			P models.Profile
		}
		// UpdateProfileProperty holds details about calls to the UpdateProfileProperty method.
		UpdateProfileProperty []struct {
			// ImpartWealthID is the impartWealthID argument value.
			ImpartWealthID string
			// PropertyPathName is the propertyPathName argument value.
			PropertyPathName string
			// PropertyPathValue is the propertyPathValue argument value.
			PropertyPathValue interface{}
		}
		// UpdateWhitelistEntryScreenName holds details about calls to the UpdateWhitelistEntryScreenName method.
		UpdateWhitelistEntryScreenName []struct {
			// ImpartWealthID is the impartWealthID argument value.
			ImpartWealthID string
			// ScreenName is the screenName argument value.
			ScreenName string
		}
	}
}

// CreateProfile calls CreateProfileFunc.
func (mock *StoreMock) CreateProfile(p models.Profile) (models.Profile, error) {
	if mock.CreateProfileFunc == nil {
		panic("StoreMock.CreateProfileFunc: method is nil but Store.CreateProfile was just called")
	}
	callInfo := struct {
		P models.Profile
	}{
		P: p,
	}
	lockStoreMockCreateProfile.Lock()
	mock.calls.CreateProfile = append(mock.calls.CreateProfile, callInfo)
	lockStoreMockCreateProfile.Unlock()
	return mock.CreateProfileFunc(p)
}

// CreateProfileCalls gets all the calls that were made to CreateProfile.
// Check the length with:
//     len(mockedStore.CreateProfileCalls())
func (mock *StoreMock) CreateProfileCalls() []struct {
	P models.Profile
} {
	var calls []struct {
		P models.Profile
	}
	lockStoreMockCreateProfile.RLock()
	calls = mock.calls.CreateProfile
	lockStoreMockCreateProfile.RUnlock()
	return calls
}

// CreateWhitelistEntry calls CreateWhitelistEntryFunc.
func (mock *StoreMock) CreateWhitelistEntry(profile models.WhiteListProfile) error {
	if mock.CreateWhitelistEntryFunc == nil {
		panic("StoreMock.CreateWhitelistEntryFunc: method is nil but Store.CreateWhitelistEntry was just called")
	}
	callInfo := struct {
		Profile models.WhiteListProfile
	}{
		Profile: profile,
	}
	lockStoreMockCreateWhitelistEntry.Lock()
	mock.calls.CreateWhitelistEntry = append(mock.calls.CreateWhitelistEntry, callInfo)
	lockStoreMockCreateWhitelistEntry.Unlock()
	return mock.CreateWhitelistEntryFunc(profile)
}

// CreateWhitelistEntryCalls gets all the calls that were made to CreateWhitelistEntry.
// Check the length with:
//     len(mockedStore.CreateWhitelistEntryCalls())
func (mock *StoreMock) CreateWhitelistEntryCalls() []struct {
	Profile models.WhiteListProfile
} {
	var calls []struct {
		Profile models.WhiteListProfile
	}
	lockStoreMockCreateWhitelistEntry.RLock()
	calls = mock.calls.CreateWhitelistEntry
	lockStoreMockCreateWhitelistEntry.RUnlock()
	return calls
}

// DeleteProfile calls DeleteProfileFunc.
func (mock *StoreMock) DeleteProfile(impartWealthID string) error {
	if mock.DeleteProfileFunc == nil {
		panic("StoreMock.DeleteProfileFunc: method is nil but Store.DeleteProfile was just called")
	}
	callInfo := struct {
		ImpartWealthID string
	}{
		ImpartWealthID: impartWealthID,
	}
	lockStoreMockDeleteProfile.Lock()
	mock.calls.DeleteProfile = append(mock.calls.DeleteProfile, callInfo)
	lockStoreMockDeleteProfile.Unlock()
	return mock.DeleteProfileFunc(impartWealthID)
}

// DeleteProfileCalls gets all the calls that were made to DeleteProfile.
// Check the length with:
//     len(mockedStore.DeleteProfileCalls())
func (mock *StoreMock) DeleteProfileCalls() []struct {
	ImpartWealthID string
} {
	var calls []struct {
		ImpartWealthID string
	}
	lockStoreMockDeleteProfile.RLock()
	calls = mock.calls.DeleteProfile
	lockStoreMockDeleteProfile.RUnlock()
	return calls
}

// GetHive calls GetHiveFunc.
func (mock *StoreMock) GetHive(hiveID string, consistentRead bool) (models.Hive, error) {
	if mock.GetHiveFunc == nil {
		panic("StoreMock.GetHiveFunc: method is nil but Store.GetHive was just called")
	}
	callInfo := struct {
		HiveID         string
		ConsistentRead bool
	}{
		HiveID:         hiveID,
		ConsistentRead: consistentRead,
	}
	lockStoreMockGetHive.Lock()
	mock.calls.GetHive = append(mock.calls.GetHive, callInfo)
	lockStoreMockGetHive.Unlock()
	return mock.GetHiveFunc(hiveID, consistentRead)
}

// GetHiveCalls gets all the calls that were made to GetHive.
// Check the length with:
//     len(mockedStore.GetHiveCalls())
func (mock *StoreMock) GetHiveCalls() []struct {
	HiveID         string
	ConsistentRead bool
} {
	var calls []struct {
		HiveID         string
		ConsistentRead bool
	}
	lockStoreMockGetHive.RLock()
	calls = mock.calls.GetHive
	lockStoreMockGetHive.RUnlock()
	return calls
}

// GetImpartIdFromAuthId calls GetImpartIdFromAuthIdFunc.
func (mock *StoreMock) GetImpartIdFromAuthId(authenticationId string) (string, error) {
	if mock.GetImpartIdFromAuthIdFunc == nil {
		panic("StoreMock.GetImpartIdFromAuthIdFunc: method is nil but Store.GetImpartIdFromAuthId was just called")
	}
	callInfo := struct {
		AuthenticationId string
	}{
		AuthenticationId: authenticationId,
	}
	lockStoreMockGetImpartIdFromAuthId.Lock()
	mock.calls.GetImpartIdFromAuthId = append(mock.calls.GetImpartIdFromAuthId, callInfo)
	lockStoreMockGetImpartIdFromAuthId.Unlock()
	return mock.GetImpartIdFromAuthIdFunc(authenticationId)
}

// GetImpartIdFromAuthIdCalls gets all the calls that were made to GetImpartIdFromAuthId.
// Check the length with:
//     len(mockedStore.GetImpartIdFromAuthIdCalls())
func (mock *StoreMock) GetImpartIdFromAuthIdCalls() []struct {
	AuthenticationId string
} {
	var calls []struct {
		AuthenticationId string
	}
	lockStoreMockGetImpartIdFromAuthId.RLock()
	calls = mock.calls.GetImpartIdFromAuthId
	lockStoreMockGetImpartIdFromAuthId.RUnlock()
	return calls
}

// GetImpartIdFromEmail calls GetImpartIdFromEmailFunc.
func (mock *StoreMock) GetImpartIdFromEmail(email string) (string, error) {
	if mock.GetImpartIdFromEmailFunc == nil {
		panic("StoreMock.GetImpartIdFromEmailFunc: method is nil but Store.GetImpartIdFromEmail was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	lockStoreMockGetImpartIdFromEmail.Lock()
	mock.calls.GetImpartIdFromEmail = append(mock.calls.GetImpartIdFromEmail, callInfo)
	lockStoreMockGetImpartIdFromEmail.Unlock()
	return mock.GetImpartIdFromEmailFunc(email)
}

// GetImpartIdFromEmailCalls gets all the calls that were made to GetImpartIdFromEmail.
// Check the length with:
//     len(mockedStore.GetImpartIdFromEmailCalls())
func (mock *StoreMock) GetImpartIdFromEmailCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	lockStoreMockGetImpartIdFromEmail.RLock()
	calls = mock.calls.GetImpartIdFromEmail
	lockStoreMockGetImpartIdFromEmail.RUnlock()
	return calls
}

// GetImpartIdFromScreenName calls GetImpartIdFromScreenNameFunc.
func (mock *StoreMock) GetImpartIdFromScreenName(screenName string) (string, error) {
	if mock.GetImpartIdFromScreenNameFunc == nil {
		panic("StoreMock.GetImpartIdFromScreenNameFunc: method is nil but Store.GetImpartIdFromScreenName was just called")
	}
	callInfo := struct {
		ScreenName string
	}{
		ScreenName: screenName,
	}
	lockStoreMockGetImpartIdFromScreenName.Lock()
	mock.calls.GetImpartIdFromScreenName = append(mock.calls.GetImpartIdFromScreenName, callInfo)
	lockStoreMockGetImpartIdFromScreenName.Unlock()
	return mock.GetImpartIdFromScreenNameFunc(screenName)
}

// GetImpartIdFromScreenNameCalls gets all the calls that were made to GetImpartIdFromScreenName.
// Check the length with:
//     len(mockedStore.GetImpartIdFromScreenNameCalls())
func (mock *StoreMock) GetImpartIdFromScreenNameCalls() []struct {
	ScreenName string
} {
	var calls []struct {
		ScreenName string
	}
	lockStoreMockGetImpartIdFromScreenName.RLock()
	calls = mock.calls.GetImpartIdFromScreenName
	lockStoreMockGetImpartIdFromScreenName.RUnlock()
	return calls
}

// GetNotificationProfiles calls GetNotificationProfilesFunc.
func (mock *StoreMock) GetNotificationProfiles(in1 *models.NextProfilePage) ([]models.Profile, *models.NextProfilePage, error) {
	if mock.GetNotificationProfilesFunc == nil {
		panic("StoreMock.GetNotificationProfilesFunc: method is nil but Store.GetNotificationProfiles was just called")
	}
	callInfo := struct {
		In1 *models.NextProfilePage
	}{
		In1: in1,
	}
	lockStoreMockGetNotificationProfiles.Lock()
	mock.calls.GetNotificationProfiles = append(mock.calls.GetNotificationProfiles, callInfo)
	lockStoreMockGetNotificationProfiles.Unlock()
	return mock.GetNotificationProfilesFunc(in1)
}

// GetNotificationProfilesCalls gets all the calls that were made to GetNotificationProfiles.
// Check the length with:
//     len(mockedStore.GetNotificationProfilesCalls())
func (mock *StoreMock) GetNotificationProfilesCalls() []struct {
	In1 *models.NextProfilePage
} {
	var calls []struct {
		In1 *models.NextProfilePage
	}
	lockStoreMockGetNotificationProfiles.RLock()
	calls = mock.calls.GetNotificationProfiles
	lockStoreMockGetNotificationProfiles.RUnlock()
	return calls
}

// GetProfile calls GetProfileFunc.
func (mock *StoreMock) GetProfile(impartWealthId string, consistentRead bool) (models.Profile, error) {
	if mock.GetProfileFunc == nil {
		panic("StoreMock.GetProfileFunc: method is nil but Store.GetProfile was just called")
	}
	callInfo := struct {
		ImpartWealthId string
		ConsistentRead bool
	}{
		ImpartWealthId: impartWealthId,
		ConsistentRead: consistentRead,
	}
	lockStoreMockGetProfile.Lock()
	mock.calls.GetProfile = append(mock.calls.GetProfile, callInfo)
	lockStoreMockGetProfile.Unlock()
	return mock.GetProfileFunc(impartWealthId, consistentRead)
}

// GetProfileCalls gets all the calls that were made to GetProfile.
// Check the length with:
//     len(mockedStore.GetProfileCalls())
func (mock *StoreMock) GetProfileCalls() []struct {
	ImpartWealthId string
	ConsistentRead bool
} {
	var calls []struct {
		ImpartWealthId string
		ConsistentRead bool
	}
	lockStoreMockGetProfile.RLock()
	calls = mock.calls.GetProfile
	lockStoreMockGetProfile.RUnlock()
	return calls
}

// GetProfileFromAuthId calls GetProfileFromAuthIdFunc.
func (mock *StoreMock) GetProfileFromAuthId(authenticationId string, consistentRead bool) (models.Profile, error) {
	if mock.GetProfileFromAuthIdFunc == nil {
		panic("StoreMock.GetProfileFromAuthIdFunc: method is nil but Store.GetProfileFromAuthId was just called")
	}
	callInfo := struct {
		AuthenticationId string
		ConsistentRead   bool
	}{
		AuthenticationId: authenticationId,
		ConsistentRead:   consistentRead,
	}
	lockStoreMockGetProfileFromAuthId.Lock()
	mock.calls.GetProfileFromAuthId = append(mock.calls.GetProfileFromAuthId, callInfo)
	lockStoreMockGetProfileFromAuthId.Unlock()
	return mock.GetProfileFromAuthIdFunc(authenticationId, consistentRead)
}

// GetProfileFromAuthIdCalls gets all the calls that were made to GetProfileFromAuthId.
// Check the length with:
//     len(mockedStore.GetProfileFromAuthIdCalls())
func (mock *StoreMock) GetProfileFromAuthIdCalls() []struct {
	AuthenticationId string
	ConsistentRead   bool
} {
	var calls []struct {
		AuthenticationId string
		ConsistentRead   bool
	}
	lockStoreMockGetProfileFromAuthId.RLock()
	calls = mock.calls.GetProfileFromAuthId
	lockStoreMockGetProfileFromAuthId.RUnlock()
	return calls
}

// GetWhitelistEntry calls GetWhitelistEntryFunc.
func (mock *StoreMock) GetWhitelistEntry(impartWealthID string) (models.WhiteListProfile, error) {
	if mock.GetWhitelistEntryFunc == nil {
		panic("StoreMock.GetWhitelistEntryFunc: method is nil but Store.GetWhitelistEntry was just called")
	}
	callInfo := struct {
		ImpartWealthID string
	}{
		ImpartWealthID: impartWealthID,
	}
	lockStoreMockGetWhitelistEntry.Lock()
	mock.calls.GetWhitelistEntry = append(mock.calls.GetWhitelistEntry, callInfo)
	lockStoreMockGetWhitelistEntry.Unlock()
	return mock.GetWhitelistEntryFunc(impartWealthID)
}

// GetWhitelistEntryCalls gets all the calls that were made to GetWhitelistEntry.
// Check the length with:
//     len(mockedStore.GetWhitelistEntryCalls())
func (mock *StoreMock) GetWhitelistEntryCalls() []struct {
	ImpartWealthID string
} {
	var calls []struct {
		ImpartWealthID string
	}
	lockStoreMockGetWhitelistEntry.RLock()
	calls = mock.calls.GetWhitelistEntry
	lockStoreMockGetWhitelistEntry.RUnlock()
	return calls
}

// SearchWhitelistEntry calls SearchWhitelistEntryFunc.
func (mock *StoreMock) SearchWhitelistEntry(t profiledata.SearchType, value string) (models.WhiteListProfile, error) {
	if mock.SearchWhitelistEntryFunc == nil {
		panic("StoreMock.SearchWhitelistEntryFunc: method is nil but Store.SearchWhitelistEntry was just called")
	}
	callInfo := struct {
		T     profiledata.SearchType
		Value string
	}{
		T:     t,
		Value: value,
	}
	lockStoreMockSearchWhitelistEntry.Lock()
	mock.calls.SearchWhitelistEntry = append(mock.calls.SearchWhitelistEntry, callInfo)
	lockStoreMockSearchWhitelistEntry.Unlock()
	return mock.SearchWhitelistEntryFunc(t, value)
}

// SearchWhitelistEntryCalls gets all the calls that were made to SearchWhitelistEntry.
// Check the length with:
//     len(mockedStore.SearchWhitelistEntryCalls())
func (mock *StoreMock) SearchWhitelistEntryCalls() []struct {
	T     profiledata.SearchType
	Value string
} {
	var calls []struct {
		T     profiledata.SearchType
		Value string
	}
	lockStoreMockSearchWhitelistEntry.RLock()
	calls = mock.calls.SearchWhitelistEntry
	lockStoreMockSearchWhitelistEntry.RUnlock()
	return calls
}

// UpdateProfile calls UpdateProfileFunc.
func (mock *StoreMock) UpdateProfile(authId string, p models.Profile) (models.Profile, error) {
	if mock.UpdateProfileFunc == nil {
		panic("StoreMock.UpdateProfileFunc: method is nil but Store.UpdateProfile was just called")
	}
	callInfo := struct {
		AuthId string
		P      models.Profile
	}{
		AuthId: authId,
		P:      p,
	}
	lockStoreMockUpdateProfile.Lock()
	mock.calls.UpdateProfile = append(mock.calls.UpdateProfile, callInfo)
	lockStoreMockUpdateProfile.Unlock()
	return mock.UpdateProfileFunc(authId, p)
}

// UpdateProfileCalls gets all the calls that were made to UpdateProfile.
// Check the length with:
//     len(mockedStore.UpdateProfileCalls())
func (mock *StoreMock) UpdateProfileCalls() []struct {
	AuthId string
	P      models.Profile
} {
	var calls []struct {
		AuthId string
		P      models.Profile
	}
	lockStoreMockUpdateProfile.RLock()
	calls = mock.calls.UpdateProfile
	lockStoreMockUpdateProfile.RUnlock()
	return calls
}

// UpdateProfileProperty calls UpdateProfilePropertyFunc.
func (mock *StoreMock) UpdateProfileProperty(impartWealthID string, propertyPathName string, propertyPathValue interface{}) error {
	if mock.UpdateProfilePropertyFunc == nil {
		panic("StoreMock.UpdateProfilePropertyFunc: method is nil but Store.UpdateProfileProperty was just called")
	}
	callInfo := struct {
		ImpartWealthID    string
		PropertyPathName  string
		PropertyPathValue interface{}
	}{
		ImpartWealthID:    impartWealthID,
		PropertyPathName:  propertyPathName,
		PropertyPathValue: propertyPathValue,
	}
	lockStoreMockUpdateProfileProperty.Lock()
	mock.calls.UpdateProfileProperty = append(mock.calls.UpdateProfileProperty, callInfo)
	lockStoreMockUpdateProfileProperty.Unlock()
	return mock.UpdateProfilePropertyFunc(impartWealthID, propertyPathName, propertyPathValue)
}

// UpdateProfilePropertyCalls gets all the calls that were made to UpdateProfileProperty.
// Check the length with:
//     len(mockedStore.UpdateProfilePropertyCalls())
func (mock *StoreMock) UpdateProfilePropertyCalls() []struct {
	ImpartWealthID    string
	PropertyPathName  string
	PropertyPathValue interface{}
} {
	var calls []struct {
		ImpartWealthID    string
		PropertyPathName  string
		PropertyPathValue interface{}
	}
	lockStoreMockUpdateProfileProperty.RLock()
	calls = mock.calls.UpdateProfileProperty
	lockStoreMockUpdateProfileProperty.RUnlock()
	return calls
}

// UpdateWhitelistEntryScreenName calls UpdateWhitelistEntryScreenNameFunc.
func (mock *StoreMock) UpdateWhitelistEntryScreenName(impartWealthID string, screenName string) error {
	if mock.UpdateWhitelistEntryScreenNameFunc == nil {
		panic("StoreMock.UpdateWhitelistEntryScreenNameFunc: method is nil but Store.UpdateWhitelistEntryScreenName was just called")
	}
	callInfo := struct {
		ImpartWealthID string
		ScreenName     string
	}{
		ImpartWealthID: impartWealthID,
		ScreenName:     screenName,
	}
	lockStoreMockUpdateWhitelistEntryScreenName.Lock()
	mock.calls.UpdateWhitelistEntryScreenName = append(mock.calls.UpdateWhitelistEntryScreenName, callInfo)
	lockStoreMockUpdateWhitelistEntryScreenName.Unlock()
	return mock.UpdateWhitelistEntryScreenNameFunc(impartWealthID, screenName)
}

// UpdateWhitelistEntryScreenNameCalls gets all the calls that were made to UpdateWhitelistEntryScreenName.
// Check the length with:
//     len(mockedStore.UpdateWhitelistEntryScreenNameCalls())
func (mock *StoreMock) UpdateWhitelistEntryScreenNameCalls() []struct {
	ImpartWealthID string
	ScreenName     string
} {
	var calls []struct {
		ImpartWealthID string
		ScreenName     string
	}
	lockStoreMockUpdateWhitelistEntryScreenName.RLock()
	calls = mock.calls.UpdateWhitelistEntryScreenName
	lockStoreMockUpdateWhitelistEntryScreenName.RUnlock()
	return calls
}
