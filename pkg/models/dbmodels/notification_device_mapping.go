// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NotificationDeviceMapping is an object representing the database table.
type NotificationDeviceMapping struct {
	MapID          int    `boil:"map_id" json:"map_id" toml:"map_id" yaml:"map_id"`
	ImpartWealthID string `boil:"impart_wealth_id" json:"impart_wealth_id" toml:"impart_wealth_id" yaml:"impart_wealth_id"`
	UserDeviceID   []byte `boil:"user_device_id" json:"user_device_id" toml:"user_device_id" yaml:"user_device_id"`
	NotifyStatus   int    `boil:"notify_status" json:"notify_status" toml:"notify_status" yaml:"notify_status"`

	R *notificationDeviceMappingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L notificationDeviceMappingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotificationDeviceMappingColumns = struct {
	MapID          string
	ImpartWealthID string
	UserDeviceID   string
	NotifyStatus   string
}{
	MapID:          "map_id",
	ImpartWealthID: "impart_wealth_id",
	UserDeviceID:   "user_device_id",
	NotifyStatus:   "notify_status",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var NotificationDeviceMappingWhere = struct {
	MapID          whereHelperint
	ImpartWealthID whereHelperstring
	UserDeviceID   whereHelper__byte
	NotifyStatus   whereHelperint
}{
	MapID:          whereHelperint{field: "`notification_device_mapping`.`map_id`"},
	ImpartWealthID: whereHelperstring{field: "`notification_device_mapping`.`impart_wealth_id`"},
	UserDeviceID:   whereHelper__byte{field: "`notification_device_mapping`.`user_device_id`"},
	NotifyStatus:   whereHelperint{field: "`notification_device_mapping`.`notify_status`"},
}

// NotificationDeviceMappingRels is where relationship names are stored.
var NotificationDeviceMappingRels = struct {
	ImpartWealth string
	UserDevice   string
}{
	ImpartWealth: "ImpartWealth",
	UserDevice:   "UserDevice",
}

// notificationDeviceMappingR is where relationships are stored.
type notificationDeviceMappingR struct {
	ImpartWealth *User       `boil:"ImpartWealth" json:"ImpartWealth" toml:"ImpartWealth" yaml:"ImpartWealth"`
	UserDevice   *UserDevice `boil:"UserDevice" json:"UserDevice" toml:"UserDevice" yaml:"UserDevice"`
}

// NewStruct creates a new relationship struct
func (*notificationDeviceMappingR) NewStruct() *notificationDeviceMappingR {
	return &notificationDeviceMappingR{}
}

// notificationDeviceMappingL is where Load methods for each relationship are stored.
type notificationDeviceMappingL struct{}

var (
	notificationDeviceMappingAllColumns            = []string{"map_id", "impart_wealth_id", "user_device_id", "notify_status"}
	notificationDeviceMappingColumnsWithoutDefault = []string{"impart_wealth_id", "user_device_id"}
	notificationDeviceMappingColumnsWithDefault    = []string{"map_id", "notify_status"}
	notificationDeviceMappingPrimaryKeyColumns     = []string{"map_id"}
)

type (
	// NotificationDeviceMappingSlice is an alias for a slice of pointers to NotificationDeviceMapping.
	// This should generally be used opposed to []NotificationDeviceMapping.
	NotificationDeviceMappingSlice []*NotificationDeviceMapping
	// NotificationDeviceMappingHook is the signature for custom NotificationDeviceMapping hook methods
	NotificationDeviceMappingHook func(context.Context, boil.ContextExecutor, *NotificationDeviceMapping) error

	notificationDeviceMappingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationDeviceMappingType                 = reflect.TypeOf(&NotificationDeviceMapping{})
	notificationDeviceMappingMapping              = queries.MakeStructMapping(notificationDeviceMappingType)
	notificationDeviceMappingPrimaryKeyMapping, _ = queries.BindMapping(notificationDeviceMappingType, notificationDeviceMappingMapping, notificationDeviceMappingPrimaryKeyColumns)
	notificationDeviceMappingInsertCacheMut       sync.RWMutex
	notificationDeviceMappingInsertCache          = make(map[string]insertCache)
	notificationDeviceMappingUpdateCacheMut       sync.RWMutex
	notificationDeviceMappingUpdateCache          = make(map[string]updateCache)
	notificationDeviceMappingUpsertCacheMut       sync.RWMutex
	notificationDeviceMappingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var notificationDeviceMappingBeforeInsertHooks []NotificationDeviceMappingHook
var notificationDeviceMappingBeforeUpdateHooks []NotificationDeviceMappingHook
var notificationDeviceMappingBeforeDeleteHooks []NotificationDeviceMappingHook
var notificationDeviceMappingBeforeUpsertHooks []NotificationDeviceMappingHook

var notificationDeviceMappingAfterInsertHooks []NotificationDeviceMappingHook
var notificationDeviceMappingAfterSelectHooks []NotificationDeviceMappingHook
var notificationDeviceMappingAfterUpdateHooks []NotificationDeviceMappingHook
var notificationDeviceMappingAfterDeleteHooks []NotificationDeviceMappingHook
var notificationDeviceMappingAfterUpsertHooks []NotificationDeviceMappingHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NotificationDeviceMapping) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationDeviceMappingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NotificationDeviceMapping) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationDeviceMappingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NotificationDeviceMapping) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationDeviceMappingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NotificationDeviceMapping) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationDeviceMappingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NotificationDeviceMapping) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationDeviceMappingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NotificationDeviceMapping) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationDeviceMappingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NotificationDeviceMapping) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationDeviceMappingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NotificationDeviceMapping) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationDeviceMappingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NotificationDeviceMapping) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationDeviceMappingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationDeviceMappingHook registers your hook function for all future operations.
func AddNotificationDeviceMappingHook(hookPoint boil.HookPoint, notificationDeviceMappingHook NotificationDeviceMappingHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		notificationDeviceMappingBeforeInsertHooks = append(notificationDeviceMappingBeforeInsertHooks, notificationDeviceMappingHook)
	case boil.BeforeUpdateHook:
		notificationDeviceMappingBeforeUpdateHooks = append(notificationDeviceMappingBeforeUpdateHooks, notificationDeviceMappingHook)
	case boil.BeforeDeleteHook:
		notificationDeviceMappingBeforeDeleteHooks = append(notificationDeviceMappingBeforeDeleteHooks, notificationDeviceMappingHook)
	case boil.BeforeUpsertHook:
		notificationDeviceMappingBeforeUpsertHooks = append(notificationDeviceMappingBeforeUpsertHooks, notificationDeviceMappingHook)
	case boil.AfterInsertHook:
		notificationDeviceMappingAfterInsertHooks = append(notificationDeviceMappingAfterInsertHooks, notificationDeviceMappingHook)
	case boil.AfterSelectHook:
		notificationDeviceMappingAfterSelectHooks = append(notificationDeviceMappingAfterSelectHooks, notificationDeviceMappingHook)
	case boil.AfterUpdateHook:
		notificationDeviceMappingAfterUpdateHooks = append(notificationDeviceMappingAfterUpdateHooks, notificationDeviceMappingHook)
	case boil.AfterDeleteHook:
		notificationDeviceMappingAfterDeleteHooks = append(notificationDeviceMappingAfterDeleteHooks, notificationDeviceMappingHook)
	case boil.AfterUpsertHook:
		notificationDeviceMappingAfterUpsertHooks = append(notificationDeviceMappingAfterUpsertHooks, notificationDeviceMappingHook)
	}
}

// One returns a single notificationDeviceMapping record from the query.
func (q notificationDeviceMappingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NotificationDeviceMapping, error) {
	o := &NotificationDeviceMapping{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for notification_device_mapping")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NotificationDeviceMapping records from the query.
func (q notificationDeviceMappingQuery) All(ctx context.Context, exec boil.ContextExecutor) (NotificationDeviceMappingSlice, error) {
	var o []*NotificationDeviceMapping

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to NotificationDeviceMapping slice")
	}

	if len(notificationDeviceMappingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NotificationDeviceMapping records in the query.
func (q notificationDeviceMappingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count notification_device_mapping rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q notificationDeviceMappingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if notification_device_mapping exists")
	}

	return count > 0, nil
}

// ImpartWealth pointed to by the foreign key.
func (o *NotificationDeviceMapping) ImpartWealth(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`impart_wealth_id` = ?", o.ImpartWealthID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// UserDevice pointed to by the foreign key.
func (o *NotificationDeviceMapping) UserDevice(mods ...qm.QueryMod) userDeviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`token` = ?", o.UserDeviceID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := UserDevices(queryMods...)
	queries.SetFrom(query.Query, "`user_devices`")

	return query
}

// LoadImpartWealth allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (notificationDeviceMappingL) LoadImpartWealth(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotificationDeviceMapping interface{}, mods queries.Applicator) error {
	var slice []*NotificationDeviceMapping
	var object *NotificationDeviceMapping

	if singular {
		object = maybeNotificationDeviceMapping.(*NotificationDeviceMapping)
	} else {
		slice = *maybeNotificationDeviceMapping.(*[]*NotificationDeviceMapping)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notificationDeviceMappingR{}
		}
		args = append(args, object.ImpartWealthID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationDeviceMappingR{}
			}

			for _, a := range args {
				if a == obj.ImpartWealthID {
					continue Outer
				}
			}

			args = append(args, obj.ImpartWealthID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.impart_wealth_id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(notificationDeviceMappingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ImpartWealth = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ImpartWealthNotificationDeviceMappings = append(foreign.R.ImpartWealthNotificationDeviceMappings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImpartWealthID == foreign.ImpartWealthID {
				local.R.ImpartWealth = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ImpartWealthNotificationDeviceMappings = append(foreign.R.ImpartWealthNotificationDeviceMappings, local)
				break
			}
		}
	}

	return nil
}

// LoadUserDevice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (notificationDeviceMappingL) LoadUserDevice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotificationDeviceMapping interface{}, mods queries.Applicator) error {
	var slice []*NotificationDeviceMapping
	var object *NotificationDeviceMapping

	if singular {
		object = maybeNotificationDeviceMapping.(*NotificationDeviceMapping)
	} else {
		slice = *maybeNotificationDeviceMapping.(*[]*NotificationDeviceMapping)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notificationDeviceMappingR{}
		}
		if !queries.IsNil(object.UserDeviceID) {
			args = append(args, object.UserDeviceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationDeviceMappingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserDeviceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserDeviceID) {
				args = append(args, obj.UserDeviceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_devices`),
		qm.WhereIn(`user_devices.token in ?`, args...),
		qmhelper.WhereIsNull(`user_devices.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserDevice")
	}

	var resultSlice []*UserDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserDevice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_devices")
	}

	if len(notificationDeviceMappingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserDevice = foreign
		if foreign.R == nil {
			foreign.R = &userDeviceR{}
		}
		foreign.R.NotificationDeviceMappings = append(foreign.R.NotificationDeviceMappings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserDeviceID, foreign.Token) {
				local.R.UserDevice = foreign
				if foreign.R == nil {
					foreign.R = &userDeviceR{}
				}
				foreign.R.NotificationDeviceMappings = append(foreign.R.NotificationDeviceMappings, local)
				break
			}
		}
	}

	return nil
}

// SetImpartWealth of the notificationDeviceMapping to the related item.
// Sets o.R.ImpartWealth to related.
// Adds o to related.R.ImpartWealthNotificationDeviceMappings.
func (o *NotificationDeviceMapping) SetImpartWealth(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `notification_device_mapping` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"impart_wealth_id"}),
		strmangle.WhereClause("`", "`", 0, notificationDeviceMappingPrimaryKeyColumns),
	)
	values := []interface{}{related.ImpartWealthID, o.MapID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImpartWealthID = related.ImpartWealthID
	if o.R == nil {
		o.R = &notificationDeviceMappingR{
			ImpartWealth: related,
		}
	} else {
		o.R.ImpartWealth = related
	}

	if related.R == nil {
		related.R = &userR{
			ImpartWealthNotificationDeviceMappings: NotificationDeviceMappingSlice{o},
		}
	} else {
		related.R.ImpartWealthNotificationDeviceMappings = append(related.R.ImpartWealthNotificationDeviceMappings, o)
	}

	return nil
}

// SetUserDevice of the notificationDeviceMapping to the related item.
// Sets o.R.UserDevice to related.
// Adds o to related.R.NotificationDeviceMappings.
func (o *NotificationDeviceMapping) SetUserDevice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserDevice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `notification_device_mapping` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_device_id"}),
		strmangle.WhereClause("`", "`", 0, notificationDeviceMappingPrimaryKeyColumns),
	)
	values := []interface{}{related.Token, o.MapID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserDeviceID, related.Token)
	if o.R == nil {
		o.R = &notificationDeviceMappingR{
			UserDevice: related,
		}
	} else {
		o.R.UserDevice = related
	}

	if related.R == nil {
		related.R = &userDeviceR{
			NotificationDeviceMappings: NotificationDeviceMappingSlice{o},
		}
	} else {
		related.R.NotificationDeviceMappings = append(related.R.NotificationDeviceMappings, o)
	}

	return nil
}

// NotificationDeviceMappings retrieves all the records using an executor.
func NotificationDeviceMappings(mods ...qm.QueryMod) notificationDeviceMappingQuery {
	mods = append(mods, qm.From("`notification_device_mapping`"))
	return notificationDeviceMappingQuery{NewQuery(mods...)}
}

// FindNotificationDeviceMapping retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotificationDeviceMapping(ctx context.Context, exec boil.ContextExecutor, mapID int, selectCols ...string) (*NotificationDeviceMapping, error) {
	notificationDeviceMappingObj := &NotificationDeviceMapping{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `notification_device_mapping` where `map_id`=?", sel,
	)

	q := queries.Raw(query, mapID)

	err := q.Bind(ctx, exec, notificationDeviceMappingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from notification_device_mapping")
	}

	return notificationDeviceMappingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NotificationDeviceMapping) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no notification_device_mapping provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationDeviceMappingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	notificationDeviceMappingInsertCacheMut.RLock()
	cache, cached := notificationDeviceMappingInsertCache[key]
	notificationDeviceMappingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			notificationDeviceMappingAllColumns,
			notificationDeviceMappingColumnsWithDefault,
			notificationDeviceMappingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(notificationDeviceMappingType, notificationDeviceMappingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationDeviceMappingType, notificationDeviceMappingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `notification_device_mapping` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `notification_device_mapping` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `notification_device_mapping` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, notificationDeviceMappingPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into notification_device_mapping")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.MapID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == notificationDeviceMappingMapping["map_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MapID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for notification_device_mapping")
	}

CacheNoHooks:
	if !cached {
		notificationDeviceMappingInsertCacheMut.Lock()
		notificationDeviceMappingInsertCache[key] = cache
		notificationDeviceMappingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NotificationDeviceMapping.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NotificationDeviceMapping) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	notificationDeviceMappingUpdateCacheMut.RLock()
	cache, cached := notificationDeviceMappingUpdateCache[key]
	notificationDeviceMappingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			notificationDeviceMappingAllColumns,
			notificationDeviceMappingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update notification_device_mapping, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `notification_device_mapping` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, notificationDeviceMappingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationDeviceMappingType, notificationDeviceMappingMapping, append(wl, notificationDeviceMappingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update notification_device_mapping row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for notification_device_mapping")
	}

	if !cached {
		notificationDeviceMappingUpdateCacheMut.Lock()
		notificationDeviceMappingUpdateCache[key] = cache
		notificationDeviceMappingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q notificationDeviceMappingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for notification_device_mapping")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for notification_device_mapping")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationDeviceMappingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationDeviceMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `notification_device_mapping` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationDeviceMappingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in notificationDeviceMapping slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all notificationDeviceMapping")
	}
	return rowsAff, nil
}

var mySQLNotificationDeviceMappingUniqueColumns = []string{
	"map_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NotificationDeviceMapping) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no notification_device_mapping provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationDeviceMappingColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLNotificationDeviceMappingUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationDeviceMappingUpsertCacheMut.RLock()
	cache, cached := notificationDeviceMappingUpsertCache[key]
	notificationDeviceMappingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			notificationDeviceMappingAllColumns,
			notificationDeviceMappingColumnsWithDefault,
			notificationDeviceMappingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			notificationDeviceMappingAllColumns,
			notificationDeviceMappingPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert notification_device_mapping, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`notification_device_mapping`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `notification_device_mapping` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(notificationDeviceMappingType, notificationDeviceMappingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationDeviceMappingType, notificationDeviceMappingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for notification_device_mapping")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.MapID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == notificationDeviceMappingMapping["map_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(notificationDeviceMappingType, notificationDeviceMappingMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for notification_device_mapping")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for notification_device_mapping")
	}

CacheNoHooks:
	if !cached {
		notificationDeviceMappingUpsertCacheMut.Lock()
		notificationDeviceMappingUpsertCache[key] = cache
		notificationDeviceMappingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NotificationDeviceMapping record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NotificationDeviceMapping) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no NotificationDeviceMapping provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationDeviceMappingPrimaryKeyMapping)
	sql := "DELETE FROM `notification_device_mapping` WHERE `map_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from notification_device_mapping")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for notification_device_mapping")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q notificationDeviceMappingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no notificationDeviceMappingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from notification_device_mapping")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for notification_device_mapping")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationDeviceMappingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(notificationDeviceMappingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationDeviceMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `notification_device_mapping` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationDeviceMappingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from notificationDeviceMapping slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for notification_device_mapping")
	}

	if len(notificationDeviceMappingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NotificationDeviceMapping) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotificationDeviceMapping(ctx, exec, o.MapID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationDeviceMappingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NotificationDeviceMappingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationDeviceMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `notification_device_mapping`.* FROM `notification_device_mapping` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationDeviceMappingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in NotificationDeviceMappingSlice")
	}

	*o = slice

	return nil
}

// NotificationDeviceMappingExists checks if the NotificationDeviceMapping row exists.
func NotificationDeviceMappingExists(ctx context.Context, exec boil.ContextExecutor, mapID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `notification_device_mapping` where `map_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, mapID)
	}
	row := exec.QueryRowContext(ctx, sql, mapID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if notification_device_mapping exists")
	}

	return exists, nil
}
