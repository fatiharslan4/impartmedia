// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HiveUserDemographic is an object representing the database table.
type HiveUserDemographic struct {
	HiveID     uint64 `boil:"hive_id" json:"hive_id" toml:"hive_id" yaml:"hive_id"`
	QuestionID uint   `boil:"question_id" json:"question_id" toml:"question_id" yaml:"question_id"`
	AnswerID   uint   `boil:"answer_id" json:"answer_id" toml:"answer_id" yaml:"answer_id"`
	UserCount  uint   `boil:"user_count" json:"user_count" toml:"user_count" yaml:"user_count"`

	R *hiveUserDemographicR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hiveUserDemographicL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HiveUserDemographicColumns = struct {
	HiveID     string
	QuestionID string
	AnswerID   string
	UserCount  string
}{
	HiveID:     "hive_id",
	QuestionID: "question_id",
	AnswerID:   "answer_id",
	UserCount:  "user_count",
}

var HiveUserDemographicTableColumns = struct {
	HiveID     string
	QuestionID string
	AnswerID   string
	UserCount  string
}{
	HiveID:     "hive_user_demographic.hive_id",
	QuestionID: "hive_user_demographic.question_id",
	AnswerID:   "hive_user_demographic.answer_id",
	UserCount:  "hive_user_demographic.user_count",
}

// Generated where

var HiveUserDemographicWhere = struct {
	HiveID     whereHelperuint64
	QuestionID whereHelperuint
	AnswerID   whereHelperuint
	UserCount  whereHelperuint
}{
	HiveID:     whereHelperuint64{field: "`hive_user_demographic`.`hive_id`"},
	QuestionID: whereHelperuint{field: "`hive_user_demographic`.`question_id`"},
	AnswerID:   whereHelperuint{field: "`hive_user_demographic`.`answer_id`"},
	UserCount:  whereHelperuint{field: "`hive_user_demographic`.`user_count`"},
}

// HiveUserDemographicRels is where relationship names are stored.
var HiveUserDemographicRels = struct {
	Hive     string
	Question string
	Answer   string
}{
	Hive:     "Hive",
	Question: "Question",
	Answer:   "Answer",
}

// hiveUserDemographicR is where relationships are stored.
type hiveUserDemographicR struct {
	Hive     *Hive     `boil:"Hive" json:"Hive" toml:"Hive" yaml:"Hive"`
	Question *Question `boil:"Question" json:"Question" toml:"Question" yaml:"Question"`
	Answer   *Answer   `boil:"Answer" json:"Answer" toml:"Answer" yaml:"Answer"`
}

// NewStruct creates a new relationship struct
func (*hiveUserDemographicR) NewStruct() *hiveUserDemographicR {
	return &hiveUserDemographicR{}
}

// hiveUserDemographicL is where Load methods for each relationship are stored.
type hiveUserDemographicL struct{}

var (
	hiveUserDemographicAllColumns            = []string{"hive_id", "question_id", "answer_id", "user_count"}
	hiveUserDemographicColumnsWithoutDefault = []string{"hive_id", "question_id", "answer_id"}
	hiveUserDemographicColumnsWithDefault    = []string{"user_count"}
	hiveUserDemographicPrimaryKeyColumns     = []string{"hive_id", "question_id", "answer_id"}
)

type (
	// HiveUserDemographicSlice is an alias for a slice of pointers to HiveUserDemographic.
	// This should almost always be used instead of []HiveUserDemographic.
	HiveUserDemographicSlice []*HiveUserDemographic
	// HiveUserDemographicHook is the signature for custom HiveUserDemographic hook methods
	HiveUserDemographicHook func(context.Context, boil.ContextExecutor, *HiveUserDemographic) error

	hiveUserDemographicQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hiveUserDemographicType                 = reflect.TypeOf(&HiveUserDemographic{})
	hiveUserDemographicMapping              = queries.MakeStructMapping(hiveUserDemographicType)
	hiveUserDemographicPrimaryKeyMapping, _ = queries.BindMapping(hiveUserDemographicType, hiveUserDemographicMapping, hiveUserDemographicPrimaryKeyColumns)
	hiveUserDemographicInsertCacheMut       sync.RWMutex
	hiveUserDemographicInsertCache          = make(map[string]insertCache)
	hiveUserDemographicUpdateCacheMut       sync.RWMutex
	hiveUserDemographicUpdateCache          = make(map[string]updateCache)
	hiveUserDemographicUpsertCacheMut       sync.RWMutex
	hiveUserDemographicUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hiveUserDemographicBeforeInsertHooks []HiveUserDemographicHook
var hiveUserDemographicBeforeUpdateHooks []HiveUserDemographicHook
var hiveUserDemographicBeforeDeleteHooks []HiveUserDemographicHook
var hiveUserDemographicBeforeUpsertHooks []HiveUserDemographicHook

var hiveUserDemographicAfterInsertHooks []HiveUserDemographicHook
var hiveUserDemographicAfterSelectHooks []HiveUserDemographicHook
var hiveUserDemographicAfterUpdateHooks []HiveUserDemographicHook
var hiveUserDemographicAfterDeleteHooks []HiveUserDemographicHook
var hiveUserDemographicAfterUpsertHooks []HiveUserDemographicHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HiveUserDemographic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveUserDemographicBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HiveUserDemographic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveUserDemographicBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HiveUserDemographic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveUserDemographicBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HiveUserDemographic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveUserDemographicBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HiveUserDemographic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveUserDemographicAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HiveUserDemographic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveUserDemographicAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HiveUserDemographic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveUserDemographicAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HiveUserDemographic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveUserDemographicAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HiveUserDemographic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveUserDemographicAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHiveUserDemographicHook registers your hook function for all future operations.
func AddHiveUserDemographicHook(hookPoint boil.HookPoint, hiveUserDemographicHook HiveUserDemographicHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		hiveUserDemographicBeforeInsertHooks = append(hiveUserDemographicBeforeInsertHooks, hiveUserDemographicHook)
	case boil.BeforeUpdateHook:
		hiveUserDemographicBeforeUpdateHooks = append(hiveUserDemographicBeforeUpdateHooks, hiveUserDemographicHook)
	case boil.BeforeDeleteHook:
		hiveUserDemographicBeforeDeleteHooks = append(hiveUserDemographicBeforeDeleteHooks, hiveUserDemographicHook)
	case boil.BeforeUpsertHook:
		hiveUserDemographicBeforeUpsertHooks = append(hiveUserDemographicBeforeUpsertHooks, hiveUserDemographicHook)
	case boil.AfterInsertHook:
		hiveUserDemographicAfterInsertHooks = append(hiveUserDemographicAfterInsertHooks, hiveUserDemographicHook)
	case boil.AfterSelectHook:
		hiveUserDemographicAfterSelectHooks = append(hiveUserDemographicAfterSelectHooks, hiveUserDemographicHook)
	case boil.AfterUpdateHook:
		hiveUserDemographicAfterUpdateHooks = append(hiveUserDemographicAfterUpdateHooks, hiveUserDemographicHook)
	case boil.AfterDeleteHook:
		hiveUserDemographicAfterDeleteHooks = append(hiveUserDemographicAfterDeleteHooks, hiveUserDemographicHook)
	case boil.AfterUpsertHook:
		hiveUserDemographicAfterUpsertHooks = append(hiveUserDemographicAfterUpsertHooks, hiveUserDemographicHook)
	}
}

// One returns a single hiveUserDemographic record from the query.
func (q hiveUserDemographicQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HiveUserDemographic, error) {
	o := &HiveUserDemographic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for hive_user_demographic")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HiveUserDemographic records from the query.
func (q hiveUserDemographicQuery) All(ctx context.Context, exec boil.ContextExecutor) (HiveUserDemographicSlice, error) {
	var o []*HiveUserDemographic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to HiveUserDemographic slice")
	}

	if len(hiveUserDemographicAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HiveUserDemographic records in the query.
func (q hiveUserDemographicQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count hive_user_demographic rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hiveUserDemographicQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if hive_user_demographic exists")
	}

	return count > 0, nil
}

// Hive pointed to by the foreign key.
func (o *HiveUserDemographic) Hive(mods ...qm.QueryMod) hiveQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`hive_id` = ?", o.HiveID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Hives(queryMods...)
	queries.SetFrom(query.Query, "`hive`")

	return query
}

// Question pointed to by the foreign key.
func (o *HiveUserDemographic) Question(mods ...qm.QueryMod) questionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`question_id` = ?", o.QuestionID),
	}

	queryMods = append(queryMods, mods...)

	query := Questions(queryMods...)
	queries.SetFrom(query.Query, "`question`")

	return query
}

// Answer pointed to by the foreign key.
func (o *HiveUserDemographic) Answer(mods ...qm.QueryMod) answerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`answer_id` = ?", o.AnswerID),
	}

	queryMods = append(queryMods, mods...)

	query := Answers(queryMods...)
	queries.SetFrom(query.Query, "`answer`")

	return query
}

// LoadHive allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hiveUserDemographicL) LoadHive(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHiveUserDemographic interface{}, mods queries.Applicator) error {
	var slice []*HiveUserDemographic
	var object *HiveUserDemographic

	if singular {
		object = maybeHiveUserDemographic.(*HiveUserDemographic)
	} else {
		slice = *maybeHiveUserDemographic.(*[]*HiveUserDemographic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveUserDemographicR{}
		}
		args = append(args, object.HiveID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveUserDemographicR{}
			}

			for _, a := range args {
				if a == obj.HiveID {
					continue Outer
				}
			}

			args = append(args, obj.HiveID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hive`),
		qm.WhereIn(`hive.hive_id in ?`, args...),
		qmhelper.WhereIsNull(`hive.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Hive")
	}

	var resultSlice []*Hive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Hive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hive")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hive")
	}

	if len(hiveUserDemographicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Hive = foreign
		if foreign.R == nil {
			foreign.R = &hiveR{}
		}
		foreign.R.HiveUserDemographics = append(foreign.R.HiveUserDemographics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HiveID == foreign.HiveID {
				local.R.Hive = foreign
				if foreign.R == nil {
					foreign.R = &hiveR{}
				}
				foreign.R.HiveUserDemographics = append(foreign.R.HiveUserDemographics, local)
				break
			}
		}
	}

	return nil
}

// LoadQuestion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hiveUserDemographicL) LoadQuestion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHiveUserDemographic interface{}, mods queries.Applicator) error {
	var slice []*HiveUserDemographic
	var object *HiveUserDemographic

	if singular {
		object = maybeHiveUserDemographic.(*HiveUserDemographic)
	} else {
		slice = *maybeHiveUserDemographic.(*[]*HiveUserDemographic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveUserDemographicR{}
		}
		args = append(args, object.QuestionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveUserDemographicR{}
			}

			for _, a := range args {
				if a == obj.QuestionID {
					continue Outer
				}
			}

			args = append(args, obj.QuestionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`question`),
		qm.WhereIn(`question.question_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Question")
	}

	var resultSlice []*Question
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Question")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for question")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for question")
	}

	if len(hiveUserDemographicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Question = foreign
		if foreign.R == nil {
			foreign.R = &questionR{}
		}
		foreign.R.HiveUserDemographics = append(foreign.R.HiveUserDemographics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QuestionID == foreign.QuestionID {
				local.R.Question = foreign
				if foreign.R == nil {
					foreign.R = &questionR{}
				}
				foreign.R.HiveUserDemographics = append(foreign.R.HiveUserDemographics, local)
				break
			}
		}
	}

	return nil
}

// LoadAnswer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hiveUserDemographicL) LoadAnswer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHiveUserDemographic interface{}, mods queries.Applicator) error {
	var slice []*HiveUserDemographic
	var object *HiveUserDemographic

	if singular {
		object = maybeHiveUserDemographic.(*HiveUserDemographic)
	} else {
		slice = *maybeHiveUserDemographic.(*[]*HiveUserDemographic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveUserDemographicR{}
		}
		args = append(args, object.AnswerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveUserDemographicR{}
			}

			for _, a := range args {
				if a == obj.AnswerID {
					continue Outer
				}
			}

			args = append(args, obj.AnswerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`answer`),
		qm.WhereIn(`answer.answer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Answer")
	}

	var resultSlice []*Answer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Answer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for answer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for answer")
	}

	if len(hiveUserDemographicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Answer = foreign
		if foreign.R == nil {
			foreign.R = &answerR{}
		}
		foreign.R.HiveUserDemographics = append(foreign.R.HiveUserDemographics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AnswerID == foreign.AnswerID {
				local.R.Answer = foreign
				if foreign.R == nil {
					foreign.R = &answerR{}
				}
				foreign.R.HiveUserDemographics = append(foreign.R.HiveUserDemographics, local)
				break
			}
		}
	}

	return nil
}

// SetHive of the hiveUserDemographic to the related item.
// Sets o.R.Hive to related.
// Adds o to related.R.HiveUserDemographics.
func (o *HiveUserDemographic) SetHive(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Hive) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `hive_user_demographic` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"hive_id"}),
		strmangle.WhereClause("`", "`", 0, hiveUserDemographicPrimaryKeyColumns),
	)
	values := []interface{}{related.HiveID, o.HiveID, o.QuestionID, o.AnswerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HiveID = related.HiveID
	if o.R == nil {
		o.R = &hiveUserDemographicR{
			Hive: related,
		}
	} else {
		o.R.Hive = related
	}

	if related.R == nil {
		related.R = &hiveR{
			HiveUserDemographics: HiveUserDemographicSlice{o},
		}
	} else {
		related.R.HiveUserDemographics = append(related.R.HiveUserDemographics, o)
	}

	return nil
}

// SetQuestion of the hiveUserDemographic to the related item.
// Sets o.R.Question to related.
// Adds o to related.R.HiveUserDemographics.
func (o *HiveUserDemographic) SetQuestion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Question) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `hive_user_demographic` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"question_id"}),
		strmangle.WhereClause("`", "`", 0, hiveUserDemographicPrimaryKeyColumns),
	)
	values := []interface{}{related.QuestionID, o.HiveID, o.QuestionID, o.AnswerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QuestionID = related.QuestionID
	if o.R == nil {
		o.R = &hiveUserDemographicR{
			Question: related,
		}
	} else {
		o.R.Question = related
	}

	if related.R == nil {
		related.R = &questionR{
			HiveUserDemographics: HiveUserDemographicSlice{o},
		}
	} else {
		related.R.HiveUserDemographics = append(related.R.HiveUserDemographics, o)
	}

	return nil
}

// SetAnswer of the hiveUserDemographic to the related item.
// Sets o.R.Answer to related.
// Adds o to related.R.HiveUserDemographics.
func (o *HiveUserDemographic) SetAnswer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Answer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `hive_user_demographic` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"answer_id"}),
		strmangle.WhereClause("`", "`", 0, hiveUserDemographicPrimaryKeyColumns),
	)
	values := []interface{}{related.AnswerID, o.HiveID, o.QuestionID, o.AnswerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AnswerID = related.AnswerID
	if o.R == nil {
		o.R = &hiveUserDemographicR{
			Answer: related,
		}
	} else {
		o.R.Answer = related
	}

	if related.R == nil {
		related.R = &answerR{
			HiveUserDemographics: HiveUserDemographicSlice{o},
		}
	} else {
		related.R.HiveUserDemographics = append(related.R.HiveUserDemographics, o)
	}

	return nil
}

// HiveUserDemographics retrieves all the records using an executor.
func HiveUserDemographics(mods ...qm.QueryMod) hiveUserDemographicQuery {
	mods = append(mods, qm.From("`hive_user_demographic`"))
	return hiveUserDemographicQuery{NewQuery(mods...)}
}

// FindHiveUserDemographic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHiveUserDemographic(ctx context.Context, exec boil.ContextExecutor, hiveID uint64, questionID uint, answerID uint, selectCols ...string) (*HiveUserDemographic, error) {
	hiveUserDemographicObj := &HiveUserDemographic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `hive_user_demographic` where `hive_id`=? AND `question_id`=? AND `answer_id`=?", sel,
	)

	q := queries.Raw(query, hiveID, questionID, answerID)

	err := q.Bind(ctx, exec, hiveUserDemographicObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from hive_user_demographic")
	}

	if err = hiveUserDemographicObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hiveUserDemographicObj, err
	}

	return hiveUserDemographicObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HiveUserDemographic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no hive_user_demographic provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hiveUserDemographicColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hiveUserDemographicInsertCacheMut.RLock()
	cache, cached := hiveUserDemographicInsertCache[key]
	hiveUserDemographicInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hiveUserDemographicAllColumns,
			hiveUserDemographicColumnsWithDefault,
			hiveUserDemographicColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hiveUserDemographicType, hiveUserDemographicMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hiveUserDemographicType, hiveUserDemographicMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `hive_user_demographic` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `hive_user_demographic` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `hive_user_demographic` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, hiveUserDemographicPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into hive_user_demographic")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.HiveID,
		o.QuestionID,
		o.AnswerID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for hive_user_demographic")
	}

CacheNoHooks:
	if !cached {
		hiveUserDemographicInsertCacheMut.Lock()
		hiveUserDemographicInsertCache[key] = cache
		hiveUserDemographicInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HiveUserDemographic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HiveUserDemographic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hiveUserDemographicUpdateCacheMut.RLock()
	cache, cached := hiveUserDemographicUpdateCache[key]
	hiveUserDemographicUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hiveUserDemographicAllColumns,
			hiveUserDemographicPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update hive_user_demographic, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `hive_user_demographic` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, hiveUserDemographicPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hiveUserDemographicType, hiveUserDemographicMapping, append(wl, hiveUserDemographicPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update hive_user_demographic row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for hive_user_demographic")
	}

	if !cached {
		hiveUserDemographicUpdateCacheMut.Lock()
		hiveUserDemographicUpdateCache[key] = cache
		hiveUserDemographicUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hiveUserDemographicQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for hive_user_demographic")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for hive_user_demographic")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HiveUserDemographicSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hiveUserDemographicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `hive_user_demographic` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hiveUserDemographicPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in hiveUserDemographic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all hiveUserDemographic")
	}
	return rowsAff, nil
}

var mySQLHiveUserDemographicUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HiveUserDemographic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no hive_user_demographic provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hiveUserDemographicColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLHiveUserDemographicUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hiveUserDemographicUpsertCacheMut.RLock()
	cache, cached := hiveUserDemographicUpsertCache[key]
	hiveUserDemographicUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			hiveUserDemographicAllColumns,
			hiveUserDemographicColumnsWithDefault,
			hiveUserDemographicColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			hiveUserDemographicAllColumns,
			hiveUserDemographicPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert hive_user_demographic, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`hive_user_demographic`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `hive_user_demographic` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(hiveUserDemographicType, hiveUserDemographicMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hiveUserDemographicType, hiveUserDemographicMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for hive_user_demographic")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(hiveUserDemographicType, hiveUserDemographicMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for hive_user_demographic")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for hive_user_demographic")
	}

CacheNoHooks:
	if !cached {
		hiveUserDemographicUpsertCacheMut.Lock()
		hiveUserDemographicUpsertCache[key] = cache
		hiveUserDemographicUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HiveUserDemographic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HiveUserDemographic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no HiveUserDemographic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hiveUserDemographicPrimaryKeyMapping)
	sql := "DELETE FROM `hive_user_demographic` WHERE `hive_id`=? AND `question_id`=? AND `answer_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from hive_user_demographic")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for hive_user_demographic")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hiveUserDemographicQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no hiveUserDemographicQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from hive_user_demographic")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for hive_user_demographic")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HiveUserDemographicSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hiveUserDemographicBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hiveUserDemographicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `hive_user_demographic` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hiveUserDemographicPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from hiveUserDemographic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for hive_user_demographic")
	}

	if len(hiveUserDemographicAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HiveUserDemographic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHiveUserDemographic(ctx, exec, o.HiveID, o.QuestionID, o.AnswerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HiveUserDemographicSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HiveUserDemographicSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hiveUserDemographicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `hive_user_demographic`.* FROM `hive_user_demographic` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hiveUserDemographicPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in HiveUserDemographicSlice")
	}

	*o = slice

	return nil
}

// HiveUserDemographicExists checks if the HiveUserDemographic row exists.
func HiveUserDemographicExists(ctx context.Context, exec boil.ContextExecutor, hiveID uint64, questionID uint, answerID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `hive_user_demographic` where `hive_id`=? AND `question_id`=? AND `answer_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, hiveID, questionID, answerID)
	}
	row := exec.QueryRowContext(ctx, sql, hiveID, questionID, answerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if hive_user_demographic exists")
	}

	return exists, nil
}
