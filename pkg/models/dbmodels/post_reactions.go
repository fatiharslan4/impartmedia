// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostReaction is an object representing the database table.
type PostReaction struct {
	PostID         uint64      `boil:"post_id" json:"post_id" toml:"post_id" yaml:"post_id"`
	ImpartWealthID string      `boil:"impart_wealth_id" json:"impart_wealth_id" toml:"impart_wealth_id" yaml:"impart_wealth_id"`
	Upvoted        bool        `boil:"upvoted" json:"upvoted" toml:"upvoted" yaml:"upvoted"`
	Downvoted      bool        `boil:"downvoted" json:"downvoted" toml:"downvoted" yaml:"downvoted"`
	Reported       bool        `boil:"reported" json:"reported" toml:"reported" yaml:"reported"`
	ReportedReason null.String `boil:"reported_reason" json:"reported_reason,omitempty" toml:"reported_reason" yaml:"reported_reason,omitempty"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *postReactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postReactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostReactionColumns = struct {
	PostID         string
	ImpartWealthID string
	Upvoted        string
	Downvoted      string
	Reported       string
	ReportedReason string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	PostID:         "post_id",
	ImpartWealthID: "impart_wealth_id",
	Upvoted:        "upvoted",
	Downvoted:      "downvoted",
	Reported:       "reported",
	ReportedReason: "reported_reason",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

// Generated where

var PostReactionWhere = struct {
	PostID         whereHelperuint64
	ImpartWealthID whereHelperstring
	Upvoted        whereHelperbool
	Downvoted      whereHelperbool
	Reported       whereHelperbool
	ReportedReason whereHelpernull_String
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	PostID:         whereHelperuint64{field: "`post_reactions`.`post_id`"},
	ImpartWealthID: whereHelperstring{field: "`post_reactions`.`impart_wealth_id`"},
	Upvoted:        whereHelperbool{field: "`post_reactions`.`upvoted`"},
	Downvoted:      whereHelperbool{field: "`post_reactions`.`downvoted`"},
	Reported:       whereHelperbool{field: "`post_reactions`.`reported`"},
	ReportedReason: whereHelpernull_String{field: "`post_reactions`.`reported_reason`"},
	CreatedAt:      whereHelpertime_Time{field: "`post_reactions`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`post_reactions`.`updated_at`"},
	DeletedAt:      whereHelpernull_Time{field: "`post_reactions`.`deleted_at`"},
}

// PostReactionRels is where relationship names are stored.
var PostReactionRels = struct {
	ImpartWealth string
	Post         string
}{
	ImpartWealth: "ImpartWealth",
	Post:         "Post",
}

// postReactionR is where relationships are stored.
type postReactionR struct {
	ImpartWealth *User `boil:"ImpartWealth" json:"ImpartWealth" toml:"ImpartWealth" yaml:"ImpartWealth"`
	Post         *Post `boil:"Post" json:"Post" toml:"Post" yaml:"Post"`
}

// NewStruct creates a new relationship struct
func (*postReactionR) NewStruct() *postReactionR {
	return &postReactionR{}
}

// postReactionL is where Load methods for each relationship are stored.
type postReactionL struct{}

var (
	postReactionAllColumns            = []string{"post_id", "impart_wealth_id", "upvoted", "downvoted", "reported", "reported_reason", "created_at", "updated_at", "deleted_at"}
	postReactionColumnsWithoutDefault = []string{"post_id", "impart_wealth_id", "reported_reason", "created_at", "updated_at", "deleted_at"}
	postReactionColumnsWithDefault    = []string{"upvoted", "downvoted", "reported"}
	postReactionPrimaryKeyColumns     = []string{"post_id", "impart_wealth_id"}
)

type (
	// PostReactionSlice is an alias for a slice of pointers to PostReaction.
	// This should generally be used opposed to []PostReaction.
	PostReactionSlice []*PostReaction
	// PostReactionHook is the signature for custom PostReaction hook methods
	PostReactionHook func(context.Context, boil.ContextExecutor, *PostReaction) error

	postReactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postReactionType                 = reflect.TypeOf(&PostReaction{})
	postReactionMapping              = queries.MakeStructMapping(postReactionType)
	postReactionPrimaryKeyMapping, _ = queries.BindMapping(postReactionType, postReactionMapping, postReactionPrimaryKeyColumns)
	postReactionInsertCacheMut       sync.RWMutex
	postReactionInsertCache          = make(map[string]insertCache)
	postReactionUpdateCacheMut       sync.RWMutex
	postReactionUpdateCache          = make(map[string]updateCache)
	postReactionUpsertCacheMut       sync.RWMutex
	postReactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postReactionBeforeInsertHooks []PostReactionHook
var postReactionBeforeUpdateHooks []PostReactionHook
var postReactionBeforeDeleteHooks []PostReactionHook
var postReactionBeforeUpsertHooks []PostReactionHook

var postReactionAfterInsertHooks []PostReactionHook
var postReactionAfterSelectHooks []PostReactionHook
var postReactionAfterUpdateHooks []PostReactionHook
var postReactionAfterDeleteHooks []PostReactionHook
var postReactionAfterUpsertHooks []PostReactionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostReaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postReactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostReaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postReactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostReaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postReactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostReaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postReactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostReaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postReactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostReaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postReactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostReaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postReactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostReaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postReactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostReaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postReactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostReactionHook registers your hook function for all future operations.
func AddPostReactionHook(hookPoint boil.HookPoint, postReactionHook PostReactionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		postReactionBeforeInsertHooks = append(postReactionBeforeInsertHooks, postReactionHook)
	case boil.BeforeUpdateHook:
		postReactionBeforeUpdateHooks = append(postReactionBeforeUpdateHooks, postReactionHook)
	case boil.BeforeDeleteHook:
		postReactionBeforeDeleteHooks = append(postReactionBeforeDeleteHooks, postReactionHook)
	case boil.BeforeUpsertHook:
		postReactionBeforeUpsertHooks = append(postReactionBeforeUpsertHooks, postReactionHook)
	case boil.AfterInsertHook:
		postReactionAfterInsertHooks = append(postReactionAfterInsertHooks, postReactionHook)
	case boil.AfterSelectHook:
		postReactionAfterSelectHooks = append(postReactionAfterSelectHooks, postReactionHook)
	case boil.AfterUpdateHook:
		postReactionAfterUpdateHooks = append(postReactionAfterUpdateHooks, postReactionHook)
	case boil.AfterDeleteHook:
		postReactionAfterDeleteHooks = append(postReactionAfterDeleteHooks, postReactionHook)
	case boil.AfterUpsertHook:
		postReactionAfterUpsertHooks = append(postReactionAfterUpsertHooks, postReactionHook)
	}
}

// One returns a single postReaction record from the query.
func (q postReactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostReaction, error) {
	o := &PostReaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for post_reactions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostReaction records from the query.
func (q postReactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostReactionSlice, error) {
	var o []*PostReaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to PostReaction slice")
	}

	if len(postReactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostReaction records in the query.
func (q postReactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count post_reactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postReactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if post_reactions exists")
	}

	return count > 0, nil
}

// ImpartWealth pointed to by the foreign key.
func (o *PostReaction) ImpartWealth(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`impart_wealth_id` = ?", o.ImpartWealthID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// Post pointed to by the foreign key.
func (o *PostReaction) Post(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`post_id` = ?", o.PostID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Posts(queryMods...)
	queries.SetFrom(query.Query, "`post`")

	return query
}

// LoadImpartWealth allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postReactionL) LoadImpartWealth(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostReaction interface{}, mods queries.Applicator) error {
	var slice []*PostReaction
	var object *PostReaction

	if singular {
		object = maybePostReaction.(*PostReaction)
	} else {
		slice = *maybePostReaction.(*[]*PostReaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &postReactionR{}
		}
		args = append(args, object.ImpartWealthID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postReactionR{}
			}

			for _, a := range args {
				if a == obj.ImpartWealthID {
					continue Outer
				}
			}

			args = append(args, obj.ImpartWealthID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.impart_wealth_id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(postReactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ImpartWealth = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ImpartWealthPostReactions = append(foreign.R.ImpartWealthPostReactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImpartWealthID == foreign.ImpartWealthID {
				local.R.ImpartWealth = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ImpartWealthPostReactions = append(foreign.R.ImpartWealthPostReactions, local)
				break
			}
		}
	}

	return nil
}

// LoadPost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postReactionL) LoadPost(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostReaction interface{}, mods queries.Applicator) error {
	var slice []*PostReaction
	var object *PostReaction

	if singular {
		object = maybePostReaction.(*PostReaction)
	} else {
		slice = *maybePostReaction.(*[]*PostReaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &postReactionR{}
		}
		args = append(args, object.PostID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postReactionR{}
			}

			for _, a := range args {
				if a == obj.PostID {
					continue Outer
				}
			}

			args = append(args, obj.PostID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`post`),
		qm.WhereIn(`post.post_id in ?`, args...),
		qmhelper.WhereIsNull(`post.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for post")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post")
	}

	if len(postReactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Post = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.PostReactions = append(foreign.R.PostReactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PostID == foreign.PostID {
				local.R.Post = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.PostReactions = append(foreign.R.PostReactions, local)
				break
			}
		}
	}

	return nil
}

// SetImpartWealth of the postReaction to the related item.
// Sets o.R.ImpartWealth to related.
// Adds o to related.R.ImpartWealthPostReactions.
func (o *PostReaction) SetImpartWealth(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `post_reactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"impart_wealth_id"}),
		strmangle.WhereClause("`", "`", 0, postReactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ImpartWealthID, o.PostID, o.ImpartWealthID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImpartWealthID = related.ImpartWealthID
	if o.R == nil {
		o.R = &postReactionR{
			ImpartWealth: related,
		}
	} else {
		o.R.ImpartWealth = related
	}

	if related.R == nil {
		related.R = &userR{
			ImpartWealthPostReactions: PostReactionSlice{o},
		}
	} else {
		related.R.ImpartWealthPostReactions = append(related.R.ImpartWealthPostReactions, o)
	}

	return nil
}

// SetPost of the postReaction to the related item.
// Sets o.R.Post to related.
// Adds o to related.R.PostReactions.
func (o *PostReaction) SetPost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `post_reactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"post_id"}),
		strmangle.WhereClause("`", "`", 0, postReactionPrimaryKeyColumns),
	)
	values := []interface{}{related.PostID, o.PostID, o.ImpartWealthID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PostID = related.PostID
	if o.R == nil {
		o.R = &postReactionR{
			Post: related,
		}
	} else {
		o.R.Post = related
	}

	if related.R == nil {
		related.R = &postR{
			PostReactions: PostReactionSlice{o},
		}
	} else {
		related.R.PostReactions = append(related.R.PostReactions, o)
	}

	return nil
}

// PostReactions retrieves all the records using an executor.
func PostReactions(mods ...qm.QueryMod) postReactionQuery {
	mods = append(mods, qm.From("`post_reactions`"), qmhelper.WhereIsNull("`post_reactions`.`deleted_at`"))
	return postReactionQuery{NewQuery(mods...)}
}

// FindPostReaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostReaction(ctx context.Context, exec boil.ContextExecutor, postID uint64, impartWealthID string, selectCols ...string) (*PostReaction, error) {
	postReactionObj := &PostReaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `post_reactions` where `post_id`=? AND `impart_wealth_id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, postID, impartWealthID)

	err := q.Bind(ctx, exec, postReactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from post_reactions")
	}

	return postReactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostReaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no post_reactions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postReactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postReactionInsertCacheMut.RLock()
	cache, cached := postReactionInsertCache[key]
	postReactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postReactionAllColumns,
			postReactionColumnsWithDefault,
			postReactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postReactionType, postReactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postReactionType, postReactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `post_reactions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `post_reactions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `post_reactions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, postReactionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into post_reactions")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PostID,
		o.ImpartWealthID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for post_reactions")
	}

CacheNoHooks:
	if !cached {
		postReactionInsertCacheMut.Lock()
		postReactionInsertCache[key] = cache
		postReactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostReaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostReaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postReactionUpdateCacheMut.RLock()
	cache, cached := postReactionUpdateCache[key]
	postReactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postReactionAllColumns,
			postReactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update post_reactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `post_reactions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, postReactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postReactionType, postReactionMapping, append(wl, postReactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update post_reactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for post_reactions")
	}

	if !cached {
		postReactionUpdateCacheMut.Lock()
		postReactionUpdateCache[key] = cache
		postReactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postReactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for post_reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for post_reactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostReactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postReactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `post_reactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postReactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in postReaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all postReaction")
	}
	return rowsAff, nil
}

var mySQLPostReactionUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostReaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no post_reactions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postReactionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPostReactionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postReactionUpsertCacheMut.RLock()
	cache, cached := postReactionUpsertCache[key]
	postReactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			postReactionAllColumns,
			postReactionColumnsWithDefault,
			postReactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			postReactionAllColumns,
			postReactionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert post_reactions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`post_reactions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `post_reactions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(postReactionType, postReactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postReactionType, postReactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for post_reactions")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(postReactionType, postReactionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for post_reactions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for post_reactions")
	}

CacheNoHooks:
	if !cached {
		postReactionUpsertCacheMut.Lock()
		postReactionUpsertCache[key] = cache
		postReactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PostReaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostReaction) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no PostReaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postReactionPrimaryKeyMapping)
		sql = "DELETE FROM `post_reactions` WHERE `post_id`=? AND `impart_wealth_id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `post_reactions` SET %s WHERE `post_id`=? AND `impart_wealth_id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(postReactionType, postReactionMapping, append(wl, postReactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from post_reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for post_reactions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postReactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no postReactionQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from post_reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for post_reactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostReactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postReactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postReactionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `post_reactions` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postReactionPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postReactionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `post_reactions` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postReactionPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from postReaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for post_reactions")
	}

	if len(postReactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostReaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostReaction(ctx, exec, o.PostID, o.ImpartWealthID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostReactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostReactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postReactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `post_reactions`.* FROM `post_reactions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, postReactionPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in PostReactionSlice")
	}

	*o = slice

	return nil
}

// PostReactionExists checks if the PostReaction row exists.
func PostReactionExists(ctx context.Context, exec boil.ContextExecutor, postID uint64, impartWealthID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `post_reactions` where `post_id`=? AND `impart_wealth_id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, postID, impartWealthID)
	}
	row := exec.QueryRowContext(ctx, sql, postID, impartWealthID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if post_reactions exists")
	}

	return exists, nil
}
