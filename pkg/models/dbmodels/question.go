// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Question is an object representing the database table.
type Question struct {
	QuestionID      uint   `boil:"question_id" json:"question_id" toml:"question_id" yaml:"question_id"`
	QuestionnaireID uint   `boil:"questionnaire_id" json:"questionnaire_id" toml:"questionnaire_id" yaml:"questionnaire_id"`
	QuestionName    string `boil:"question_name" json:"question_name" toml:"question_name" yaml:"question_name"`
	SortOrder       uint   `boil:"sort_order" json:"sort_order" toml:"sort_order" yaml:"sort_order"`
	Text            string `boil:"text" json:"text" toml:"text" yaml:"text"`
	TypeID          string `boil:"type_id" json:"type_id" toml:"type_id" yaml:"type_id"`

	R *questionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L questionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var QuestionColumns = struct {
	QuestionID      string
	QuestionnaireID string
	QuestionName    string
	SortOrder       string
	Text            string
	TypeID          string
}{
	QuestionID:      "question_id",
	QuestionnaireID: "questionnaire_id",
	QuestionName:    "question_name",
	SortOrder:       "sort_order",
	Text:            "text",
	TypeID:          "type_id",
}

var QuestionTableColumns = struct {
	QuestionID      string
	QuestionnaireID string
	QuestionName    string
	SortOrder       string
	Text            string
	TypeID          string
}{
	QuestionID:      "question.question_id",
	QuestionnaireID: "question.questionnaire_id",
	QuestionName:    "question.question_name",
	SortOrder:       "question.sort_order",
	Text:            "question.text",
	TypeID:          "question.type_id",
}

// Generated where

var QuestionWhere = struct {
	QuestionID      whereHelperuint
	QuestionnaireID whereHelperuint
	QuestionName    whereHelperstring
	SortOrder       whereHelperuint
	Text            whereHelperstring
	TypeID          whereHelperstring
}{
	QuestionID:      whereHelperuint{field: "`question`.`question_id`"},
	QuestionnaireID: whereHelperuint{field: "`question`.`questionnaire_id`"},
	QuestionName:    whereHelperstring{field: "`question`.`question_name`"},
	SortOrder:       whereHelperuint{field: "`question`.`sort_order`"},
	Text:            whereHelperstring{field: "`question`.`text`"},
	TypeID:          whereHelperstring{field: "`question`.`type_id`"},
}

// QuestionRels is where relationship names are stored.
var QuestionRels = struct {
	Questionnaire        string
	Type                 string
	Answers              string
	HiveRulesCriteria    string
	HiveUserDemographics string
}{
	Questionnaire:        "Questionnaire",
	Type:                 "Type",
	Answers:              "Answers",
	HiveRulesCriteria:    "HiveRulesCriteria",
	HiveUserDemographics: "HiveUserDemographics",
}

// questionR is where relationships are stored.
type questionR struct {
	Questionnaire        *Questionnaire           `boil:"Questionnaire" json:"Questionnaire" toml:"Questionnaire" yaml:"Questionnaire"`
	Type                 *QuestionType            `boil:"Type" json:"Type" toml:"Type" yaml:"Type"`
	Answers              AnswerSlice              `boil:"Answers" json:"Answers" toml:"Answers" yaml:"Answers"`
	HiveRulesCriteria    HiveRulesCriteriumSlice  `boil:"HiveRulesCriteria" json:"HiveRulesCriteria" toml:"HiveRulesCriteria" yaml:"HiveRulesCriteria"`
	HiveUserDemographics HiveUserDemographicSlice `boil:"HiveUserDemographics" json:"HiveUserDemographics" toml:"HiveUserDemographics" yaml:"HiveUserDemographics"`
}

// NewStruct creates a new relationship struct
func (*questionR) NewStruct() *questionR {
	return &questionR{}
}

// questionL is where Load methods for each relationship are stored.
type questionL struct{}

var (
	questionAllColumns            = []string{"question_id", "questionnaire_id", "question_name", "sort_order", "text", "type_id"}
	questionColumnsWithoutDefault = []string{"questionnaire_id", "question_name", "sort_order", "text", "type_id"}
	questionColumnsWithDefault    = []string{"question_id"}
	questionPrimaryKeyColumns     = []string{"question_id"}
)

type (
	// QuestionSlice is an alias for a slice of pointers to Question.
	// This should almost always be used instead of []Question.
	QuestionSlice []*Question
	// QuestionHook is the signature for custom Question hook methods
	QuestionHook func(context.Context, boil.ContextExecutor, *Question) error

	questionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	questionType                 = reflect.TypeOf(&Question{})
	questionMapping              = queries.MakeStructMapping(questionType)
	questionPrimaryKeyMapping, _ = queries.BindMapping(questionType, questionMapping, questionPrimaryKeyColumns)
	questionInsertCacheMut       sync.RWMutex
	questionInsertCache          = make(map[string]insertCache)
	questionUpdateCacheMut       sync.RWMutex
	questionUpdateCache          = make(map[string]updateCache)
	questionUpsertCacheMut       sync.RWMutex
	questionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var questionBeforeInsertHooks []QuestionHook
var questionBeforeUpdateHooks []QuestionHook
var questionBeforeDeleteHooks []QuestionHook
var questionBeforeUpsertHooks []QuestionHook

var questionAfterInsertHooks []QuestionHook
var questionAfterSelectHooks []QuestionHook
var questionAfterUpdateHooks []QuestionHook
var questionAfterDeleteHooks []QuestionHook
var questionAfterUpsertHooks []QuestionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Question) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Question) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Question) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Question) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Question) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Question) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Question) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Question) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Question) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddQuestionHook registers your hook function for all future operations.
func AddQuestionHook(hookPoint boil.HookPoint, questionHook QuestionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		questionBeforeInsertHooks = append(questionBeforeInsertHooks, questionHook)
	case boil.BeforeUpdateHook:
		questionBeforeUpdateHooks = append(questionBeforeUpdateHooks, questionHook)
	case boil.BeforeDeleteHook:
		questionBeforeDeleteHooks = append(questionBeforeDeleteHooks, questionHook)
	case boil.BeforeUpsertHook:
		questionBeforeUpsertHooks = append(questionBeforeUpsertHooks, questionHook)
	case boil.AfterInsertHook:
		questionAfterInsertHooks = append(questionAfterInsertHooks, questionHook)
	case boil.AfterSelectHook:
		questionAfterSelectHooks = append(questionAfterSelectHooks, questionHook)
	case boil.AfterUpdateHook:
		questionAfterUpdateHooks = append(questionAfterUpdateHooks, questionHook)
	case boil.AfterDeleteHook:
		questionAfterDeleteHooks = append(questionAfterDeleteHooks, questionHook)
	case boil.AfterUpsertHook:
		questionAfterUpsertHooks = append(questionAfterUpsertHooks, questionHook)
	}
}

// One returns a single question record from the query.
func (q questionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Question, error) {
	o := &Question{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for question")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Question records from the query.
func (q questionQuery) All(ctx context.Context, exec boil.ContextExecutor) (QuestionSlice, error) {
	var o []*Question

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Question slice")
	}

	if len(questionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Question records in the query.
func (q questionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count question rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q questionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if question exists")
	}

	return count > 0, nil
}

// Questionnaire pointed to by the foreign key.
func (o *Question) Questionnaire(mods ...qm.QueryMod) questionnaireQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`questionnaire_id` = ?", o.QuestionnaireID),
	}

	queryMods = append(queryMods, mods...)

	query := Questionnaires(queryMods...)
	queries.SetFrom(query.Query, "`questionnaire`")

	return query
}

// Type pointed to by the foreign key.
func (o *Question) Type(mods ...qm.QueryMod) questionTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TypeID),
	}

	queryMods = append(queryMods, mods...)

	query := QuestionTypes(queryMods...)
	queries.SetFrom(query.Query, "`question_type`")

	return query
}

// Answers retrieves all the answer's Answers with an executor.
func (o *Question) Answers(mods ...qm.QueryMod) answerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`answer`.`question_id`=?", o.QuestionID),
	)

	query := Answers(queryMods...)
	queries.SetFrom(query.Query, "`answer`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`answer`.*"})
	}

	return query
}

// HiveRulesCriteria retrieves all the hive_rules_criterium's HiveRulesCriteria with an executor.
func (o *Question) HiveRulesCriteria(mods ...qm.QueryMod) hiveRulesCriteriumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`hive_rules_criteria`.`question_id`=?", o.QuestionID),
	)

	query := HiveRulesCriteria(queryMods...)
	queries.SetFrom(query.Query, "`hive_rules_criteria`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`hive_rules_criteria`.*"})
	}

	return query
}

// HiveUserDemographics retrieves all the hive_user_demographic's HiveUserDemographics with an executor.
func (o *Question) HiveUserDemographics(mods ...qm.QueryMod) hiveUserDemographicQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`hive_user_demographic`.`question_id`=?", o.QuestionID),
	)

	query := HiveUserDemographics(queryMods...)
	queries.SetFrom(query.Query, "`hive_user_demographic`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`hive_user_demographic`.*"})
	}

	return query
}

// LoadQuestionnaire allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (questionL) LoadQuestionnaire(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQuestion interface{}, mods queries.Applicator) error {
	var slice []*Question
	var object *Question

	if singular {
		object = maybeQuestion.(*Question)
	} else {
		slice = *maybeQuestion.(*[]*Question)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questionR{}
		}
		args = append(args, object.QuestionnaireID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questionR{}
			}

			for _, a := range args {
				if a == obj.QuestionnaireID {
					continue Outer
				}
			}

			args = append(args, obj.QuestionnaireID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`questionnaire`),
		qm.WhereIn(`questionnaire.questionnaire_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Questionnaire")
	}

	var resultSlice []*Questionnaire
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Questionnaire")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for questionnaire")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for questionnaire")
	}

	if len(questionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Questionnaire = foreign
		if foreign.R == nil {
			foreign.R = &questionnaireR{}
		}
		foreign.R.Questions = append(foreign.R.Questions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QuestionnaireID == foreign.QuestionnaireID {
				local.R.Questionnaire = foreign
				if foreign.R == nil {
					foreign.R = &questionnaireR{}
				}
				foreign.R.Questions = append(foreign.R.Questions, local)
				break
			}
		}
	}

	return nil
}

// LoadType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (questionL) LoadType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQuestion interface{}, mods queries.Applicator) error {
	var slice []*Question
	var object *Question

	if singular {
		object = maybeQuestion.(*Question)
	} else {
		slice = *maybeQuestion.(*[]*Question)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questionR{}
		}
		args = append(args, object.TypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questionR{}
			}

			for _, a := range args {
				if a == obj.TypeID {
					continue Outer
				}
			}

			args = append(args, obj.TypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`question_type`),
		qm.WhereIn(`question_type.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load QuestionType")
	}

	var resultSlice []*QuestionType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice QuestionType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for question_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for question_type")
	}

	if len(questionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Type = foreign
		if foreign.R == nil {
			foreign.R = &questionTypeR{}
		}
		foreign.R.TypeQuestions = append(foreign.R.TypeQuestions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TypeID == foreign.ID {
				local.R.Type = foreign
				if foreign.R == nil {
					foreign.R = &questionTypeR{}
				}
				foreign.R.TypeQuestions = append(foreign.R.TypeQuestions, local)
				break
			}
		}
	}

	return nil
}

// LoadAnswers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (questionL) LoadAnswers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQuestion interface{}, mods queries.Applicator) error {
	var slice []*Question
	var object *Question

	if singular {
		object = maybeQuestion.(*Question)
	} else {
		slice = *maybeQuestion.(*[]*Question)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questionR{}
		}
		args = append(args, object.QuestionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questionR{}
			}

			for _, a := range args {
				if a == obj.QuestionID {
					continue Outer
				}
			}

			args = append(args, obj.QuestionID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`answer`),
		qm.WhereIn(`answer.question_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load answer")
	}

	var resultSlice []*Answer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice answer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on answer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for answer")
	}

	if len(answerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Answers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &answerR{}
			}
			foreign.R.Question = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuestionID == foreign.QuestionID {
				local.R.Answers = append(local.R.Answers, foreign)
				if foreign.R == nil {
					foreign.R = &answerR{}
				}
				foreign.R.Question = local
				break
			}
		}
	}

	return nil
}

// LoadHiveRulesCriteria allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (questionL) LoadHiveRulesCriteria(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQuestion interface{}, mods queries.Applicator) error {
	var slice []*Question
	var object *Question

	if singular {
		object = maybeQuestion.(*Question)
	} else {
		slice = *maybeQuestion.(*[]*Question)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questionR{}
		}
		args = append(args, object.QuestionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questionR{}
			}

			for _, a := range args {
				if a == obj.QuestionID {
					continue Outer
				}
			}

			args = append(args, obj.QuestionID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hive_rules_criteria`),
		qm.WhereIn(`hive_rules_criteria.question_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hive_rules_criteria")
	}

	var resultSlice []*HiveRulesCriterium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hive_rules_criteria")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hive_rules_criteria")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hive_rules_criteria")
	}

	if len(hiveRulesCriteriumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HiveRulesCriteria = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hiveRulesCriteriumR{}
			}
			foreign.R.Question = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuestionID == foreign.QuestionID {
				local.R.HiveRulesCriteria = append(local.R.HiveRulesCriteria, foreign)
				if foreign.R == nil {
					foreign.R = &hiveRulesCriteriumR{}
				}
				foreign.R.Question = local
				break
			}
		}
	}

	return nil
}

// LoadHiveUserDemographics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (questionL) LoadHiveUserDemographics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQuestion interface{}, mods queries.Applicator) error {
	var slice []*Question
	var object *Question

	if singular {
		object = maybeQuestion.(*Question)
	} else {
		slice = *maybeQuestion.(*[]*Question)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questionR{}
		}
		args = append(args, object.QuestionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questionR{}
			}

			for _, a := range args {
				if a == obj.QuestionID {
					continue Outer
				}
			}

			args = append(args, obj.QuestionID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hive_user_demographic`),
		qm.WhereIn(`hive_user_demographic.question_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hive_user_demographic")
	}

	var resultSlice []*HiveUserDemographic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hive_user_demographic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hive_user_demographic")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hive_user_demographic")
	}

	if len(hiveUserDemographicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HiveUserDemographics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hiveUserDemographicR{}
			}
			foreign.R.Question = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuestionID == foreign.QuestionID {
				local.R.HiveUserDemographics = append(local.R.HiveUserDemographics, foreign)
				if foreign.R == nil {
					foreign.R = &hiveUserDemographicR{}
				}
				foreign.R.Question = local
				break
			}
		}
	}

	return nil
}

// SetQuestionnaire of the question to the related item.
// Sets o.R.Questionnaire to related.
// Adds o to related.R.Questions.
func (o *Question) SetQuestionnaire(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Questionnaire) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `question` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"questionnaire_id"}),
		strmangle.WhereClause("`", "`", 0, questionPrimaryKeyColumns),
	)
	values := []interface{}{related.QuestionnaireID, o.QuestionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QuestionnaireID = related.QuestionnaireID
	if o.R == nil {
		o.R = &questionR{
			Questionnaire: related,
		}
	} else {
		o.R.Questionnaire = related
	}

	if related.R == nil {
		related.R = &questionnaireR{
			Questions: QuestionSlice{o},
		}
	} else {
		related.R.Questions = append(related.R.Questions, o)
	}

	return nil
}

// SetType of the question to the related item.
// Sets o.R.Type to related.
// Adds o to related.R.TypeQuestions.
func (o *Question) SetType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *QuestionType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `question` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"type_id"}),
		strmangle.WhereClause("`", "`", 0, questionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.QuestionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TypeID = related.ID
	if o.R == nil {
		o.R = &questionR{
			Type: related,
		}
	} else {
		o.R.Type = related
	}

	if related.R == nil {
		related.R = &questionTypeR{
			TypeQuestions: QuestionSlice{o},
		}
	} else {
		related.R.TypeQuestions = append(related.R.TypeQuestions, o)
	}

	return nil
}

// AddAnswers adds the given related objects to the existing relationships
// of the question, optionally inserting them as new records.
// Appends related to o.R.Answers.
// Sets related.R.Question appropriately.
func (o *Question) AddAnswers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Answer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuestionID = o.QuestionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `answer` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"question_id"}),
				strmangle.WhereClause("`", "`", 0, answerPrimaryKeyColumns),
			)
			values := []interface{}{o.QuestionID, rel.AnswerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuestionID = o.QuestionID
		}
	}

	if o.R == nil {
		o.R = &questionR{
			Answers: related,
		}
	} else {
		o.R.Answers = append(o.R.Answers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &answerR{
				Question: o,
			}
		} else {
			rel.R.Question = o
		}
	}
	return nil
}

// AddHiveRulesCriteria adds the given related objects to the existing relationships
// of the question, optionally inserting them as new records.
// Appends related to o.R.HiveRulesCriteria.
// Sets related.R.Question appropriately.
func (o *Question) AddHiveRulesCriteria(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HiveRulesCriterium) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuestionID = o.QuestionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `hive_rules_criteria` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"question_id"}),
				strmangle.WhereClause("`", "`", 0, hiveRulesCriteriumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuestionID, rel.RuleID, rel.QuestionID, rel.AnswerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuestionID = o.QuestionID
		}
	}

	if o.R == nil {
		o.R = &questionR{
			HiveRulesCriteria: related,
		}
	} else {
		o.R.HiveRulesCriteria = append(o.R.HiveRulesCriteria, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hiveRulesCriteriumR{
				Question: o,
			}
		} else {
			rel.R.Question = o
		}
	}
	return nil
}

// AddHiveUserDemographics adds the given related objects to the existing relationships
// of the question, optionally inserting them as new records.
// Appends related to o.R.HiveUserDemographics.
// Sets related.R.Question appropriately.
func (o *Question) AddHiveUserDemographics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HiveUserDemographic) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuestionID = o.QuestionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `hive_user_demographic` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"question_id"}),
				strmangle.WhereClause("`", "`", 0, hiveUserDemographicPrimaryKeyColumns),
			)
			values := []interface{}{o.QuestionID, rel.HiveID, rel.QuestionID, rel.AnswerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuestionID = o.QuestionID
		}
	}

	if o.R == nil {
		o.R = &questionR{
			HiveUserDemographics: related,
		}
	} else {
		o.R.HiveUserDemographics = append(o.R.HiveUserDemographics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hiveUserDemographicR{
				Question: o,
			}
		} else {
			rel.R.Question = o
		}
	}
	return nil
}

// Questions retrieves all the records using an executor.
func Questions(mods ...qm.QueryMod) questionQuery {
	mods = append(mods, qm.From("`question`"))
	return questionQuery{NewQuery(mods...)}
}

// FindQuestion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindQuestion(ctx context.Context, exec boil.ContextExecutor, questionID uint, selectCols ...string) (*Question, error) {
	questionObj := &Question{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `question` where `question_id`=?", sel,
	)

	q := queries.Raw(query, questionID)

	err := q.Bind(ctx, exec, questionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from question")
	}

	if err = questionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return questionObj, err
	}

	return questionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Question) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no question provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	questionInsertCacheMut.RLock()
	cache, cached := questionInsertCache[key]
	questionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			questionAllColumns,
			questionColumnsWithDefault,
			questionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(questionType, questionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(questionType, questionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `question` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `question` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `question` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, questionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into question")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.QuestionID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == questionMapping["question_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.QuestionID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for question")
	}

CacheNoHooks:
	if !cached {
		questionInsertCacheMut.Lock()
		questionInsertCache[key] = cache
		questionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Question.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Question) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	questionUpdateCacheMut.RLock()
	cache, cached := questionUpdateCache[key]
	questionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			questionAllColumns,
			questionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update question, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `question` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, questionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(questionType, questionMapping, append(wl, questionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update question row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for question")
	}

	if !cached {
		questionUpdateCacheMut.Lock()
		questionUpdateCache[key] = cache
		questionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q questionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for question")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for question")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o QuestionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `question` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, questionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in question slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all question")
	}
	return rowsAff, nil
}

var mySQLQuestionUniqueColumns = []string{
	"question_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Question) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no question provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLQuestionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	questionUpsertCacheMut.RLock()
	cache, cached := questionUpsertCache[key]
	questionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			questionAllColumns,
			questionColumnsWithDefault,
			questionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			questionAllColumns,
			questionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert question, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`question`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `question` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(questionType, questionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(questionType, questionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for question")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.QuestionID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == questionMapping["question_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(questionType, questionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for question")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for question")
	}

CacheNoHooks:
	if !cached {
		questionUpsertCacheMut.Lock()
		questionUpsertCache[key] = cache
		questionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Question record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Question) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Question provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), questionPrimaryKeyMapping)
	sql := "DELETE FROM `question` WHERE `question_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from question")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for question")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q questionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no questionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from question")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for question")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o QuestionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(questionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `question` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, questionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from question slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for question")
	}

	if len(questionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Question) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindQuestion(ctx, exec, o.QuestionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QuestionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := QuestionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `question`.* FROM `question` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, questionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in QuestionSlice")
	}

	*o = slice

	return nil
}

// QuestionExists checks if the Question row exists.
func QuestionExists(ctx context.Context, exec boil.ContextExecutor, questionID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `question` where `question_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, questionID)
	}
	row := exec.QueryRowContext(ctx, sql, questionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if question exists")
	}

	return exists, nil
}
