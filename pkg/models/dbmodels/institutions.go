// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Institution is an object representing the database table.
type Institution struct {
	ID                 uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlaidInstitutionID string `boil:"plaid_institution_id" json:"plaid_institution_id" toml:"plaid_institution_id" yaml:"plaid_institution_id"`
	InstitutionName    string `boil:"institution_name" json:"institution_name" toml:"institution_name" yaml:"institution_name"`
	Logo               string `boil:"logo" json:"logo" toml:"logo" yaml:"logo"`
	Weburl             string `boil:"weburl" json:"weburl" toml:"weburl" yaml:"weburl"`

	R *institutionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L institutionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstitutionColumns = struct {
	ID                 string
	PlaidInstitutionID string
	InstitutionName    string
	Logo               string
	Weburl             string
}{
	ID:                 "id",
	PlaidInstitutionID: "plaid_institution_id",
	InstitutionName:    "institution_name",
	Logo:               "logo",
	Weburl:             "weburl",
}

var InstitutionTableColumns = struct {
	ID                 string
	PlaidInstitutionID string
	InstitutionName    string
	Logo               string
	Weburl             string
}{
	ID:                 "institutions.id",
	PlaidInstitutionID: "institutions.plaid_institution_id",
	InstitutionName:    "institutions.institution_name",
	Logo:               "institutions.logo",
	Weburl:             "institutions.weburl",
}

// Generated where

var InstitutionWhere = struct {
	ID                 whereHelperuint64
	PlaidInstitutionID whereHelperstring
	InstitutionName    whereHelperstring
	Logo               whereHelperstring
	Weburl             whereHelperstring
}{
	ID:                 whereHelperuint64{field: "`institutions`.`id`"},
	PlaidInstitutionID: whereHelperstring{field: "`institutions`.`plaid_institution_id`"},
	InstitutionName:    whereHelperstring{field: "`institutions`.`institution_name`"},
	Logo:               whereHelperstring{field: "`institutions`.`logo`"},
	Weburl:             whereHelperstring{field: "`institutions`.`weburl`"},
}

// InstitutionRels is where relationship names are stored.
var InstitutionRels = struct {
	UserInstitutions string
}{
	UserInstitutions: "UserInstitutions",
}

// institutionR is where relationships are stored.
type institutionR struct {
	UserInstitutions UserInstitutionSlice `boil:"UserInstitutions" json:"UserInstitutions" toml:"UserInstitutions" yaml:"UserInstitutions"`
}

// NewStruct creates a new relationship struct
func (*institutionR) NewStruct() *institutionR {
	return &institutionR{}
}

// institutionL is where Load methods for each relationship are stored.
type institutionL struct{}

var (
	institutionAllColumns            = []string{"id", "plaid_institution_id", "institution_name", "logo", "weburl"}
	institutionColumnsWithoutDefault = []string{"plaid_institution_id", "institution_name", "logo", "weburl"}
	institutionColumnsWithDefault    = []string{"id"}
	institutionPrimaryKeyColumns     = []string{"id"}
)

type (
	// InstitutionSlice is an alias for a slice of pointers to Institution.
	// This should almost always be used instead of []Institution.
	InstitutionSlice []*Institution
	// InstitutionHook is the signature for custom Institution hook methods
	InstitutionHook func(context.Context, boil.ContextExecutor, *Institution) error

	institutionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	institutionType                 = reflect.TypeOf(&Institution{})
	institutionMapping              = queries.MakeStructMapping(institutionType)
	institutionPrimaryKeyMapping, _ = queries.BindMapping(institutionType, institutionMapping, institutionPrimaryKeyColumns)
	institutionInsertCacheMut       sync.RWMutex
	institutionInsertCache          = make(map[string]insertCache)
	institutionUpdateCacheMut       sync.RWMutex
	institutionUpdateCache          = make(map[string]updateCache)
	institutionUpsertCacheMut       sync.RWMutex
	institutionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var institutionBeforeInsertHooks []InstitutionHook
var institutionBeforeUpdateHooks []InstitutionHook
var institutionBeforeDeleteHooks []InstitutionHook
var institutionBeforeUpsertHooks []InstitutionHook

var institutionAfterInsertHooks []InstitutionHook
var institutionAfterSelectHooks []InstitutionHook
var institutionAfterUpdateHooks []InstitutionHook
var institutionAfterDeleteHooks []InstitutionHook
var institutionAfterUpsertHooks []InstitutionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Institution) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range institutionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Institution) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range institutionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Institution) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range institutionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Institution) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range institutionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Institution) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range institutionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Institution) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range institutionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Institution) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range institutionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Institution) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range institutionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Institution) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range institutionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstitutionHook registers your hook function for all future operations.
func AddInstitutionHook(hookPoint boil.HookPoint, institutionHook InstitutionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		institutionBeforeInsertHooks = append(institutionBeforeInsertHooks, institutionHook)
	case boil.BeforeUpdateHook:
		institutionBeforeUpdateHooks = append(institutionBeforeUpdateHooks, institutionHook)
	case boil.BeforeDeleteHook:
		institutionBeforeDeleteHooks = append(institutionBeforeDeleteHooks, institutionHook)
	case boil.BeforeUpsertHook:
		institutionBeforeUpsertHooks = append(institutionBeforeUpsertHooks, institutionHook)
	case boil.AfterInsertHook:
		institutionAfterInsertHooks = append(institutionAfterInsertHooks, institutionHook)
	case boil.AfterSelectHook:
		institutionAfterSelectHooks = append(institutionAfterSelectHooks, institutionHook)
	case boil.AfterUpdateHook:
		institutionAfterUpdateHooks = append(institutionAfterUpdateHooks, institutionHook)
	case boil.AfterDeleteHook:
		institutionAfterDeleteHooks = append(institutionAfterDeleteHooks, institutionHook)
	case boil.AfterUpsertHook:
		institutionAfterUpsertHooks = append(institutionAfterUpsertHooks, institutionHook)
	}
}

// One returns a single institution record from the query.
func (q institutionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Institution, error) {
	o := &Institution{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for institutions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Institution records from the query.
func (q institutionQuery) All(ctx context.Context, exec boil.ContextExecutor) (InstitutionSlice, error) {
	var o []*Institution

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Institution slice")
	}

	if len(institutionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Institution records in the query.
func (q institutionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count institutions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q institutionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if institutions exists")
	}

	return count > 0, nil
}

// UserInstitutions retrieves all the user_institution's UserInstitutions with an executor.
func (o *Institution) UserInstitutions(mods ...qm.QueryMod) userInstitutionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_institutions`.`institution_id`=?", o.ID),
	)

	query := UserInstitutions(queryMods...)
	queries.SetFrom(query.Query, "`user_institutions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`user_institutions`.*"})
	}

	return query
}

// LoadUserInstitutions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (institutionL) LoadUserInstitutions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInstitution interface{}, mods queries.Applicator) error {
	var slice []*Institution
	var object *Institution

	if singular {
		object = maybeInstitution.(*Institution)
	} else {
		slice = *maybeInstitution.(*[]*Institution)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &institutionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &institutionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_institutions`),
		qm.WhereIn(`user_institutions.institution_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_institutions")
	}

	var resultSlice []*UserInstitution
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_institutions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_institutions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_institutions")
	}

	if len(userInstitutionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserInstitutions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userInstitutionR{}
			}
			foreign.R.Institution = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.InstitutionID {
				local.R.UserInstitutions = append(local.R.UserInstitutions, foreign)
				if foreign.R == nil {
					foreign.R = &userInstitutionR{}
				}
				foreign.R.Institution = local
				break
			}
		}
	}

	return nil
}

// AddUserInstitutions adds the given related objects to the existing relationships
// of the institution, optionally inserting them as new records.
// Appends related to o.R.UserInstitutions.
// Sets related.R.Institution appropriately.
func (o *Institution) AddUserInstitutions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserInstitution) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InstitutionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_institutions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"institution_id"}),
				strmangle.WhereClause("`", "`", 0, userInstitutionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserInstitutionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InstitutionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &institutionR{
			UserInstitutions: related,
		}
	} else {
		o.R.UserInstitutions = append(o.R.UserInstitutions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userInstitutionR{
				Institution: o,
			}
		} else {
			rel.R.Institution = o
		}
	}
	return nil
}

// Institutions retrieves all the records using an executor.
func Institutions(mods ...qm.QueryMod) institutionQuery {
	mods = append(mods, qm.From("`institutions`"))
	return institutionQuery{NewQuery(mods...)}
}

// FindInstitution retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstitution(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*Institution, error) {
	institutionObj := &Institution{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `institutions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, institutionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from institutions")
	}

	if err = institutionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return institutionObj, err
	}

	return institutionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Institution) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no institutions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(institutionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	institutionInsertCacheMut.RLock()
	cache, cached := institutionInsertCache[key]
	institutionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			institutionAllColumns,
			institutionColumnsWithDefault,
			institutionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(institutionType, institutionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(institutionType, institutionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `institutions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `institutions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `institutions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, institutionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into institutions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == institutionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for institutions")
	}

CacheNoHooks:
	if !cached {
		institutionInsertCacheMut.Lock()
		institutionInsertCache[key] = cache
		institutionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Institution.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Institution) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	institutionUpdateCacheMut.RLock()
	cache, cached := institutionUpdateCache[key]
	institutionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			institutionAllColumns,
			institutionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update institutions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `institutions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, institutionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(institutionType, institutionMapping, append(wl, institutionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update institutions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for institutions")
	}

	if !cached {
		institutionUpdateCacheMut.Lock()
		institutionUpdateCache[key] = cache
		institutionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q institutionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for institutions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for institutions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstitutionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), institutionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `institutions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, institutionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in institution slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all institution")
	}
	return rowsAff, nil
}

var mySQLInstitutionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Institution) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no institutions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(institutionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLInstitutionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	institutionUpsertCacheMut.RLock()
	cache, cached := institutionUpsertCache[key]
	institutionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			institutionAllColumns,
			institutionColumnsWithDefault,
			institutionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			institutionAllColumns,
			institutionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert institutions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`institutions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `institutions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(institutionType, institutionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(institutionType, institutionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for institutions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == institutionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(institutionType, institutionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for institutions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for institutions")
	}

CacheNoHooks:
	if !cached {
		institutionUpsertCacheMut.Lock()
		institutionUpsertCache[key] = cache
		institutionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Institution record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Institution) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Institution provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), institutionPrimaryKeyMapping)
	sql := "DELETE FROM `institutions` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from institutions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for institutions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q institutionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no institutionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from institutions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for institutions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstitutionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(institutionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), institutionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `institutions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, institutionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from institution slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for institutions")
	}

	if len(institutionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Institution) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInstitution(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstitutionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InstitutionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), institutionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `institutions`.* FROM `institutions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, institutionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in InstitutionSlice")
	}

	*o = slice

	return nil
}

// InstitutionExists checks if the Institution row exists.
func InstitutionExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `institutions` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if institutions exists")
	}

	return exists, nil
}
