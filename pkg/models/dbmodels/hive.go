// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Hive is an object representing the database table.
type Hive struct {
	HiveID               uint64      `boil:"hive_id" json:"hive_id" toml:"hive_id" yaml:"hive_id"`
	Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description          string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	PinnedPostID         null.Uint64 `boil:"pinned_post_id" json:"pinned_post_id,omitempty" toml:"pinned_post_id" yaml:"pinned_post_id,omitempty"`
	TagComparisons       null.JSON   `boil:"tag_comparisons" json:"tag_comparisons,omitempty" toml:"tag_comparisons" yaml:"tag_comparisons,omitempty"`
	NotificationTopicArn null.String `boil:"notification_topic_arn" json:"notification_topic_arn,omitempty" toml:"notification_topic_arn" yaml:"notification_topic_arn,omitempty"`
	HiveDistributions    null.JSON   `boil:"hive_distributions" json:"hive_distributions,omitempty" toml:"hive_distributions" yaml:"hive_distributions,omitempty"`
	CreatedAt            null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	DeletedAt            null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *hiveR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hiveL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HiveColumns = struct {
	HiveID               string
	Name                 string
	Description          string
	PinnedPostID         string
	TagComparisons       string
	NotificationTopicArn string
	HiveDistributions    string
	CreatedAt            string
	DeletedAt            string
}{
	HiveID:               "hive_id",
	Name:                 "name",
	Description:          "description",
	PinnedPostID:         "pinned_post_id",
	TagComparisons:       "tag_comparisons",
	NotificationTopicArn: "notification_topic_arn",
	HiveDistributions:    "hive_distributions",
	CreatedAt:            "created_at",
	DeletedAt:            "deleted_at",
}

var HiveTableColumns = struct {
	HiveID               string
	Name                 string
	Description          string
	PinnedPostID         string
	TagComparisons       string
	NotificationTopicArn string
	HiveDistributions    string
	CreatedAt            string
	DeletedAt            string
}{
	HiveID:               "hive.hive_id",
	Name:                 "hive.name",
	Description:          "hive.description",
	PinnedPostID:         "hive.pinned_post_id",
	TagComparisons:       "hive.tag_comparisons",
	NotificationTopicArn: "hive.notification_topic_arn",
	HiveDistributions:    "hive.hive_distributions",
	CreatedAt:            "hive.created_at",
	DeletedAt:            "hive.deleted_at",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var HiveWhere = struct {
	HiveID               whereHelperuint64
	Name                 whereHelperstring
	Description          whereHelperstring
	PinnedPostID         whereHelpernull_Uint64
	TagComparisons       whereHelpernull_JSON
	NotificationTopicArn whereHelpernull_String
	HiveDistributions    whereHelpernull_JSON
	CreatedAt            whereHelpernull_Time
	DeletedAt            whereHelpernull_Time
}{
	HiveID:               whereHelperuint64{field: "`hive`.`hive_id`"},
	Name:                 whereHelperstring{field: "`hive`.`name`"},
	Description:          whereHelperstring{field: "`hive`.`description`"},
	PinnedPostID:         whereHelpernull_Uint64{field: "`hive`.`pinned_post_id`"},
	TagComparisons:       whereHelpernull_JSON{field: "`hive`.`tag_comparisons`"},
	NotificationTopicArn: whereHelpernull_String{field: "`hive`.`notification_topic_arn`"},
	HiveDistributions:    whereHelpernull_JSON{field: "`hive`.`hive_distributions`"},
	CreatedAt:            whereHelpernull_Time{field: "`hive`.`created_at`"},
	DeletedAt:            whereHelpernull_Time{field: "`hive`.`deleted_at`"},
}

// HiveRels is where relationship names are stored.
var HiveRels = struct {
	AdminImpartWealthUsers  string
	MemberImpartWealthUsers string
	HiveUserDemographics    string
	Posts                   string
}{
	AdminImpartWealthUsers:  "AdminImpartWealthUsers",
	MemberImpartWealthUsers: "MemberImpartWealthUsers",
	HiveUserDemographics:    "HiveUserDemographics",
	Posts:                   "Posts",
}

// hiveR is where relationships are stored.
type hiveR struct {
	AdminImpartWealthUsers  UserSlice                `boil:"AdminImpartWealthUsers" json:"AdminImpartWealthUsers" toml:"AdminImpartWealthUsers" yaml:"AdminImpartWealthUsers"`
	MemberImpartWealthUsers UserSlice                `boil:"MemberImpartWealthUsers" json:"MemberImpartWealthUsers" toml:"MemberImpartWealthUsers" yaml:"MemberImpartWealthUsers"`
	HiveUserDemographics    HiveUserDemographicSlice `boil:"HiveUserDemographics" json:"HiveUserDemographics" toml:"HiveUserDemographics" yaml:"HiveUserDemographics"`
	Posts                   PostSlice                `boil:"Posts" json:"Posts" toml:"Posts" yaml:"Posts"`
}

// NewStruct creates a new relationship struct
func (*hiveR) NewStruct() *hiveR {
	return &hiveR{}
}

// hiveL is where Load methods for each relationship are stored.
type hiveL struct{}

var (
	hiveAllColumns            = []string{"hive_id", "name", "description", "pinned_post_id", "tag_comparisons", "notification_topic_arn", "hive_distributions", "created_at", "deleted_at"}
	hiveColumnsWithoutDefault = []string{"hive_id", "name", "description", "pinned_post_id", "tag_comparisons", "notification_topic_arn", "hive_distributions", "created_at", "deleted_at"}
	hiveColumnsWithDefault    = []string{}
	hivePrimaryKeyColumns     = []string{"hive_id"}
)

type (
	// HiveSlice is an alias for a slice of pointers to Hive.
	// This should almost always be used instead of []Hive.
	HiveSlice []*Hive
	// HiveHook is the signature for custom Hive hook methods
	HiveHook func(context.Context, boil.ContextExecutor, *Hive) error

	hiveQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hiveType                 = reflect.TypeOf(&Hive{})
	hiveMapping              = queries.MakeStructMapping(hiveType)
	hivePrimaryKeyMapping, _ = queries.BindMapping(hiveType, hiveMapping, hivePrimaryKeyColumns)
	hiveInsertCacheMut       sync.RWMutex
	hiveInsertCache          = make(map[string]insertCache)
	hiveUpdateCacheMut       sync.RWMutex
	hiveUpdateCache          = make(map[string]updateCache)
	hiveUpsertCacheMut       sync.RWMutex
	hiveUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hiveBeforeInsertHooks []HiveHook
var hiveBeforeUpdateHooks []HiveHook
var hiveBeforeDeleteHooks []HiveHook
var hiveBeforeUpsertHooks []HiveHook

var hiveAfterInsertHooks []HiveHook
var hiveAfterSelectHooks []HiveHook
var hiveAfterUpdateHooks []HiveHook
var hiveAfterDeleteHooks []HiveHook
var hiveAfterUpsertHooks []HiveHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Hive) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Hive) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Hive) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Hive) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Hive) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Hive) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Hive) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Hive) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Hive) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hiveAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHiveHook registers your hook function for all future operations.
func AddHiveHook(hookPoint boil.HookPoint, hiveHook HiveHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		hiveBeforeInsertHooks = append(hiveBeforeInsertHooks, hiveHook)
	case boil.BeforeUpdateHook:
		hiveBeforeUpdateHooks = append(hiveBeforeUpdateHooks, hiveHook)
	case boil.BeforeDeleteHook:
		hiveBeforeDeleteHooks = append(hiveBeforeDeleteHooks, hiveHook)
	case boil.BeforeUpsertHook:
		hiveBeforeUpsertHooks = append(hiveBeforeUpsertHooks, hiveHook)
	case boil.AfterInsertHook:
		hiveAfterInsertHooks = append(hiveAfterInsertHooks, hiveHook)
	case boil.AfterSelectHook:
		hiveAfterSelectHooks = append(hiveAfterSelectHooks, hiveHook)
	case boil.AfterUpdateHook:
		hiveAfterUpdateHooks = append(hiveAfterUpdateHooks, hiveHook)
	case boil.AfterDeleteHook:
		hiveAfterDeleteHooks = append(hiveAfterDeleteHooks, hiveHook)
	case boil.AfterUpsertHook:
		hiveAfterUpsertHooks = append(hiveAfterUpsertHooks, hiveHook)
	}
}

// One returns a single hive record from the query.
func (q hiveQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Hive, error) {
	o := &Hive{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for hive")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Hive records from the query.
func (q hiveQuery) All(ctx context.Context, exec boil.ContextExecutor) (HiveSlice, error) {
	var o []*Hive

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Hive slice")
	}

	if len(hiveAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Hive records in the query.
func (q hiveQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count hive rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hiveQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if hive exists")
	}

	return count > 0, nil
}

// AdminImpartWealthUsers retrieves all the user's Users with an executor via impart_wealth_id column.
func (o *Hive) AdminImpartWealthUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`hive_admins` on `user`.`impart_wealth_id` = `hive_admins`.`admin_impart_wealth_id`"),
		qm.Where("`hive_admins`.`admin_hive_id`=?", o.HiveID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`user`.*"})
	}

	return query
}

// MemberImpartWealthUsers retrieves all the user's Users with an executor via impart_wealth_id column.
func (o *Hive) MemberImpartWealthUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`hive_members` on `user`.`impart_wealth_id` = `hive_members`.`member_impart_wealth_id`"),
		qm.Where("`hive_members`.`member_hive_id`=?", o.HiveID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`user`.*"})
	}

	return query
}

// HiveUserDemographics retrieves all the hive_user_demographic's HiveUserDemographics with an executor.
func (o *Hive) HiveUserDemographics(mods ...qm.QueryMod) hiveUserDemographicQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`hive_user_demographic`.`hive_id`=?", o.HiveID),
	)

	query := HiveUserDemographics(queryMods...)
	queries.SetFrom(query.Query, "`hive_user_demographic`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`hive_user_demographic`.*"})
	}

	return query
}

// Posts retrieves all the post's Posts with an executor.
func (o *Hive) Posts(mods ...qm.QueryMod) postQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`post`.`hive_id`=?", o.HiveID),
		qmhelper.WhereIsNull("`post`.`deleted_at`"),
	)

	query := Posts(queryMods...)
	queries.SetFrom(query.Query, "`post`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`post`.*"})
	}

	return query
}

// LoadAdminImpartWealthUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hiveL) LoadAdminImpartWealthUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHive interface{}, mods queries.Applicator) error {
	var slice []*Hive
	var object *Hive

	if singular {
		object = maybeHive.(*Hive)
	} else {
		slice = *maybeHive.(*[]*Hive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveR{}
		}
		args = append(args, object.HiveID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveR{}
			}

			for _, a := range args {
				if a == obj.HiveID {
					continue Outer
				}
			}

			args = append(args, obj.HiveID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`user`.impart_wealth_id, `user`.authentication_id, `user`.email, `user`.screen_name, `user`.created_at, `user`.updated_at, `user`.deleted_at, `user`.device_token, `user`.aws_sns_app_arn, `user`.admin, `user`.email_verified, `user`.blocked, `user`.feedback, `user`.lastlogin_at, `user`.super_admin, `user`.deleted_by_admin, `user`.plaid_access_token, `a`.`admin_hive_id`"),
		qm.From("`user`"),
		qm.InnerJoin("`hive_admins` as `a` on `user`.`impart_wealth_id` = `a`.`admin_impart_wealth_id`"),
		qm.WhereIn("`a`.`admin_hive_id` in ?", args...),
		qmhelper.WhereIsNull("`user`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user")
	}

	var resultSlice []*User

	var localJoinCols []uint64
	for results.Next() {
		one := new(User)
		var localJoinCol uint64

		err = results.Scan(&one.ImpartWealthID, &one.AuthenticationID, &one.Email, &one.ScreenName, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &one.DeviceToken, &one.AwsSNSAppArn, &one.Admin, &one.EmailVerified, &one.Blocked, &one.Feedback, &one.LastloginAt, &one.SuperAdmin, &one.DeletedByAdmin, &one.PlaidAccessToken, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for user")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice user")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AdminImpartWealthUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.AdminHiveHives = append(foreign.R.AdminHiveHives, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.HiveID == localJoinCol {
				local.R.AdminImpartWealthUsers = append(local.R.AdminImpartWealthUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AdminHiveHives = append(foreign.R.AdminHiveHives, local)
				break
			}
		}
	}

	return nil
}

// LoadMemberImpartWealthUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hiveL) LoadMemberImpartWealthUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHive interface{}, mods queries.Applicator) error {
	var slice []*Hive
	var object *Hive

	if singular {
		object = maybeHive.(*Hive)
	} else {
		slice = *maybeHive.(*[]*Hive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveR{}
		}
		args = append(args, object.HiveID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveR{}
			}

			for _, a := range args {
				if a == obj.HiveID {
					continue Outer
				}
			}

			args = append(args, obj.HiveID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`user`.impart_wealth_id, `user`.authentication_id, `user`.email, `user`.screen_name, `user`.created_at, `user`.updated_at, `user`.deleted_at, `user`.device_token, `user`.aws_sns_app_arn, `user`.admin, `user`.email_verified, `user`.blocked, `user`.feedback, `user`.lastlogin_at, `user`.super_admin, `user`.deleted_by_admin, `user`.plaid_access_token, `a`.`member_hive_id`"),
		qm.From("`user`"),
		qm.InnerJoin("`hive_members` as `a` on `user`.`impart_wealth_id` = `a`.`member_impart_wealth_id`"),
		qm.WhereIn("`a`.`member_hive_id` in ?", args...),
		qmhelper.WhereIsNull("`user`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user")
	}

	var resultSlice []*User

	var localJoinCols []uint64
	for results.Next() {
		one := new(User)
		var localJoinCol uint64

		err = results.Scan(&one.ImpartWealthID, &one.AuthenticationID, &one.Email, &one.ScreenName, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &one.DeviceToken, &one.AwsSNSAppArn, &one.Admin, &one.EmailVerified, &one.Blocked, &one.Feedback, &one.LastloginAt, &one.SuperAdmin, &one.DeletedByAdmin, &one.PlaidAccessToken, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for user")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice user")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MemberImpartWealthUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.MemberHiveHives = append(foreign.R.MemberHiveHives, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.HiveID == localJoinCol {
				local.R.MemberImpartWealthUsers = append(local.R.MemberImpartWealthUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MemberHiveHives = append(foreign.R.MemberHiveHives, local)
				break
			}
		}
	}

	return nil
}

// LoadHiveUserDemographics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hiveL) LoadHiveUserDemographics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHive interface{}, mods queries.Applicator) error {
	var slice []*Hive
	var object *Hive

	if singular {
		object = maybeHive.(*Hive)
	} else {
		slice = *maybeHive.(*[]*Hive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveR{}
		}
		args = append(args, object.HiveID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveR{}
			}

			for _, a := range args {
				if a == obj.HiveID {
					continue Outer
				}
			}

			args = append(args, obj.HiveID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hive_user_demographic`),
		qm.WhereIn(`hive_user_demographic.hive_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hive_user_demographic")
	}

	var resultSlice []*HiveUserDemographic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hive_user_demographic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hive_user_demographic")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hive_user_demographic")
	}

	if len(hiveUserDemographicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HiveUserDemographics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hiveUserDemographicR{}
			}
			foreign.R.Hive = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.HiveID == foreign.HiveID {
				local.R.HiveUserDemographics = append(local.R.HiveUserDemographics, foreign)
				if foreign.R == nil {
					foreign.R = &hiveUserDemographicR{}
				}
				foreign.R.Hive = local
				break
			}
		}
	}

	return nil
}

// LoadPosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hiveL) LoadPosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHive interface{}, mods queries.Applicator) error {
	var slice []*Hive
	var object *Hive

	if singular {
		object = maybeHive.(*Hive)
	} else {
		slice = *maybeHive.(*[]*Hive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hiveR{}
		}
		args = append(args, object.HiveID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hiveR{}
			}

			for _, a := range args {
				if a == obj.HiveID {
					continue Outer
				}
			}

			args = append(args, obj.HiveID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`post`),
		qm.WhereIn(`post.hive_id in ?`, args...),
		qmhelper.WhereIsNull(`post.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on post")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Posts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postR{}
			}
			foreign.R.Hive = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.HiveID == foreign.HiveID {
				local.R.Posts = append(local.R.Posts, foreign)
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.Hive = local
				break
			}
		}
	}

	return nil
}

// AddAdminImpartWealthUsers adds the given related objects to the existing relationships
// of the hive, optionally inserting them as new records.
// Appends related to o.R.AdminImpartWealthUsers.
// Sets related.R.AdminHiveHives appropriately.
func (o *Hive) AddAdminImpartWealthUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `hive_admins` (`admin_hive_id`, `admin_impart_wealth_id`) values (?, ?)"
		values := []interface{}{o.HiveID, rel.ImpartWealthID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &hiveR{
			AdminImpartWealthUsers: related,
		}
	} else {
		o.R.AdminImpartWealthUsers = append(o.R.AdminImpartWealthUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				AdminHiveHives: HiveSlice{o},
			}
		} else {
			rel.R.AdminHiveHives = append(rel.R.AdminHiveHives, o)
		}
	}
	return nil
}

// SetAdminImpartWealthUsers removes all previously related items of the
// hive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AdminHiveHives's AdminImpartWealthUsers accordingly.
// Replaces o.R.AdminImpartWealthUsers with related.
// Sets related.R.AdminHiveHives's AdminImpartWealthUsers accordingly.
func (o *Hive) SetAdminImpartWealthUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from `hive_admins` where `admin_hive_id` = ?"
	values := []interface{}{o.HiveID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeAdminImpartWealthUsersFromAdminHiveHivesSlice(o, related)
	if o.R != nil {
		o.R.AdminImpartWealthUsers = nil
	}
	return o.AddAdminImpartWealthUsers(ctx, exec, insert, related...)
}

// RemoveAdminImpartWealthUsers relationships from objects passed in.
// Removes related items from R.AdminImpartWealthUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.AdminHiveHives.
func (o *Hive) RemoveAdminImpartWealthUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `hive_admins` where `admin_hive_id` = ? and `admin_impart_wealth_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.HiveID}
	for _, rel := range related {
		values = append(values, rel.ImpartWealthID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeAdminImpartWealthUsersFromAdminHiveHivesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AdminImpartWealthUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.AdminImpartWealthUsers)
			if ln > 1 && i < ln-1 {
				o.R.AdminImpartWealthUsers[i] = o.R.AdminImpartWealthUsers[ln-1]
			}
			o.R.AdminImpartWealthUsers = o.R.AdminImpartWealthUsers[:ln-1]
			break
		}
	}

	return nil
}

func removeAdminImpartWealthUsersFromAdminHiveHivesSlice(o *Hive, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.AdminHiveHives {
			if o.HiveID != ri.HiveID {
				continue
			}

			ln := len(rel.R.AdminHiveHives)
			if ln > 1 && i < ln-1 {
				rel.R.AdminHiveHives[i] = rel.R.AdminHiveHives[ln-1]
			}
			rel.R.AdminHiveHives = rel.R.AdminHiveHives[:ln-1]
			break
		}
	}
}

// AddMemberImpartWealthUsers adds the given related objects to the existing relationships
// of the hive, optionally inserting them as new records.
// Appends related to o.R.MemberImpartWealthUsers.
// Sets related.R.MemberHiveHives appropriately.
func (o *Hive) AddMemberImpartWealthUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `hive_members` (`member_hive_id`, `member_impart_wealth_id`) values (?, ?)"
		values := []interface{}{o.HiveID, rel.ImpartWealthID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &hiveR{
			MemberImpartWealthUsers: related,
		}
	} else {
		o.R.MemberImpartWealthUsers = append(o.R.MemberImpartWealthUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				MemberHiveHives: HiveSlice{o},
			}
		} else {
			rel.R.MemberHiveHives = append(rel.R.MemberHiveHives, o)
		}
	}
	return nil
}

// SetMemberImpartWealthUsers removes all previously related items of the
// hive replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MemberHiveHives's MemberImpartWealthUsers accordingly.
// Replaces o.R.MemberImpartWealthUsers with related.
// Sets related.R.MemberHiveHives's MemberImpartWealthUsers accordingly.
func (o *Hive) SetMemberImpartWealthUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from `hive_members` where `member_hive_id` = ?"
	values := []interface{}{o.HiveID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeMemberImpartWealthUsersFromMemberHiveHivesSlice(o, related)
	if o.R != nil {
		o.R.MemberImpartWealthUsers = nil
	}
	return o.AddMemberImpartWealthUsers(ctx, exec, insert, related...)
}

// RemoveMemberImpartWealthUsers relationships from objects passed in.
// Removes related items from R.MemberImpartWealthUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.MemberHiveHives.
func (o *Hive) RemoveMemberImpartWealthUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `hive_members` where `member_hive_id` = ? and `member_impart_wealth_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.HiveID}
	for _, rel := range related {
		values = append(values, rel.ImpartWealthID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeMemberImpartWealthUsersFromMemberHiveHivesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MemberImpartWealthUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.MemberImpartWealthUsers)
			if ln > 1 && i < ln-1 {
				o.R.MemberImpartWealthUsers[i] = o.R.MemberImpartWealthUsers[ln-1]
			}
			o.R.MemberImpartWealthUsers = o.R.MemberImpartWealthUsers[:ln-1]
			break
		}
	}

	return nil
}

func removeMemberImpartWealthUsersFromMemberHiveHivesSlice(o *Hive, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.MemberHiveHives {
			if o.HiveID != ri.HiveID {
				continue
			}

			ln := len(rel.R.MemberHiveHives)
			if ln > 1 && i < ln-1 {
				rel.R.MemberHiveHives[i] = rel.R.MemberHiveHives[ln-1]
			}
			rel.R.MemberHiveHives = rel.R.MemberHiveHives[:ln-1]
			break
		}
	}
}

// AddHiveUserDemographics adds the given related objects to the existing relationships
// of the hive, optionally inserting them as new records.
// Appends related to o.R.HiveUserDemographics.
// Sets related.R.Hive appropriately.
func (o *Hive) AddHiveUserDemographics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HiveUserDemographic) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HiveID = o.HiveID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `hive_user_demographic` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"hive_id"}),
				strmangle.WhereClause("`", "`", 0, hiveUserDemographicPrimaryKeyColumns),
			)
			values := []interface{}{o.HiveID, rel.HiveID, rel.QuestionID, rel.AnswerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HiveID = o.HiveID
		}
	}

	if o.R == nil {
		o.R = &hiveR{
			HiveUserDemographics: related,
		}
	} else {
		o.R.HiveUserDemographics = append(o.R.HiveUserDemographics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hiveUserDemographicR{
				Hive: o,
			}
		} else {
			rel.R.Hive = o
		}
	}
	return nil
}

// AddPosts adds the given related objects to the existing relationships
// of the hive, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.Hive appropriately.
func (o *Hive) AddPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HiveID = o.HiveID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `post` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"hive_id"}),
				strmangle.WhereClause("`", "`", 0, postPrimaryKeyColumns),
			)
			values := []interface{}{o.HiveID, rel.PostID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HiveID = o.HiveID
		}
	}

	if o.R == nil {
		o.R = &hiveR{
			Posts: related,
		}
	} else {
		o.R.Posts = append(o.R.Posts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postR{
				Hive: o,
			}
		} else {
			rel.R.Hive = o
		}
	}
	return nil
}

// Hives retrieves all the records using an executor.
func Hives(mods ...qm.QueryMod) hiveQuery {
	mods = append(mods, qm.From("`hive`"), qmhelper.WhereIsNull("`hive`.`deleted_at`"))
	return hiveQuery{NewQuery(mods...)}
}

// FindHive retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHive(ctx context.Context, exec boil.ContextExecutor, hiveID uint64, selectCols ...string) (*Hive, error) {
	hiveObj := &Hive{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `hive` where `hive_id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, hiveID)

	err := q.Bind(ctx, exec, hiveObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from hive")
	}

	if err = hiveObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hiveObj, err
	}

	return hiveObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Hive) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no hive provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hiveColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hiveInsertCacheMut.RLock()
	cache, cached := hiveInsertCache[key]
	hiveInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hiveAllColumns,
			hiveColumnsWithDefault,
			hiveColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hiveType, hiveMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hiveType, hiveMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `hive` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `hive` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `hive` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, hivePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into hive")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.HiveID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for hive")
	}

CacheNoHooks:
	if !cached {
		hiveInsertCacheMut.Lock()
		hiveInsertCache[key] = cache
		hiveInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Hive.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Hive) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hiveUpdateCacheMut.RLock()
	cache, cached := hiveUpdateCache[key]
	hiveUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hiveAllColumns,
			hivePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update hive, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `hive` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, hivePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hiveType, hiveMapping, append(wl, hivePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update hive row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for hive")
	}

	if !cached {
		hiveUpdateCacheMut.Lock()
		hiveUpdateCache[key] = cache
		hiveUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hiveQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for hive")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for hive")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HiveSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `hive` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hivePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in hive slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all hive")
	}
	return rowsAff, nil
}

var mySQLHiveUniqueColumns = []string{
	"hive_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Hive) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no hive provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hiveColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLHiveUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hiveUpsertCacheMut.RLock()
	cache, cached := hiveUpsertCache[key]
	hiveUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			hiveAllColumns,
			hiveColumnsWithDefault,
			hiveColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			hiveAllColumns,
			hivePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert hive, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`hive`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `hive` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(hiveType, hiveMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hiveType, hiveMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for hive")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(hiveType, hiveMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for hive")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for hive")
	}

CacheNoHooks:
	if !cached {
		hiveUpsertCacheMut.Lock()
		hiveUpsertCache[key] = cache
		hiveUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Hive record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Hive) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Hive provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hivePrimaryKeyMapping)
		sql = "DELETE FROM `hive` WHERE `hive_id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `hive` SET %s WHERE `hive_id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(hiveType, hiveMapping, append(wl, hivePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from hive")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for hive")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hiveQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no hiveQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from hive")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for hive")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HiveSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hiveBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hivePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `hive` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hivePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hivePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `hive` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hivePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from hive slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for hive")
	}

	if len(hiveAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Hive) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHive(ctx, exec, o.HiveID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HiveSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HiveSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `hive`.* FROM `hive` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hivePrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in HiveSlice")
	}

	*o = slice

	return nil
}

// HiveExists checks if the Hive row exists.
func HiveExists(ctx context.Context, exec boil.ContextExecutor, hiveID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `hive` where `hive_id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, hiveID)
	}
	row := exec.QueryRowContext(ctx, sql, hiveID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if hive exists")
	}

	return exists, nil
}
