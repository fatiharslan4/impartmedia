// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserInstitution is an object representing the database table.
type UserInstitution struct {
	UserInstitutionsID uint64    `boil:"user_institutions_id" json:"user_institutions_id" toml:"user_institutions_id" yaml:"user_institutions_id"`
	InstitutionID      uint64    `boil:"institution_id" json:"institution_id" toml:"institution_id" yaml:"institution_id"`
	ImpartWealthID     string    `boil:"impart_wealth_id" json:"impart_wealth_id" toml:"impart_wealth_id" yaml:"impart_wealth_id"`
	AccessToken        string    `boil:"access_token" json:"access_token" toml:"access_token" yaml:"access_token"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userInstitutionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userInstitutionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserInstitutionColumns = struct {
	UserInstitutionsID string
	InstitutionID      string
	ImpartWealthID     string
	AccessToken        string
	CreatedAt          string
}{
	UserInstitutionsID: "user_institutions_id",
	InstitutionID:      "institution_id",
	ImpartWealthID:     "impart_wealth_id",
	AccessToken:        "access_token",
	CreatedAt:          "created_at",
}

var UserInstitutionTableColumns = struct {
	UserInstitutionsID string
	InstitutionID      string
	ImpartWealthID     string
	AccessToken        string
	CreatedAt          string
}{
	UserInstitutionsID: "user_institutions.user_institutions_id",
	InstitutionID:      "user_institutions.institution_id",
	ImpartWealthID:     "user_institutions.impart_wealth_id",
	AccessToken:        "user_institutions.access_token",
	CreatedAt:          "user_institutions.created_at",
}

// Generated where

var UserInstitutionWhere = struct {
	UserInstitutionsID whereHelperuint64
	InstitutionID      whereHelperuint64
	ImpartWealthID     whereHelperstring
	AccessToken        whereHelperstring
	CreatedAt          whereHelpertime_Time
}{
	UserInstitutionsID: whereHelperuint64{field: "`user_institutions`.`user_institutions_id`"},
	InstitutionID:      whereHelperuint64{field: "`user_institutions`.`institution_id`"},
	ImpartWealthID:     whereHelperstring{field: "`user_institutions`.`impart_wealth_id`"},
	AccessToken:        whereHelperstring{field: "`user_institutions`.`access_token`"},
	CreatedAt:          whereHelpertime_Time{field: "`user_institutions`.`created_at`"},
}

// UserInstitutionRels is where relationship names are stored.
var UserInstitutionRels = struct {
	ImpartWealth string
	Institution  string
}{
	ImpartWealth: "ImpartWealth",
	Institution:  "Institution",
}

// userInstitutionR is where relationships are stored.
type userInstitutionR struct {
	ImpartWealth *User        `boil:"ImpartWealth" json:"ImpartWealth" toml:"ImpartWealth" yaml:"ImpartWealth"`
	Institution  *Institution `boil:"Institution" json:"Institution" toml:"Institution" yaml:"Institution"`
}

// NewStruct creates a new relationship struct
func (*userInstitutionR) NewStruct() *userInstitutionR {
	return &userInstitutionR{}
}

// userInstitutionL is where Load methods for each relationship are stored.
type userInstitutionL struct{}

var (
	userInstitutionAllColumns            = []string{"user_institutions_id", "institution_id", "impart_wealth_id", "access_token", "created_at"}
	userInstitutionColumnsWithoutDefault = []string{"institution_id", "impart_wealth_id", "access_token", "created_at"}
	userInstitutionColumnsWithDefault    = []string{"user_institutions_id"}
	userInstitutionPrimaryKeyColumns     = []string{"user_institutions_id"}
)

type (
	// UserInstitutionSlice is an alias for a slice of pointers to UserInstitution.
	// This should almost always be used instead of []UserInstitution.
	UserInstitutionSlice []*UserInstitution
	// UserInstitutionHook is the signature for custom UserInstitution hook methods
	UserInstitutionHook func(context.Context, boil.ContextExecutor, *UserInstitution) error

	userInstitutionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userInstitutionType                 = reflect.TypeOf(&UserInstitution{})
	userInstitutionMapping              = queries.MakeStructMapping(userInstitutionType)
	userInstitutionPrimaryKeyMapping, _ = queries.BindMapping(userInstitutionType, userInstitutionMapping, userInstitutionPrimaryKeyColumns)
	userInstitutionInsertCacheMut       sync.RWMutex
	userInstitutionInsertCache          = make(map[string]insertCache)
	userInstitutionUpdateCacheMut       sync.RWMutex
	userInstitutionUpdateCache          = make(map[string]updateCache)
	userInstitutionUpsertCacheMut       sync.RWMutex
	userInstitutionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userInstitutionBeforeInsertHooks []UserInstitutionHook
var userInstitutionBeforeUpdateHooks []UserInstitutionHook
var userInstitutionBeforeDeleteHooks []UserInstitutionHook
var userInstitutionBeforeUpsertHooks []UserInstitutionHook

var userInstitutionAfterInsertHooks []UserInstitutionHook
var userInstitutionAfterSelectHooks []UserInstitutionHook
var userInstitutionAfterUpdateHooks []UserInstitutionHook
var userInstitutionAfterDeleteHooks []UserInstitutionHook
var userInstitutionAfterUpsertHooks []UserInstitutionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserInstitution) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserInstitution) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserInstitution) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserInstitution) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserInstitution) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserInstitution) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserInstitution) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserInstitution) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserInstitution) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInstitutionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserInstitutionHook registers your hook function for all future operations.
func AddUserInstitutionHook(hookPoint boil.HookPoint, userInstitutionHook UserInstitutionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userInstitutionBeforeInsertHooks = append(userInstitutionBeforeInsertHooks, userInstitutionHook)
	case boil.BeforeUpdateHook:
		userInstitutionBeforeUpdateHooks = append(userInstitutionBeforeUpdateHooks, userInstitutionHook)
	case boil.BeforeDeleteHook:
		userInstitutionBeforeDeleteHooks = append(userInstitutionBeforeDeleteHooks, userInstitutionHook)
	case boil.BeforeUpsertHook:
		userInstitutionBeforeUpsertHooks = append(userInstitutionBeforeUpsertHooks, userInstitutionHook)
	case boil.AfterInsertHook:
		userInstitutionAfterInsertHooks = append(userInstitutionAfterInsertHooks, userInstitutionHook)
	case boil.AfterSelectHook:
		userInstitutionAfterSelectHooks = append(userInstitutionAfterSelectHooks, userInstitutionHook)
	case boil.AfterUpdateHook:
		userInstitutionAfterUpdateHooks = append(userInstitutionAfterUpdateHooks, userInstitutionHook)
	case boil.AfterDeleteHook:
		userInstitutionAfterDeleteHooks = append(userInstitutionAfterDeleteHooks, userInstitutionHook)
	case boil.AfterUpsertHook:
		userInstitutionAfterUpsertHooks = append(userInstitutionAfterUpsertHooks, userInstitutionHook)
	}
}

// One returns a single userInstitution record from the query.
func (q userInstitutionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserInstitution, error) {
	o := &UserInstitution{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for user_institutions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserInstitution records from the query.
func (q userInstitutionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserInstitutionSlice, error) {
	var o []*UserInstitution

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to UserInstitution slice")
	}

	if len(userInstitutionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserInstitution records in the query.
func (q userInstitutionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count user_institutions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userInstitutionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if user_institutions exists")
	}

	return count > 0, nil
}

// ImpartWealth pointed to by the foreign key.
func (o *UserInstitution) ImpartWealth(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`impart_wealth_id` = ?", o.ImpartWealthID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// Institution pointed to by the foreign key.
func (o *UserInstitution) Institution(mods ...qm.QueryMod) institutionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.InstitutionID),
	}

	queryMods = append(queryMods, mods...)

	query := Institutions(queryMods...)
	queries.SetFrom(query.Query, "`institutions`")

	return query
}

// LoadImpartWealth allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userInstitutionL) LoadImpartWealth(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserInstitution interface{}, mods queries.Applicator) error {
	var slice []*UserInstitution
	var object *UserInstitution

	if singular {
		object = maybeUserInstitution.(*UserInstitution)
	} else {
		slice = *maybeUserInstitution.(*[]*UserInstitution)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userInstitutionR{}
		}
		args = append(args, object.ImpartWealthID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userInstitutionR{}
			}

			for _, a := range args {
				if a == obj.ImpartWealthID {
					continue Outer
				}
			}

			args = append(args, obj.ImpartWealthID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.impart_wealth_id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userInstitutionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ImpartWealth = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ImpartWealthUserInstitutions = append(foreign.R.ImpartWealthUserInstitutions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImpartWealthID == foreign.ImpartWealthID {
				local.R.ImpartWealth = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ImpartWealthUserInstitutions = append(foreign.R.ImpartWealthUserInstitutions, local)
				break
			}
		}
	}

	return nil
}

// LoadInstitution allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userInstitutionL) LoadInstitution(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserInstitution interface{}, mods queries.Applicator) error {
	var slice []*UserInstitution
	var object *UserInstitution

	if singular {
		object = maybeUserInstitution.(*UserInstitution)
	} else {
		slice = *maybeUserInstitution.(*[]*UserInstitution)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userInstitutionR{}
		}
		args = append(args, object.InstitutionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userInstitutionR{}
			}

			for _, a := range args {
				if a == obj.InstitutionID {
					continue Outer
				}
			}

			args = append(args, obj.InstitutionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`institutions`),
		qm.WhereIn(`institutions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Institution")
	}

	var resultSlice []*Institution
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Institution")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for institutions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for institutions")
	}

	if len(userInstitutionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Institution = foreign
		if foreign.R == nil {
			foreign.R = &institutionR{}
		}
		foreign.R.UserInstitutions = append(foreign.R.UserInstitutions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InstitutionID == foreign.ID {
				local.R.Institution = foreign
				if foreign.R == nil {
					foreign.R = &institutionR{}
				}
				foreign.R.UserInstitutions = append(foreign.R.UserInstitutions, local)
				break
			}
		}
	}

	return nil
}

// SetImpartWealth of the userInstitution to the related item.
// Sets o.R.ImpartWealth to related.
// Adds o to related.R.ImpartWealthUserInstitutions.
func (o *UserInstitution) SetImpartWealth(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_institutions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"impart_wealth_id"}),
		strmangle.WhereClause("`", "`", 0, userInstitutionPrimaryKeyColumns),
	)
	values := []interface{}{related.ImpartWealthID, o.UserInstitutionsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImpartWealthID = related.ImpartWealthID
	if o.R == nil {
		o.R = &userInstitutionR{
			ImpartWealth: related,
		}
	} else {
		o.R.ImpartWealth = related
	}

	if related.R == nil {
		related.R = &userR{
			ImpartWealthUserInstitutions: UserInstitutionSlice{o},
		}
	} else {
		related.R.ImpartWealthUserInstitutions = append(related.R.ImpartWealthUserInstitutions, o)
	}

	return nil
}

// SetInstitution of the userInstitution to the related item.
// Sets o.R.Institution to related.
// Adds o to related.R.UserInstitutions.
func (o *UserInstitution) SetInstitution(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Institution) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_institutions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"institution_id"}),
		strmangle.WhereClause("`", "`", 0, userInstitutionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserInstitutionsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InstitutionID = related.ID
	if o.R == nil {
		o.R = &userInstitutionR{
			Institution: related,
		}
	} else {
		o.R.Institution = related
	}

	if related.R == nil {
		related.R = &institutionR{
			UserInstitutions: UserInstitutionSlice{o},
		}
	} else {
		related.R.UserInstitutions = append(related.R.UserInstitutions, o)
	}

	return nil
}

// UserInstitutions retrieves all the records using an executor.
func UserInstitutions(mods ...qm.QueryMod) userInstitutionQuery {
	mods = append(mods, qm.From("`user_institutions`"))
	return userInstitutionQuery{NewQuery(mods...)}
}

// FindUserInstitution retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserInstitution(ctx context.Context, exec boil.ContextExecutor, userInstitutionsID uint64, selectCols ...string) (*UserInstitution, error) {
	userInstitutionObj := &UserInstitution{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_institutions` where `user_institutions_id`=?", sel,
	)

	q := queries.Raw(query, userInstitutionsID)

	err := q.Bind(ctx, exec, userInstitutionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from user_institutions")
	}

	if err = userInstitutionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userInstitutionObj, err
	}

	return userInstitutionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserInstitution) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no user_institutions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userInstitutionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInstitutionInsertCacheMut.RLock()
	cache, cached := userInstitutionInsertCache[key]
	userInstitutionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userInstitutionAllColumns,
			userInstitutionColumnsWithDefault,
			userInstitutionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userInstitutionType, userInstitutionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userInstitutionType, userInstitutionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_institutions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_institutions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_institutions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userInstitutionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into user_institutions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.UserInstitutionsID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userInstitutionMapping["user_institutions_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserInstitutionsID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for user_institutions")
	}

CacheNoHooks:
	if !cached {
		userInstitutionInsertCacheMut.Lock()
		userInstitutionInsertCache[key] = cache
		userInstitutionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserInstitution.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserInstitution) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userInstitutionUpdateCacheMut.RLock()
	cache, cached := userInstitutionUpdateCache[key]
	userInstitutionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userInstitutionAllColumns,
			userInstitutionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update user_institutions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_institutions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userInstitutionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userInstitutionType, userInstitutionMapping, append(wl, userInstitutionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update user_institutions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for user_institutions")
	}

	if !cached {
		userInstitutionUpdateCacheMut.Lock()
		userInstitutionUpdateCache[key] = cache
		userInstitutionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userInstitutionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for user_institutions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for user_institutions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserInstitutionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userInstitutionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_institutions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userInstitutionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in userInstitution slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all userInstitution")
	}
	return rowsAff, nil
}

var mySQLUserInstitutionUniqueColumns = []string{
	"user_institutions_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserInstitution) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no user_institutions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userInstitutionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserInstitutionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userInstitutionUpsertCacheMut.RLock()
	cache, cached := userInstitutionUpsertCache[key]
	userInstitutionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userInstitutionAllColumns,
			userInstitutionColumnsWithDefault,
			userInstitutionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userInstitutionAllColumns,
			userInstitutionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert user_institutions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_institutions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_institutions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userInstitutionType, userInstitutionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userInstitutionType, userInstitutionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for user_institutions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.UserInstitutionsID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userInstitutionMapping["user_institutions_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userInstitutionType, userInstitutionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for user_institutions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for user_institutions")
	}

CacheNoHooks:
	if !cached {
		userInstitutionUpsertCacheMut.Lock()
		userInstitutionUpsertCache[key] = cache
		userInstitutionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserInstitution record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserInstitution) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no UserInstitution provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userInstitutionPrimaryKeyMapping)
	sql := "DELETE FROM `user_institutions` WHERE `user_institutions_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from user_institutions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for user_institutions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userInstitutionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no userInstitutionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from user_institutions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for user_institutions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserInstitutionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userInstitutionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userInstitutionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_institutions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userInstitutionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from userInstitution slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for user_institutions")
	}

	if len(userInstitutionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserInstitution) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserInstitution(ctx, exec, o.UserInstitutionsID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserInstitutionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserInstitutionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userInstitutionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_institutions`.* FROM `user_institutions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userInstitutionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in UserInstitutionSlice")
	}

	*o = slice

	return nil
}

// UserInstitutionExists checks if the UserInstitution row exists.
func UserInstitutionExists(ctx context.Context, exec boil.ContextExecutor, userInstitutionsID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_institutions` where `user_institutions_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userInstitutionsID)
	}
	row := exec.QueryRowContext(ctx, sql, userInstitutionsID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if user_institutions exists")
	}

	return exists, nil
}
