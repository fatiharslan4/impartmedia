// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CommentEdit is an object representing the database table.
type CommentEdit struct {
	CommentID      uint64      `boil:"comment_id" json:"comment_id" toml:"comment_id" yaml:"comment_id"`
	EditID         uint64      `boil:"edit_id" json:"edit_id" toml:"edit_id" yaml:"edit_id"`
	ImpartWealthID string      `boil:"impart_wealth_id" json:"impart_wealth_id" toml:"impart_wealth_id" yaml:"impart_wealth_id"`
	EditTimestamp  time.Time   `boil:"edit_timestamp" json:"edit_timestamp" toml:"edit_timestamp" yaml:"edit_timestamp"`
	Deleted        bool        `boil:"deleted" json:"deleted" toml:"deleted" yaml:"deleted"`
	Notes          null.String `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`

	R *commentEditR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commentEditL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommentEditColumns = struct {
	CommentID      string
	EditID         string
	ImpartWealthID string
	EditTimestamp  string
	Deleted        string
	Notes          string
}{
	CommentID:      "comment_id",
	EditID:         "edit_id",
	ImpartWealthID: "impart_wealth_id",
	EditTimestamp:  "edit_timestamp",
	Deleted:        "deleted",
	Notes:          "notes",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CommentEditWhere = struct {
	CommentID      whereHelperuint64
	EditID         whereHelperuint64
	ImpartWealthID whereHelperstring
	EditTimestamp  whereHelpertime_Time
	Deleted        whereHelperbool
	Notes          whereHelpernull_String
}{
	CommentID:      whereHelperuint64{field: "`comment_edits`.`comment_id`"},
	EditID:         whereHelperuint64{field: "`comment_edits`.`edit_id`"},
	ImpartWealthID: whereHelperstring{field: "`comment_edits`.`impart_wealth_id`"},
	EditTimestamp:  whereHelpertime_Time{field: "`comment_edits`.`edit_timestamp`"},
	Deleted:        whereHelperbool{field: "`comment_edits`.`deleted`"},
	Notes:          whereHelpernull_String{field: "`comment_edits`.`notes`"},
}

// CommentEditRels is where relationship names are stored.
var CommentEditRels = struct {
	Comment      string
	ImpartWealth string
}{
	Comment:      "Comment",
	ImpartWealth: "ImpartWealth",
}

// commentEditR is where relationships are stored.
type commentEditR struct {
	Comment      *Comment `boil:"Comment" json:"Comment" toml:"Comment" yaml:"Comment"`
	ImpartWealth *User    `boil:"ImpartWealth" json:"ImpartWealth" toml:"ImpartWealth" yaml:"ImpartWealth"`
}

// NewStruct creates a new relationship struct
func (*commentEditR) NewStruct() *commentEditR {
	return &commentEditR{}
}

// commentEditL is where Load methods for each relationship are stored.
type commentEditL struct{}

var (
	commentEditAllColumns            = []string{"comment_id", "edit_id", "impart_wealth_id", "edit_timestamp", "deleted", "notes"}
	commentEditColumnsWithoutDefault = []string{"comment_id", "edit_id", "impart_wealth_id", "edit_timestamp", "notes"}
	commentEditColumnsWithDefault    = []string{"deleted"}
	commentEditPrimaryKeyColumns     = []string{"comment_id", "edit_id"}
)

type (
	// CommentEditSlice is an alias for a slice of pointers to CommentEdit.
	// This should generally be used opposed to []CommentEdit.
	CommentEditSlice []*CommentEdit
	// CommentEditHook is the signature for custom CommentEdit hook methods
	CommentEditHook func(context.Context, boil.ContextExecutor, *CommentEdit) error

	commentEditQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commentEditType                 = reflect.TypeOf(&CommentEdit{})
	commentEditMapping              = queries.MakeStructMapping(commentEditType)
	commentEditPrimaryKeyMapping, _ = queries.BindMapping(commentEditType, commentEditMapping, commentEditPrimaryKeyColumns)
	commentEditInsertCacheMut       sync.RWMutex
	commentEditInsertCache          = make(map[string]insertCache)
	commentEditUpdateCacheMut       sync.RWMutex
	commentEditUpdateCache          = make(map[string]updateCache)
	commentEditUpsertCacheMut       sync.RWMutex
	commentEditUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var commentEditBeforeInsertHooks []CommentEditHook
var commentEditBeforeUpdateHooks []CommentEditHook
var commentEditBeforeDeleteHooks []CommentEditHook
var commentEditBeforeUpsertHooks []CommentEditHook

var commentEditAfterInsertHooks []CommentEditHook
var commentEditAfterSelectHooks []CommentEditHook
var commentEditAfterUpdateHooks []CommentEditHook
var commentEditAfterDeleteHooks []CommentEditHook
var commentEditAfterUpsertHooks []CommentEditHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CommentEdit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentEditBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CommentEdit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentEditBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CommentEdit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentEditBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CommentEdit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentEditBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CommentEdit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentEditAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CommentEdit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentEditAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CommentEdit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentEditAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CommentEdit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentEditAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CommentEdit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commentEditAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCommentEditHook registers your hook function for all future operations.
func AddCommentEditHook(hookPoint boil.HookPoint, commentEditHook CommentEditHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		commentEditBeforeInsertHooks = append(commentEditBeforeInsertHooks, commentEditHook)
	case boil.BeforeUpdateHook:
		commentEditBeforeUpdateHooks = append(commentEditBeforeUpdateHooks, commentEditHook)
	case boil.BeforeDeleteHook:
		commentEditBeforeDeleteHooks = append(commentEditBeforeDeleteHooks, commentEditHook)
	case boil.BeforeUpsertHook:
		commentEditBeforeUpsertHooks = append(commentEditBeforeUpsertHooks, commentEditHook)
	case boil.AfterInsertHook:
		commentEditAfterInsertHooks = append(commentEditAfterInsertHooks, commentEditHook)
	case boil.AfterSelectHook:
		commentEditAfterSelectHooks = append(commentEditAfterSelectHooks, commentEditHook)
	case boil.AfterUpdateHook:
		commentEditAfterUpdateHooks = append(commentEditAfterUpdateHooks, commentEditHook)
	case boil.AfterDeleteHook:
		commentEditAfterDeleteHooks = append(commentEditAfterDeleteHooks, commentEditHook)
	case boil.AfterUpsertHook:
		commentEditAfterUpsertHooks = append(commentEditAfterUpsertHooks, commentEditHook)
	}
}

// One returns a single commentEdit record from the query.
func (q commentEditQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CommentEdit, error) {
	o := &CommentEdit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for comment_edits")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CommentEdit records from the query.
func (q commentEditQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommentEditSlice, error) {
	var o []*CommentEdit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to CommentEdit slice")
	}

	if len(commentEditAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CommentEdit records in the query.
func (q commentEditQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count comment_edits rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q commentEditQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if comment_edits exists")
	}

	return count > 0, nil
}

// Comment pointed to by the foreign key.
func (o *CommentEdit) Comment(mods ...qm.QueryMod) commentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`comment_id` = ?", o.CommentID),
	}

	queryMods = append(queryMods, mods...)

	query := Comments(queryMods...)
	queries.SetFrom(query.Query, "`comment`")

	return query
}

// ImpartWealth pointed to by the foreign key.
func (o *CommentEdit) ImpartWealth(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`impart_wealth_id` = ?", o.ImpartWealthID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// LoadComment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commentEditL) LoadComment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommentEdit interface{}, mods queries.Applicator) error {
	var slice []*CommentEdit
	var object *CommentEdit

	if singular {
		object = maybeCommentEdit.(*CommentEdit)
	} else {
		slice = *maybeCommentEdit.(*[]*CommentEdit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commentEditR{}
		}
		args = append(args, object.CommentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commentEditR{}
			}

			for _, a := range args {
				if a == obj.CommentID {
					continue Outer
				}
			}

			args = append(args, obj.CommentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`comment`),
		qm.WhereIn(`comment.comment_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Comment")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Comment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for comment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comment")
	}

	if len(commentEditAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Comment = foreign
		if foreign.R == nil {
			foreign.R = &commentR{}
		}
		foreign.R.CommentEdits = append(foreign.R.CommentEdits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommentID == foreign.CommentID {
				local.R.Comment = foreign
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.CommentEdits = append(foreign.R.CommentEdits, local)
				break
			}
		}
	}

	return nil
}

// LoadImpartWealth allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commentEditL) LoadImpartWealth(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommentEdit interface{}, mods queries.Applicator) error {
	var slice []*CommentEdit
	var object *CommentEdit

	if singular {
		object = maybeCommentEdit.(*CommentEdit)
	} else {
		slice = *maybeCommentEdit.(*[]*CommentEdit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commentEditR{}
		}
		args = append(args, object.ImpartWealthID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commentEditR{}
			}

			for _, a := range args {
				if a == obj.ImpartWealthID {
					continue Outer
				}
			}

			args = append(args, obj.ImpartWealthID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.impart_wealth_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(commentEditAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ImpartWealth = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ImpartWealthCommentEdits = append(foreign.R.ImpartWealthCommentEdits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImpartWealthID == foreign.ImpartWealthID {
				local.R.ImpartWealth = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ImpartWealthCommentEdits = append(foreign.R.ImpartWealthCommentEdits, local)
				break
			}
		}
	}

	return nil
}

// SetComment of the commentEdit to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentEdits.
func (o *CommentEdit) SetComment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Comment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `comment_edits` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"comment_id"}),
		strmangle.WhereClause("`", "`", 0, commentEditPrimaryKeyColumns),
	)
	values := []interface{}{related.CommentID, o.CommentID, o.EditID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommentID = related.CommentID
	if o.R == nil {
		o.R = &commentEditR{
			Comment: related,
		}
	} else {
		o.R.Comment = related
	}

	if related.R == nil {
		related.R = &commentR{
			CommentEdits: CommentEditSlice{o},
		}
	} else {
		related.R.CommentEdits = append(related.R.CommentEdits, o)
	}

	return nil
}

// SetImpartWealth of the commentEdit to the related item.
// Sets o.R.ImpartWealth to related.
// Adds o to related.R.ImpartWealthCommentEdits.
func (o *CommentEdit) SetImpartWealth(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `comment_edits` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"impart_wealth_id"}),
		strmangle.WhereClause("`", "`", 0, commentEditPrimaryKeyColumns),
	)
	values := []interface{}{related.ImpartWealthID, o.CommentID, o.EditID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImpartWealthID = related.ImpartWealthID
	if o.R == nil {
		o.R = &commentEditR{
			ImpartWealth: related,
		}
	} else {
		o.R.ImpartWealth = related
	}

	if related.R == nil {
		related.R = &userR{
			ImpartWealthCommentEdits: CommentEditSlice{o},
		}
	} else {
		related.R.ImpartWealthCommentEdits = append(related.R.ImpartWealthCommentEdits, o)
	}

	return nil
}

// CommentEdits retrieves all the records using an executor.
func CommentEdits(mods ...qm.QueryMod) commentEditQuery {
	mods = append(mods, qm.From("`comment_edits`"))
	return commentEditQuery{NewQuery(mods...)}
}

// FindCommentEdit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommentEdit(ctx context.Context, exec boil.ContextExecutor, commentID uint64, editID uint64, selectCols ...string) (*CommentEdit, error) {
	commentEditObj := &CommentEdit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `comment_edits` where `comment_id`=? AND `edit_id`=?", sel,
	)

	q := queries.Raw(query, commentID, editID)

	err := q.Bind(ctx, exec, commentEditObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from comment_edits")
	}

	return commentEditObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommentEdit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no comment_edits provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentEditColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commentEditInsertCacheMut.RLock()
	cache, cached := commentEditInsertCache[key]
	commentEditInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commentEditAllColumns,
			commentEditColumnsWithDefault,
			commentEditColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commentEditType, commentEditMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commentEditType, commentEditMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `comment_edits` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `comment_edits` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `comment_edits` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, commentEditPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into comment_edits")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CommentID,
		o.EditID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for comment_edits")
	}

CacheNoHooks:
	if !cached {
		commentEditInsertCacheMut.Lock()
		commentEditInsertCache[key] = cache
		commentEditInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CommentEdit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommentEdit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	commentEditUpdateCacheMut.RLock()
	cache, cached := commentEditUpdateCache[key]
	commentEditUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commentEditAllColumns,
			commentEditPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update comment_edits, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `comment_edits` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, commentEditPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commentEditType, commentEditMapping, append(wl, commentEditPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update comment_edits row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for comment_edits")
	}

	if !cached {
		commentEditUpdateCacheMut.Lock()
		commentEditUpdateCache[key] = cache
		commentEditUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q commentEditQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for comment_edits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for comment_edits")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommentEditSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentEditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `comment_edits` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentEditPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in commentEdit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all commentEdit")
	}
	return rowsAff, nil
}

var mySQLCommentEditUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommentEdit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no comment_edits provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentEditColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCommentEditUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commentEditUpsertCacheMut.RLock()
	cache, cached := commentEditUpsertCache[key]
	commentEditUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			commentEditAllColumns,
			commentEditColumnsWithDefault,
			commentEditColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			commentEditAllColumns,
			commentEditPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert comment_edits, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`comment_edits`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `comment_edits` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(commentEditType, commentEditMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commentEditType, commentEditMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for comment_edits")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(commentEditType, commentEditMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for comment_edits")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for comment_edits")
	}

CacheNoHooks:
	if !cached {
		commentEditUpsertCacheMut.Lock()
		commentEditUpsertCache[key] = cache
		commentEditUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CommentEdit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommentEdit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no CommentEdit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commentEditPrimaryKeyMapping)
	sql := "DELETE FROM `comment_edits` WHERE `comment_id`=? AND `edit_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from comment_edits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for comment_edits")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q commentEditQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no commentEditQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from comment_edits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for comment_edits")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommentEditSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(commentEditBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentEditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `comment_edits` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentEditPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from commentEdit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for comment_edits")
	}

	if len(commentEditAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommentEdit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommentEdit(ctx, exec, o.CommentID, o.EditID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentEditSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommentEditSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentEditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `comment_edits`.* FROM `comment_edits` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentEditPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in CommentEditSlice")
	}

	*o = slice

	return nil
}

// CommentEditExists checks if the CommentEdit row exists.
func CommentEditExists(ctx context.Context, exec boil.ContextExecutor, commentID uint64, editID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `comment_edits` where `comment_id`=? AND `edit_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, commentID, editID)
	}
	row := exec.QueryRowContext(ctx, sql, commentID, editID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if comment_edits exists")
	}

	return exists, nil
}
