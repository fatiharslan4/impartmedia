// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserPlaidAccountsLog is an object representing the database table.
type UserPlaidAccountsLog struct {
	ID                     uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserInstitutionID      uint64    `boil:"user_institution_id" json:"user_institution_id" toml:"user_institution_id" yaml:"user_institution_id"`
	AccountID              string    `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	Mask                   string    `boil:"mask" json:"mask" toml:"mask" yaml:"mask"`
	Name                   string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	OfficialName           string    `boil:"official_name" json:"official_name" toml:"official_name" yaml:"official_name"`
	Subtype                string    `boil:"subtype" json:"subtype" toml:"subtype" yaml:"subtype"`
	Type                   string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	IsoCurrencyCode        string    `boil:"iso_currency_code" json:"iso_currency_code" toml:"iso_currency_code" yaml:"iso_currency_code"`
	UnofficialCurrencyCode string    `boil:"unofficial_currency_code" json:"unofficial_currency_code" toml:"unofficial_currency_code" yaml:"unofficial_currency_code"`
	Available              float64   `boil:"available" json:"available" toml:"available" yaml:"available"`
	Current                float64   `boil:"current" json:"current" toml:"current" yaml:"current"`
	CreditLimit            float64   `boil:"credit_limit" json:"credit_limit" toml:"credit_limit" yaml:"credit_limit"`
	CreatedAt              time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userPlaidAccountsLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userPlaidAccountsLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserPlaidAccountsLogColumns = struct {
	ID                     string
	UserInstitutionID      string
	AccountID              string
	Mask                   string
	Name                   string
	OfficialName           string
	Subtype                string
	Type                   string
	IsoCurrencyCode        string
	UnofficialCurrencyCode string
	Available              string
	Current                string
	CreditLimit            string
	CreatedAt              string
}{
	ID:                     "id",
	UserInstitutionID:      "user_institution_id",
	AccountID:              "account_id",
	Mask:                   "mask",
	Name:                   "name",
	OfficialName:           "official_name",
	Subtype:                "subtype",
	Type:                   "type",
	IsoCurrencyCode:        "iso_currency_code",
	UnofficialCurrencyCode: "unofficial_currency_code",
	Available:              "available",
	Current:                "current",
	CreditLimit:            "credit_limit",
	CreatedAt:              "created_at",
}

var UserPlaidAccountsLogTableColumns = struct {
	ID                     string
	UserInstitutionID      string
	AccountID              string
	Mask                   string
	Name                   string
	OfficialName           string
	Subtype                string
	Type                   string
	IsoCurrencyCode        string
	UnofficialCurrencyCode string
	Available              string
	Current                string
	CreditLimit            string
	CreatedAt              string
}{
	ID:                     "user_plaid_accounts_log.id",
	UserInstitutionID:      "user_plaid_accounts_log.user_institution_id",
	AccountID:              "user_plaid_accounts_log.account_id",
	Mask:                   "user_plaid_accounts_log.mask",
	Name:                   "user_plaid_accounts_log.name",
	OfficialName:           "user_plaid_accounts_log.official_name",
	Subtype:                "user_plaid_accounts_log.subtype",
	Type:                   "user_plaid_accounts_log.type",
	IsoCurrencyCode:        "user_plaid_accounts_log.iso_currency_code",
	UnofficialCurrencyCode: "user_plaid_accounts_log.unofficial_currency_code",
	Available:              "user_plaid_accounts_log.available",
	Current:                "user_plaid_accounts_log.current",
	CreditLimit:            "user_plaid_accounts_log.credit_limit",
	CreatedAt:              "user_plaid_accounts_log.created_at",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var UserPlaidAccountsLogWhere = struct {
	ID                     whereHelperuint64
	UserInstitutionID      whereHelperuint64
	AccountID              whereHelperstring
	Mask                   whereHelperstring
	Name                   whereHelperstring
	OfficialName           whereHelperstring
	Subtype                whereHelperstring
	Type                   whereHelperstring
	IsoCurrencyCode        whereHelperstring
	UnofficialCurrencyCode whereHelperstring
	Available              whereHelperfloat64
	Current                whereHelperfloat64
	CreditLimit            whereHelperfloat64
	CreatedAt              whereHelpertime_Time
}{
	ID:                     whereHelperuint64{field: "`user_plaid_accounts_log`.`id`"},
	UserInstitutionID:      whereHelperuint64{field: "`user_plaid_accounts_log`.`user_institution_id`"},
	AccountID:              whereHelperstring{field: "`user_plaid_accounts_log`.`account_id`"},
	Mask:                   whereHelperstring{field: "`user_plaid_accounts_log`.`mask`"},
	Name:                   whereHelperstring{field: "`user_plaid_accounts_log`.`name`"},
	OfficialName:           whereHelperstring{field: "`user_plaid_accounts_log`.`official_name`"},
	Subtype:                whereHelperstring{field: "`user_plaid_accounts_log`.`subtype`"},
	Type:                   whereHelperstring{field: "`user_plaid_accounts_log`.`type`"},
	IsoCurrencyCode:        whereHelperstring{field: "`user_plaid_accounts_log`.`iso_currency_code`"},
	UnofficialCurrencyCode: whereHelperstring{field: "`user_plaid_accounts_log`.`unofficial_currency_code`"},
	Available:              whereHelperfloat64{field: "`user_plaid_accounts_log`.`available`"},
	Current:                whereHelperfloat64{field: "`user_plaid_accounts_log`.`current`"},
	CreditLimit:            whereHelperfloat64{field: "`user_plaid_accounts_log`.`credit_limit`"},
	CreatedAt:              whereHelpertime_Time{field: "`user_plaid_accounts_log`.`created_at`"},
}

// UserPlaidAccountsLogRels is where relationship names are stored.
var UserPlaidAccountsLogRels = struct {
	UserInstitution string
}{
	UserInstitution: "UserInstitution",
}

// userPlaidAccountsLogR is where relationships are stored.
type userPlaidAccountsLogR struct {
	UserInstitution *UserInstitution `boil:"UserInstitution" json:"UserInstitution" toml:"UserInstitution" yaml:"UserInstitution"`
}

// NewStruct creates a new relationship struct
func (*userPlaidAccountsLogR) NewStruct() *userPlaidAccountsLogR {
	return &userPlaidAccountsLogR{}
}

// userPlaidAccountsLogL is where Load methods for each relationship are stored.
type userPlaidAccountsLogL struct{}

var (
	userPlaidAccountsLogAllColumns            = []string{"id", "user_institution_id", "account_id", "mask", "name", "official_name", "subtype", "type", "iso_currency_code", "unofficial_currency_code", "available", "current", "credit_limit", "created_at"}
	userPlaidAccountsLogColumnsWithoutDefault = []string{"user_institution_id", "account_id", "mask", "name", "official_name", "subtype", "type", "iso_currency_code", "unofficial_currency_code", "available", "current", "credit_limit", "created_at"}
	userPlaidAccountsLogColumnsWithDefault    = []string{"id"}
	userPlaidAccountsLogPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserPlaidAccountsLogSlice is an alias for a slice of pointers to UserPlaidAccountsLog.
	// This should almost always be used instead of []UserPlaidAccountsLog.
	UserPlaidAccountsLogSlice []*UserPlaidAccountsLog
	// UserPlaidAccountsLogHook is the signature for custom UserPlaidAccountsLog hook methods
	UserPlaidAccountsLogHook func(context.Context, boil.ContextExecutor, *UserPlaidAccountsLog) error

	userPlaidAccountsLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userPlaidAccountsLogType                 = reflect.TypeOf(&UserPlaidAccountsLog{})
	userPlaidAccountsLogMapping              = queries.MakeStructMapping(userPlaidAccountsLogType)
	userPlaidAccountsLogPrimaryKeyMapping, _ = queries.BindMapping(userPlaidAccountsLogType, userPlaidAccountsLogMapping, userPlaidAccountsLogPrimaryKeyColumns)
	userPlaidAccountsLogInsertCacheMut       sync.RWMutex
	userPlaidAccountsLogInsertCache          = make(map[string]insertCache)
	userPlaidAccountsLogUpdateCacheMut       sync.RWMutex
	userPlaidAccountsLogUpdateCache          = make(map[string]updateCache)
	userPlaidAccountsLogUpsertCacheMut       sync.RWMutex
	userPlaidAccountsLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userPlaidAccountsLogBeforeInsertHooks []UserPlaidAccountsLogHook
var userPlaidAccountsLogBeforeUpdateHooks []UserPlaidAccountsLogHook
var userPlaidAccountsLogBeforeDeleteHooks []UserPlaidAccountsLogHook
var userPlaidAccountsLogBeforeUpsertHooks []UserPlaidAccountsLogHook

var userPlaidAccountsLogAfterInsertHooks []UserPlaidAccountsLogHook
var userPlaidAccountsLogAfterSelectHooks []UserPlaidAccountsLogHook
var userPlaidAccountsLogAfterUpdateHooks []UserPlaidAccountsLogHook
var userPlaidAccountsLogAfterDeleteHooks []UserPlaidAccountsLogHook
var userPlaidAccountsLogAfterUpsertHooks []UserPlaidAccountsLogHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserPlaidAccountsLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlaidAccountsLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserPlaidAccountsLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlaidAccountsLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserPlaidAccountsLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlaidAccountsLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserPlaidAccountsLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlaidAccountsLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserPlaidAccountsLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlaidAccountsLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserPlaidAccountsLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlaidAccountsLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserPlaidAccountsLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlaidAccountsLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserPlaidAccountsLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlaidAccountsLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserPlaidAccountsLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlaidAccountsLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserPlaidAccountsLogHook registers your hook function for all future operations.
func AddUserPlaidAccountsLogHook(hookPoint boil.HookPoint, userPlaidAccountsLogHook UserPlaidAccountsLogHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userPlaidAccountsLogBeforeInsertHooks = append(userPlaidAccountsLogBeforeInsertHooks, userPlaidAccountsLogHook)
	case boil.BeforeUpdateHook:
		userPlaidAccountsLogBeforeUpdateHooks = append(userPlaidAccountsLogBeforeUpdateHooks, userPlaidAccountsLogHook)
	case boil.BeforeDeleteHook:
		userPlaidAccountsLogBeforeDeleteHooks = append(userPlaidAccountsLogBeforeDeleteHooks, userPlaidAccountsLogHook)
	case boil.BeforeUpsertHook:
		userPlaidAccountsLogBeforeUpsertHooks = append(userPlaidAccountsLogBeforeUpsertHooks, userPlaidAccountsLogHook)
	case boil.AfterInsertHook:
		userPlaidAccountsLogAfterInsertHooks = append(userPlaidAccountsLogAfterInsertHooks, userPlaidAccountsLogHook)
	case boil.AfterSelectHook:
		userPlaidAccountsLogAfterSelectHooks = append(userPlaidAccountsLogAfterSelectHooks, userPlaidAccountsLogHook)
	case boil.AfterUpdateHook:
		userPlaidAccountsLogAfterUpdateHooks = append(userPlaidAccountsLogAfterUpdateHooks, userPlaidAccountsLogHook)
	case boil.AfterDeleteHook:
		userPlaidAccountsLogAfterDeleteHooks = append(userPlaidAccountsLogAfterDeleteHooks, userPlaidAccountsLogHook)
	case boil.AfterUpsertHook:
		userPlaidAccountsLogAfterUpsertHooks = append(userPlaidAccountsLogAfterUpsertHooks, userPlaidAccountsLogHook)
	}
}

// One returns a single userPlaidAccountsLog record from the query.
func (q userPlaidAccountsLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserPlaidAccountsLog, error) {
	o := &UserPlaidAccountsLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for user_plaid_accounts_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserPlaidAccountsLog records from the query.
func (q userPlaidAccountsLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserPlaidAccountsLogSlice, error) {
	var o []*UserPlaidAccountsLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to UserPlaidAccountsLog slice")
	}

	if len(userPlaidAccountsLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserPlaidAccountsLog records in the query.
func (q userPlaidAccountsLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count user_plaid_accounts_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userPlaidAccountsLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if user_plaid_accounts_log exists")
	}

	return count > 0, nil
}

// UserInstitution pointed to by the foreign key.
func (o *UserPlaidAccountsLog) UserInstitution(mods ...qm.QueryMod) userInstitutionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_institution_id` = ?", o.UserInstitutionID),
	}

	queryMods = append(queryMods, mods...)

	query := UserInstitutions(queryMods...)
	queries.SetFrom(query.Query, "`user_institutions`")

	return query
}

// LoadUserInstitution allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPlaidAccountsLogL) LoadUserInstitution(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPlaidAccountsLog interface{}, mods queries.Applicator) error {
	var slice []*UserPlaidAccountsLog
	var object *UserPlaidAccountsLog

	if singular {
		object = maybeUserPlaidAccountsLog.(*UserPlaidAccountsLog)
	} else {
		slice = *maybeUserPlaidAccountsLog.(*[]*UserPlaidAccountsLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPlaidAccountsLogR{}
		}
		args = append(args, object.UserInstitutionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPlaidAccountsLogR{}
			}

			for _, a := range args {
				if a == obj.UserInstitutionID {
					continue Outer
				}
			}

			args = append(args, obj.UserInstitutionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_institutions`),
		qm.WhereIn(`user_institutions.user_institution_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserInstitution")
	}

	var resultSlice []*UserInstitution
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserInstitution")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_institutions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_institutions")
	}

	if len(userPlaidAccountsLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserInstitution = foreign
		if foreign.R == nil {
			foreign.R = &userInstitutionR{}
		}
		foreign.R.UserPlaidAccountsLogs = append(foreign.R.UserPlaidAccountsLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserInstitutionID == foreign.UserInstitutionID {
				local.R.UserInstitution = foreign
				if foreign.R == nil {
					foreign.R = &userInstitutionR{}
				}
				foreign.R.UserPlaidAccountsLogs = append(foreign.R.UserPlaidAccountsLogs, local)
				break
			}
		}
	}

	return nil
}

// SetUserInstitution of the userPlaidAccountsLog to the related item.
// Sets o.R.UserInstitution to related.
// Adds o to related.R.UserPlaidAccountsLogs.
func (o *UserPlaidAccountsLog) SetUserInstitution(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserInstitution) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_plaid_accounts_log` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_institution_id"}),
		strmangle.WhereClause("`", "`", 0, userPlaidAccountsLogPrimaryKeyColumns),
	)
	values := []interface{}{related.UserInstitutionID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserInstitutionID = related.UserInstitutionID
	if o.R == nil {
		o.R = &userPlaidAccountsLogR{
			UserInstitution: related,
		}
	} else {
		o.R.UserInstitution = related
	}

	if related.R == nil {
		related.R = &userInstitutionR{
			UserPlaidAccountsLogs: UserPlaidAccountsLogSlice{o},
		}
	} else {
		related.R.UserPlaidAccountsLogs = append(related.R.UserPlaidAccountsLogs, o)
	}

	return nil
}

// UserPlaidAccountsLogs retrieves all the records using an executor.
func UserPlaidAccountsLogs(mods ...qm.QueryMod) userPlaidAccountsLogQuery {
	mods = append(mods, qm.From("`user_plaid_accounts_log`"))
	return userPlaidAccountsLogQuery{NewQuery(mods...)}
}

// FindUserPlaidAccountsLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserPlaidAccountsLog(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*UserPlaidAccountsLog, error) {
	userPlaidAccountsLogObj := &UserPlaidAccountsLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_plaid_accounts_log` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userPlaidAccountsLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from user_plaid_accounts_log")
	}

	if err = userPlaidAccountsLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userPlaidAccountsLogObj, err
	}

	return userPlaidAccountsLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserPlaidAccountsLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no user_plaid_accounts_log provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPlaidAccountsLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userPlaidAccountsLogInsertCacheMut.RLock()
	cache, cached := userPlaidAccountsLogInsertCache[key]
	userPlaidAccountsLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userPlaidAccountsLogAllColumns,
			userPlaidAccountsLogColumnsWithDefault,
			userPlaidAccountsLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userPlaidAccountsLogType, userPlaidAccountsLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userPlaidAccountsLogType, userPlaidAccountsLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_plaid_accounts_log` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_plaid_accounts_log` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_plaid_accounts_log` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userPlaidAccountsLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into user_plaid_accounts_log")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userPlaidAccountsLogMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for user_plaid_accounts_log")
	}

CacheNoHooks:
	if !cached {
		userPlaidAccountsLogInsertCacheMut.Lock()
		userPlaidAccountsLogInsertCache[key] = cache
		userPlaidAccountsLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserPlaidAccountsLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserPlaidAccountsLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userPlaidAccountsLogUpdateCacheMut.RLock()
	cache, cached := userPlaidAccountsLogUpdateCache[key]
	userPlaidAccountsLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userPlaidAccountsLogAllColumns,
			userPlaidAccountsLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update user_plaid_accounts_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_plaid_accounts_log` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userPlaidAccountsLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userPlaidAccountsLogType, userPlaidAccountsLogMapping, append(wl, userPlaidAccountsLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update user_plaid_accounts_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for user_plaid_accounts_log")
	}

	if !cached {
		userPlaidAccountsLogUpdateCacheMut.Lock()
		userPlaidAccountsLogUpdateCache[key] = cache
		userPlaidAccountsLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userPlaidAccountsLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for user_plaid_accounts_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for user_plaid_accounts_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserPlaidAccountsLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPlaidAccountsLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_plaid_accounts_log` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPlaidAccountsLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in userPlaidAccountsLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all userPlaidAccountsLog")
	}
	return rowsAff, nil
}

var mySQLUserPlaidAccountsLogUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserPlaidAccountsLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no user_plaid_accounts_log provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPlaidAccountsLogColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserPlaidAccountsLogUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userPlaidAccountsLogUpsertCacheMut.RLock()
	cache, cached := userPlaidAccountsLogUpsertCache[key]
	userPlaidAccountsLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userPlaidAccountsLogAllColumns,
			userPlaidAccountsLogColumnsWithDefault,
			userPlaidAccountsLogColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userPlaidAccountsLogAllColumns,
			userPlaidAccountsLogPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert user_plaid_accounts_log, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_plaid_accounts_log`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_plaid_accounts_log` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userPlaidAccountsLogType, userPlaidAccountsLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userPlaidAccountsLogType, userPlaidAccountsLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for user_plaid_accounts_log")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userPlaidAccountsLogMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userPlaidAccountsLogType, userPlaidAccountsLogMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for user_plaid_accounts_log")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for user_plaid_accounts_log")
	}

CacheNoHooks:
	if !cached {
		userPlaidAccountsLogUpsertCacheMut.Lock()
		userPlaidAccountsLogUpsertCache[key] = cache
		userPlaidAccountsLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserPlaidAccountsLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserPlaidAccountsLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no UserPlaidAccountsLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPlaidAccountsLogPrimaryKeyMapping)
	sql := "DELETE FROM `user_plaid_accounts_log` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from user_plaid_accounts_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for user_plaid_accounts_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userPlaidAccountsLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no userPlaidAccountsLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from user_plaid_accounts_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for user_plaid_accounts_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserPlaidAccountsLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userPlaidAccountsLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPlaidAccountsLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_plaid_accounts_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPlaidAccountsLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from userPlaidAccountsLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for user_plaid_accounts_log")
	}

	if len(userPlaidAccountsLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserPlaidAccountsLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserPlaidAccountsLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserPlaidAccountsLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserPlaidAccountsLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPlaidAccountsLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_plaid_accounts_log`.* FROM `user_plaid_accounts_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPlaidAccountsLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in UserPlaidAccountsLogSlice")
	}

	*o = slice

	return nil
}

// UserPlaidAccountsLogExists checks if the UserPlaidAccountsLog row exists.
func UserPlaidAccountsLogExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_plaid_accounts_log` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if user_plaid_accounts_log exists")
	}

	return exists, nil
}
